
dc-motor-control-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800479c  0800479c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a4  080047a4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080047ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  08004808  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004808  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e991  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002223  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  00030c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091f  00000000  00000000  00031838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002667  00000000  00000000  00032157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104a9  00000000  00000000  000347be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099d31  00000000  00000000  00044c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e54  00000000  00000000  000de998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e17ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004658 	.word	0x08004658

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08004658 	.word	0x08004658

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8d8 	bl	8000628 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8d3 	bl	8000628 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f7ff ffdd 	bl	80005ec <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f7ff ffd8 	bl	80005ec <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fc1d 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f863 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f937 	bl	80008c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f8e7 	bl	8000824 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000656:	f000 f8a5 	bl	80007a4 <MX_I2C1_Init>

  /* Run I2C scanner */
  // i2cScanner();

  /* Initialise pressure sensor */
  uint8_t ret = SPL06_007_Initialise( &pressureSensor, &hi2c1 );
 800065a:	1dfc      	adds	r4, r7, #7
 800065c:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <main+0xb8>)
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <main+0xbc>)
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f000 f9c5 	bl	80009f2 <SPL06_007_Initialise>
 8000668:	0003      	movs	r3, r0
 800066a:	7023      	strb	r3, [r4, #0]
  if (ret == 0){
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d112      	bne.n	800069a <main+0x5a>
	  // Success
	  sprintf(msg, "Successfully Connected to SPL006. \r\n");
 8000674:	4a22      	ldr	r2, [pc, #136]	; (8000700 <main+0xc0>)
 8000676:	4b23      	ldr	r3, [pc, #140]	; (8000704 <main+0xc4>)
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f003 fb46 	bl	8003d0c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <main+0xc4>)
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff fd3e 	bl	8000104 <strlen>
 8000688:	0003      	movs	r3, r0
 800068a:	b29a      	uxth	r2, r3
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	491c      	ldr	r1, [pc, #112]	; (8000704 <main+0xc4>)
 8000692:	481d      	ldr	r0, [pc, #116]	; (8000708 <main+0xc8>)
 8000694:	f002 fc8a 	bl	8002fac <HAL_UART_Transmit>
 8000698:	e012      	b.n	80006c0 <main+0x80>
  } else {
	  // Errors
	  sprintf(msg, "Number of errors: %d\r\n", ret);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	491b      	ldr	r1, [pc, #108]	; (800070c <main+0xcc>)
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <main+0xc4>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f003 fb32 	bl	8003d0c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <main+0xc4>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f7ff fd2a 	bl	8000104 <strlen>
 80006b0:	0003      	movs	r3, r0
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	4912      	ldr	r1, [pc, #72]	; (8000704 <main+0xc4>)
 80006ba:	4813      	ldr	r0, [pc, #76]	; (8000708 <main+0xc8>)
 80006bc:	f002 fc76 	bl	8002fac <HAL_UART_Transmit>
  }

  /* Check Sensor Mode */
  uint8_t sensorMode = SPL06_007_checkMode(&pressureSensor);
 80006c0:	1dbc      	adds	r4, r7, #6
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <main+0xbc>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fa28 	bl	8000b1a <SPL06_007_checkMode>
 80006ca:	0003      	movs	r3, r0
 80006cc:	7023      	strb	r3, [r4, #0]
  sprintf(msg, "Sensor Mode: 0x%02X\r\n", sensorMode);
 80006ce:	1dbb      	adds	r3, r7, #6
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	490f      	ldr	r1, [pc, #60]	; (8000710 <main+0xd0>)
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <main+0xc4>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f003 fb18 	bl	8003d0c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <main+0xc4>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f7ff fd10 	bl	8000104 <strlen>
 80006e4:	0003      	movs	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	2301      	movs	r3, #1
 80006ea:	425b      	negs	r3, r3
 80006ec:	4905      	ldr	r1, [pc, #20]	; (8000704 <main+0xc4>)
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <main+0xc8>)
 80006f0:	f002 fc5c 	bl	8002fac <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0xb4>
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	20000088 	.word	0x20000088
 80006fc:	20000078 	.word	0x20000078
 8000700:	08004670 	.word	0x08004670
 8000704:	20000170 	.word	0x20000170
 8000708:	200000dc 	.word	0x200000dc
 800070c:	08004698 	.word	0x08004698
 8000710:	080046b0 	.word	0x080046b0

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b093      	sub	sp, #76	; 0x4c
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	2410      	movs	r4, #16
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2338      	movs	r3, #56	; 0x38
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f003 fb11 	bl	8003d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072a:	003b      	movs	r3, r7
 800072c:	0018      	movs	r0, r3
 800072e:	2310      	movs	r3, #16
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f003 fb0a 	bl	8003d4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fd17 	bl	8002170 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2202      	movs	r2, #2
 8000746:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2240      	movs	r2, #64	; 0x40
 800075a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	f001 fd4f 	bl	8002208 <HAL_RCC_OscConfig>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800076e:	f000 f93b 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	003b      	movs	r3, r7
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000778:	003b      	movs	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078a:	003b      	movs	r3, r7
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f002 f854 	bl	800283c <HAL_RCC_ClockConfig>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000798:	f000 f926 	bl	80009e8 <Error_Handler>
  }
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b013      	add	sp, #76	; 0x4c
 80007a2:	bd90      	pop	{r4, r7, pc}

080007a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_I2C1_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_I2C1_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_I2C1_Init+0x74>)
 80007bc:	2201      	movs	r2, #1
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2C1_Init+0x74>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fe21 	bl	8001428 <HAL_I2C_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ea:	f000 f8fd 	bl	80009e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_I2C1_Init+0x74>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fc24 	bl	8002040 <HAL_I2CEx_ConfigAnalogFilter>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007fc:	f000 f8f4 	bl	80009e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_I2C1_Init+0x74>)
 8000802:	2100      	movs	r1, #0
 8000804:	0018      	movs	r0, r3
 8000806:	f001 fc67 	bl	80020d8 <HAL_I2CEx_ConfigDigitalFilter>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 f8eb 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000088 	.word	0x20000088
 800081c:	40005400 	.word	0x40005400
 8000820:	00303d5b 	.word	0x00303d5b

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 800082a:	4a24      	ldr	r2, [pc, #144]	; (80008bc <MX_USART2_UART_Init+0x98>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 8000830:	22e1      	movs	r2, #225	; 0xe1
 8000832:	0252      	lsls	r2, r2, #9
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 800086e:	0018      	movs	r0, r3
 8000870:	f002 fb46 	bl	8002f00 <HAL_UART_Init>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 f8b6 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 800087e:	2100      	movs	r1, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f003 f963 	bl	8003b4c <HAL_UARTEx_SetTxFifoThreshold>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800088a:	f000 f8ad 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 8000890:	2100      	movs	r1, #0
 8000892:	0018      	movs	r0, r3
 8000894:	f003 f99a 	bl	8003bcc <HAL_UARTEx_SetRxFifoThreshold>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 f8a4 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f003 f918 	bl	8003ad8 <HAL_UARTEx_DisableFifoMode>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f89c 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	200000dc 	.word	0x200000dc
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b08b      	sub	sp, #44	; 0x2c
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	2414      	movs	r4, #20
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	0018      	movs	r0, r3
 80008cc:	2314      	movs	r3, #20
 80008ce:	001a      	movs	r2, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	f003 fa3b 	bl	8003d4c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b41      	ldr	r3, [pc, #260]	; (80009dc <MX_GPIO_Init+0x11c>)
 80008d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008da:	4b40      	ldr	r3, [pc, #256]	; (80009dc <MX_GPIO_Init+0x11c>)
 80008dc:	2104      	movs	r1, #4
 80008de:	430a      	orrs	r2, r1
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
 80008e2:	4b3e      	ldr	r3, [pc, #248]	; (80009dc <MX_GPIO_Init+0x11c>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e6:	2204      	movs	r2, #4
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ee:	4b3b      	ldr	r3, [pc, #236]	; (80009dc <MX_GPIO_Init+0x11c>)
 80008f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f2:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <MX_GPIO_Init+0x11c>)
 80008f4:	2120      	movs	r1, #32
 80008f6:	430a      	orrs	r2, r1
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
 80008fa:	4b38      	ldr	r3, [pc, #224]	; (80009dc <MX_GPIO_Init+0x11c>)
 80008fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fe:	2220      	movs	r2, #32
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b35      	ldr	r3, [pc, #212]	; (80009dc <MX_GPIO_Init+0x11c>)
 8000908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090a:	4b34      	ldr	r3, [pc, #208]	; (80009dc <MX_GPIO_Init+0x11c>)
 800090c:	2101      	movs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <MX_GPIO_Init+0x11c>)
 8000914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <MX_GPIO_Init+0x11c>)
 8000920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <MX_GPIO_Init+0x11c>)
 8000924:	2102      	movs	r1, #2
 8000926:	430a      	orrs	r2, r1
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_GPIO_Init+0x11c>)
 800092c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092e:	2202      	movs	r2, #2
 8000930:	4013      	ands	r3, r2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000936:	23a0      	movs	r3, #160	; 0xa0
 8000938:	05db      	lsls	r3, r3, #23
 800093a:	2200      	movs	r2, #0
 800093c:	2120      	movs	r1, #32
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fd54 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000944:	4926      	ldr	r1, [pc, #152]	; (80009e0 <MX_GPIO_Init+0x120>)
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_GPIO_Init+0x124>)
 8000948:	2201      	movs	r2, #1
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fd4e 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	0059      	lsls	r1, r3, #1
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	2201      	movs	r2, #1
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fd46 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2220      	movs	r2, #32
 8000964:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2201      	movs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2202      	movs	r2, #2
 8000976:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000978:	193a      	adds	r2, r7, r4
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f000 fbcf 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN1_Pin MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_GPIO_Init+0x120>)
 800098a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2201      	movs	r2, #1
 8000990:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <MX_GPIO_Init+0x124>)
 80009a2:	0019      	movs	r1, r3
 80009a4:	0010      	movs	r0, r2
 80009a6:	f000 fbbd 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENA_Pin */
  GPIO_InitStruct.Pin = ENA_Pin;
 80009aa:	0021      	movs	r1, r4
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	0052      	lsls	r2, r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2201      	movs	r2, #1
 80009b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 80009c6:	187a      	adds	r2, r7, r1
 80009c8:	23a0      	movs	r3, #160	; 0xa0
 80009ca:	05db      	lsls	r3, r3, #23
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 fba8 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b00b      	add	sp, #44	; 0x2c
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	00004010 	.word	0x00004010
 80009e4:	50000400 	.word	0x50000400

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>

080009f2 <SPL06_007_Initialise>:
#include "spl06-007.h"

/*
 * INITIALISATION
 */
uint8_t SPL06_007_Initialise( SPL06_007 *dev, I2C_HandleTypeDef *i2cHandle ){
 80009f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f4:	b085      	sub	sp, #20
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]

	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	601a      	str	r2, [r3, #0]

	dev->compensatedPressure = 0.0f;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]

	dev->compensatedTemperature = 0.0f;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]

	dev->scaleFactor = 2088960;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	731a      	strb	r2, [r3, #12]

	/* Store number of transaction errors (to be returned at end of function */
	uint8_t errNum = 0;
 8000a14:	250f      	movs	r5, #15
 8000a16:	197b      	adds	r3, r7, r5
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	/* Check device Product and Revision ID (DATASHEET PAGE 27) */
	uint8_t regData;
	status = SPL06_007_ReadRegister( dev, SPL06007_I2C_ID_ADDR, &regData);
 8000a1c:	260e      	movs	r6, #14
 8000a1e:	19bc      	adds	r4, r7, r6
 8000a20:	230d      	movs	r3, #13
 8000a22:	18fa      	adds	r2, r7, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	210d      	movs	r1, #13
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 f887 	bl	8000b3c <SPL06_007_ReadRegister>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8000a32:	19bb      	adds	r3, r7, r6
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	197b      	adds	r3, r7, r5
 8000a40:	197a      	adds	r2, r7, r5
 8000a42:	7812      	ldrb	r2, [r2, #0]
 8000a44:	188a      	adds	r2, r1, r2
 8000a46:	701a      	strb	r2, [r3, #0]

	if ( regData != SPL06007_I2C_REV_ID){
 8000a48:	230d      	movs	r3, #13
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b10      	cmp	r3, #16
 8000a50:	d001      	beq.n	8000a56 <SPL06_007_Initialise+0x64>
		return 255;
 8000a52:	23ff      	movs	r3, #255	; 0xff
 8000a54:	e05d      	b.n	8000b12 <SPL06_007_Initialise+0x120>
	}

	/* Set Sensor Operating Mode and Status (MEAS_CFG) */
	/* Hard coded to: 111 - Continuous pressure and temperature measurement */
	uint8_t setRegValueMEAS;
	status = SPL06_007_WriteRegister(dev, SPL06_REG_MEAS_CFG_ADDR, &setRegValueMEAS);
 8000a56:	250e      	movs	r5, #14
 8000a58:	197c      	adds	r4, r7, r5
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	18fa      	adds	r2, r7, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2108      	movs	r1, #8
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f888 	bl	8000b78 <SPL06_007_WriteRegister>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8000a6c:	0028      	movs	r0, r5
 8000a6e:	183b      	adds	r3, r7, r0
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	1e5a      	subs	r2, r3, #1
 8000a74:	4193      	sbcs	r3, r2
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	0019      	movs	r1, r3
 8000a7a:	250f      	movs	r5, #15
 8000a7c:	197b      	adds	r3, r7, r5
 8000a7e:	197a      	adds	r2, r7, r5
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	188a      	adds	r2, r1, r2
 8000a84:	701a      	strb	r2, [r3, #0]

	/* Set Pressure Configuration (PRS_CFG) measurement rate and over sampling rate */
	/* Hard coded to: PM_RATE[2:0] = 111 - 128 measurements pr. sec.
					  PM_PRC[3:0] = 0110 *) - 64 times (High Precision) */
	uint8_t setRegValuePRS;
	status = SPL06_007_WriteRegister(dev, SPL06_REG_PRS_CFG_ADDR, &setRegValueMEAS);
 8000a86:	0006      	movs	r6, r0
 8000a88:	183c      	adds	r4, r7, r0
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	18fa      	adds	r2, r7, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2106      	movs	r1, #6
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f870 	bl	8000b78 <SPL06_007_WriteRegister>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8000a9c:	0030      	movs	r0, r6
 8000a9e:	183b      	adds	r3, r7, r0
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	1e5a      	subs	r2, r3, #1
 8000aa4:	4193      	sbcs	r3, r2
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	197b      	adds	r3, r7, r5
 8000aac:	197a      	adds	r2, r7, r5
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	188a      	adds	r2, r1, r2
 8000ab2:	701a      	strb	r2, [r3, #0]

	/* Set Temperature Configuration (TMP_CFG) measurement rate and over sampling rate */
	/* Hard coded to: TMP_RATE[2:0] = 111 - 128 measurements pr. sec.
					  TMP_PRC[2:0] = 111 - 128 times. */
	uint8_t setRegValueTMP;
	status = SPL06_007_WriteRegister(dev, SPL06_REG_TMP_CFG_ADDR, &setRegValueMEAS);
 8000ab4:	0006      	movs	r6, r0
 8000ab6:	183c      	adds	r4, r7, r0
 8000ab8:	230c      	movs	r3, #12
 8000aba:	18fa      	adds	r2, r7, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2107      	movs	r1, #7
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 f859 	bl	8000b78 <SPL06_007_WriteRegister>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8000aca:	0030      	movs	r0, r6
 8000acc:	183b      	adds	r3, r7, r0
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	1e5a      	subs	r2, r3, #1
 8000ad2:	4193      	sbcs	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	197b      	adds	r3, r7, r5
 8000ada:	197a      	adds	r2, r7, r5
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	188a      	adds	r2, r1, r2
 8000ae0:	701a      	strb	r2, [r3, #0]

	/* Set Interrupt and FIFO configuration (CFG_REG) */
	/* Hard coded to: T_SHIFT = Must be set to '1' when the oversampling rate is >8 times.
					  P_SHIFT = Must be set to '1' when the oversampling rate is >8 times. */
	uint8_t setRegValueCFG;
	status = SPL06_007_WriteRegister(dev, SPL06_REG_CFG_REG_ADDR, &setRegValueMEAS);
 8000ae2:	0006      	movs	r6, r0
 8000ae4:	183c      	adds	r4, r7, r0
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	18fa      	adds	r2, r7, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2109      	movs	r1, #9
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f842 	bl	8000b78 <SPL06_007_WriteRegister>
 8000af4:	0003      	movs	r3, r0
 8000af6:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8000af8:	19bb      	adds	r3, r7, r6
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	4193      	sbcs	r3, r2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	0019      	movs	r1, r3
 8000b04:	197b      	adds	r3, r7, r5
 8000b06:	197a      	adds	r2, r7, r5
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	188a      	adds	r2, r1, r2
 8000b0c:	701a      	strb	r2, [r3, #0]

	/* Return number of errors */
	return errNum;					/* 0 means successful setup */
 8000b0e:	197b      	adds	r3, r7, r5
 8000b10:	781b      	ldrb	r3, [r3, #0]
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b005      	add	sp, #20
 8000b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b1a <SPL06_007_checkMode>:

/*
 * DATA ACQUISITION
 */
uint8_t SPL06_007_checkMode( SPL06_007 *dev ){
 8000b1a:	b590      	push	{r4, r7, lr}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]

	/* Access Sensor Operating Mode and Status (MEAS_CFG) Register (0x08) */
	uint8_t regData;
	SPL06_007_ReadRegister( dev, SPL06_REG_MEAS_CFG_ADDR, &regData);
 8000b22:	240f      	movs	r4, #15
 8000b24:	193a      	adds	r2, r7, r4
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2108      	movs	r1, #8
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f806 	bl	8000b3c <SPL06_007_ReadRegister>

	/* Return value */
	return regData;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	781b      	ldrb	r3, [r3, #0]
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b005      	add	sp, #20
 8000b3a:	bd90      	pop	{r4, r7, pc}

08000b3c <SPL06_007_ReadRegister>:
}

/*
 * LOW-LEVEL FUNCTIONS
 */
HAL_StatusTypeDef SPL06_007_ReadRegister( SPL06_007 *dev, uint8_t reg, uint8_t *data ){
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af04      	add	r7, sp, #16
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	240b      	movs	r4, #11
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	1c0a      	adds	r2, r1, #0
 8000b4c:	701a      	strb	r2, [r3, #0]

	return HAL_I2C_Mem_Read(dev->i2cHandle, SPL06007_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	2301      	movs	r3, #1
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	9302      	str	r3, [sp, #8]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2301      	movs	r3, #1
 8000b68:	21ec      	movs	r1, #236	; 0xec
 8000b6a:	f000 fe31 	bl	80017d0 <HAL_I2C_Mem_Read>
 8000b6e:	0003      	movs	r3, r0

}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b005      	add	sp, #20
 8000b76:	bd90      	pop	{r4, r7, pc}

08000b78 <SPL06_007_WriteRegister>:

HAL_StatusTypeDef SPL06_007_WriteRegister( SPL06_007 *dev, uint8_t reg, uint8_t *data ){
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af04      	add	r7, sp, #16
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	240b      	movs	r4, #11
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	1c0a      	adds	r2, r1, #0
 8000b88:	701a      	strb	r2, [r3, #0]

	return HAL_I2C_Mem_Write(dev->i2cHandle, SPL06007_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	21ec      	movs	r1, #236	; 0xec
 8000ba6:	f000 fce5 	bl	8001574 <HAL_I2C_Mem_Write>
 8000baa:	0003      	movs	r3, r0
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b005      	add	sp, #20
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0549      	lsls	r1, r1, #21
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	63da      	str	r2, [r3, #60]	; 0x3c
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	055b      	lsls	r3, r3, #21
 8000be8:	4013      	ands	r3, r2
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000bee:	23c0      	movs	r3, #192	; 0xc0
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f9cc 	bl	8000f90 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b097      	sub	sp, #92	; 0x5c
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	2344      	movs	r3, #68	; 0x44
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	0018      	movs	r0, r3
 8000c12:	2314      	movs	r3, #20
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f003 f898 	bl	8003d4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	2410      	movs	r4, #16
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	0018      	movs	r0, r3
 8000c22:	2334      	movs	r3, #52	; 0x34
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f003 f890 	bl	8003d4c <memset>
  if(hi2c->Instance==I2C1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <HAL_I2C_MspInit+0xb8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d13e      	bne.n	8000cb4 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2220      	movs	r2, #32
 8000c3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 ffa3 	bl	8002b90 <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c4e:	f7ff fecb 	bl	80009e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_I2C_MspInit+0xbc>)
 8000c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_I2C_MspInit+0xbc>)
 8000c58:	2102      	movs	r1, #2
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_I2C_MspInit+0xbc>)
 8000c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c62:	2202      	movs	r2, #2
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c6a:	2144      	movs	r1, #68	; 0x44
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	22c0      	movs	r2, #192	; 0xc0
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2212      	movs	r2, #18
 8000c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2206      	movs	r2, #6
 8000c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_I2C_MspInit+0xc0>)
 8000c90:	0019      	movs	r1, r3
 8000c92:	0010      	movs	r0, r2
 8000c94:	f000 fa46 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_I2C_MspInit+0xbc>)
 8000c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_I2C_MspInit+0xbc>)
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	0389      	lsls	r1, r1, #14
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_I2C_MspInit+0xbc>)
 8000ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	039b      	lsls	r3, r3, #14
 8000cae:	4013      	ands	r3, r2
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b017      	add	sp, #92	; 0x5c
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	50000400 	.word	0x50000400

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b097      	sub	sp, #92	; 0x5c
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	2344      	movs	r3, #68	; 0x44
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	2314      	movs	r3, #20
 8000cd8:	001a      	movs	r2, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f003 f836 	bl	8003d4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	2410      	movs	r4, #16
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2334      	movs	r3, #52	; 0x34
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f003 f82e 	bl	8003d4c <memset>
  if(huart->Instance==USART2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a22      	ldr	r2, [pc, #136]	; (8000d80 <HAL_UART_MspInit+0xb8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d13e      	bne.n	8000d78 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f001 ff41 	bl	8002b90 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d12:	f7ff fe69 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0289      	lsls	r1, r1, #10
 8000d20:	430a      	orrs	r2, r1
 8000d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d42:	2201      	movs	r2, #1
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d4a:	2144      	movs	r1, #68	; 0x44
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2202      	movs	r2, #2
 8000d56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2201      	movs	r2, #1
 8000d68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	187a      	adds	r2, r7, r1
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 f9d6 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b017      	add	sp, #92	; 0x5c
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40021000 	.word	0x40021000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f8d4 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	18d3      	adds	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f002 ffb8 	bl	8003d5c <__errno>
 8000dec:	0003      	movs	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	425b      	negs	r3, r3
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	18d2      	adds	r2, r2, r3
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b006      	add	sp, #24
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20009000 	.word	0x20009000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	20000198 	.word	0x20000198
 8000e20:	200002e8 	.word	0x200002e8

08000e24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e34:	f7ff fff6 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e5e:	f002 ff83 	bl	8003d68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e62:	f7ff fbed 	bl	8000640 <main>

08000e66 <LoopForever>:

LoopForever:
  b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e74:	080047ac 	.word	0x080047ac
  ldr r2, =_sbss
 8000e78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e7c:	200002e8 	.word	0x200002e8

08000e80 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_COMP_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x3c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_Init+0x3c>)
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	0049      	lsls	r1, r1, #1
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f810 	bl	8000ec4 <HAL_InitTick>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e001      	b.n	8000eb4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fe80 	bl	8000bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40022000 	.word	0x40022000

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ecc:	230f      	movs	r3, #15
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <HAL_InitTick+0x88>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d02b      	beq.n	8000f34 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <HAL_InitTick+0x8c>)
 8000ede:	681c      	ldr	r4, [r3, #0]
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <HAL_InitTick+0x88>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	23fa      	movs	r3, #250	; 0xfa
 8000ee8:	0098      	lsls	r0, r3, #2
 8000eea:	f7ff f91d 	bl	8000128 <__udivsi3>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	0020      	movs	r0, r4
 8000ef4:	f7ff f918 	bl	8000128 <__udivsi3>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 f905 	bl	800110a <HAL_SYSTICK_Config>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d112      	bne.n	8000f2a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d80a      	bhi.n	8000f20 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	425b      	negs	r3, r3
 8000f10:	2200      	movs	r2, #0
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 f8e4 	bl	80010e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_InitTick+0x90>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e00d      	b.n	8000f3c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f20:	230f      	movs	r3, #15
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e008      	b.n	8000f3c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	e003      	b.n	8000f3c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	781b      	ldrb	r3, [r3, #0]
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b005      	add	sp, #20
 8000f48:	bd90      	pop	{r4, r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x1c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	001a      	movs	r2, r3
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x20>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	18d2      	adds	r2, r2, r3
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_IncTick+0x20>)
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	20000008 	.word	0x20000008
 8000f78:	2000019c 	.word	0x2000019c

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <HAL_GetTick+0x10>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	2000019c 	.word	0x2000019c

08000f90 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	fffff9ff 	.word	0xfffff9ff

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b7f      	cmp	r3, #127	; 0x7f
 8000fd0:	d828      	bhi.n	8001024 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <__NVIC_SetPriority+0xd4>)
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	33c0      	adds	r3, #192	; 0xc0
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	589b      	ldr	r3, [r3, r2]
 8000fe2:	1dfa      	adds	r2, r7, #7
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	2203      	movs	r2, #3
 8000fea:	400a      	ands	r2, r1
 8000fec:	00d2      	lsls	r2, r2, #3
 8000fee:	21ff      	movs	r1, #255	; 0xff
 8000ff0:	4091      	lsls	r1, r2
 8000ff2:	000a      	movs	r2, r1
 8000ff4:	43d2      	mvns	r2, r2
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	22ff      	movs	r2, #255	; 0xff
 8001000:	401a      	ands	r2, r3
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	0018      	movs	r0, r3
 8001008:	2303      	movs	r3, #3
 800100a:	4003      	ands	r3, r0
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001010:	481f      	ldr	r0, [pc, #124]	; (8001090 <__NVIC_SetPriority+0xd4>)
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b25b      	sxtb	r3, r3
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	430a      	orrs	r2, r1
 800101c:	33c0      	adds	r3, #192	; 0xc0
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001022:	e031      	b.n	8001088 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <__NVIC_SetPriority+0xd8>)
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	0019      	movs	r1, r3
 800102c:	230f      	movs	r3, #15
 800102e:	400b      	ands	r3, r1
 8001030:	3b08      	subs	r3, #8
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3306      	adds	r3, #6
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	3304      	adds	r3, #4
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	1dfa      	adds	r2, r7, #7
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	0011      	movs	r1, r2
 8001044:	2203      	movs	r2, #3
 8001046:	400a      	ands	r2, r1
 8001048:	00d2      	lsls	r2, r2, #3
 800104a:	21ff      	movs	r1, #255	; 0xff
 800104c:	4091      	lsls	r1, r2
 800104e:	000a      	movs	r2, r1
 8001050:	43d2      	mvns	r2, r2
 8001052:	401a      	ands	r2, r3
 8001054:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	019b      	lsls	r3, r3, #6
 800105a:	22ff      	movs	r2, #255	; 0xff
 800105c:	401a      	ands	r2, r3
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	0018      	movs	r0, r3
 8001064:	2303      	movs	r3, #3
 8001066:	4003      	ands	r3, r0
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <__NVIC_SetPriority+0xd8>)
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	001c      	movs	r4, r3
 8001074:	230f      	movs	r3, #15
 8001076:	4023      	ands	r3, r4
 8001078:	3b08      	subs	r3, #8
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	430a      	orrs	r2, r1
 800107e:	3306      	adds	r3, #6
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	18c3      	adds	r3, r0, r3
 8001084:	3304      	adds	r3, #4
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b003      	add	sp, #12
 800108e:	bd90      	pop	{r4, r7, pc}
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	1e5a      	subs	r2, r3, #1
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	045b      	lsls	r3, r3, #17
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d301      	bcc.n	80010b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ac:	2301      	movs	r3, #1
 80010ae:	e010      	b.n	80010d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <SysTick_Config+0x44>)
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	3a01      	subs	r2, #1
 80010b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b8:	2301      	movs	r3, #1
 80010ba:	425b      	negs	r3, r3
 80010bc:	2103      	movs	r1, #3
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff ff7c 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x44>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x44>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	210f      	movs	r1, #15
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	1c02      	adds	r2, r0, #0
 80010f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	0011      	movs	r1, r2
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b004      	add	sp, #16
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff ffbf 	bl	8001098 <SysTick_Config>
 800111a:	0003      	movs	r3, r0
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e147      	b.n	80013c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d100      	bne.n	800114c <HAL_GPIO_Init+0x28>
 800114a:	e138      	b.n	80013be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2203      	movs	r2, #3
 8001152:	4013      	ands	r3, r2
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_GPIO_Init+0x40>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	2b02      	cmp	r3, #2
 8001162:	d130      	bne.n	80011c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	43da      	mvns	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	2201      	movs	r2, #1
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2203      	movs	r2, #3
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d017      	beq.n	8001202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	4013      	ands	r3, r2
 800120a:	2b02      	cmp	r3, #2
 800120c:	d123      	bne.n	8001256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	58d3      	ldr	r3, [r2, r3]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2207      	movs	r2, #7
 8001220:	4013      	ands	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2107      	movs	r1, #7
 800123a:	400b      	ands	r3, r1
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	6939      	ldr	r1, [r7, #16]
 8001254:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2203      	movs	r2, #3
 8001274:	401a      	ands	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	23c0      	movs	r3, #192	; 0xc0
 8001290:	029b      	lsls	r3, r3, #10
 8001292:	4013      	ands	r3, r2
 8001294:	d100      	bne.n	8001298 <HAL_GPIO_Init+0x174>
 8001296:	e092      	b.n	80013be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001298:	4a50      	ldr	r2, [pc, #320]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3318      	adds	r3, #24
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	589b      	ldr	r3, [r3, r2]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2203      	movs	r2, #3
 80012aa:	4013      	ands	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	220f      	movs	r2, #15
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	23a0      	movs	r3, #160	; 0xa0
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d013      	beq.n	80012ee <HAL_GPIO_Init+0x1ca>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <HAL_GPIO_Init+0x2bc>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00d      	beq.n	80012ea <HAL_GPIO_Init+0x1c6>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a44      	ldr	r2, [pc, #272]	; (80013e4 <HAL_GPIO_Init+0x2c0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <HAL_GPIO_Init+0x1c2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a43      	ldr	r2, [pc, #268]	; (80013e8 <HAL_GPIO_Init+0x2c4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_GPIO_Init+0x1be>
 80012de:	2303      	movs	r3, #3
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x1cc>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x1cc>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x1cc>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x1cc>
 80012ee:	2300      	movs	r3, #0
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	2103      	movs	r1, #3
 80012f4:	400a      	ands	r2, r1
 80012f6:	00d2      	lsls	r2, r2, #3
 80012f8:	4093      	lsls	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001300:	4936      	ldr	r1, [pc, #216]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3318      	adds	r3, #24
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800130e:	4b33      	ldr	r3, [pc, #204]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	035b      	lsls	r3, r3, #13
 8001326:	4013      	ands	r3, r2
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43da      	mvns	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	039b      	lsls	r3, r3, #14
 8001350:	4013      	ands	r3, r2
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001362:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 8001364:	2384      	movs	r3, #132	; 0x84
 8001366:	58d3      	ldr	r3, [r2, r3]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43da      	mvns	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	029b      	lsls	r3, r3, #10
 800137c:	4013      	ands	r3, r2
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001388:	4914      	ldr	r1, [pc, #80]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 800138a:	2284      	movs	r2, #132	; 0x84
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001390:	4a12      	ldr	r2, [pc, #72]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	58d3      	ldr	r3, [r2, r3]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	025b      	lsls	r3, r3, #9
 80013aa:	4013      	ands	r3, r2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b6:	4909      	ldr	r1, [pc, #36]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	40da      	lsrs	r2, r3
 80013cc:	1e13      	subs	r3, r2, #0
 80013ce:	d000      	beq.n	80013d2 <HAL_GPIO_Init+0x2ae>
 80013d0:	e6b0      	b.n	8001134 <HAL_GPIO_Init+0x10>
  }
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b006      	add	sp, #24
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021800 	.word	0x40021800
 80013e0:	50000400 	.word	0x50000400
 80013e4:	50000800 	.word	0x50000800
 80013e8:	50000c00 	.word	0x50000c00

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	0008      	movs	r0, r1
 80013f6:	0011      	movs	r1, r2
 80013f8:	1cbb      	adds	r3, r7, #2
 80013fa:	1c02      	adds	r2, r0, #0
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	1c7b      	adds	r3, r7, #1
 8001400:	1c0a      	adds	r2, r1, #0
 8001402:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001404:	1c7b      	adds	r3, r7, #1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140c:	1cbb      	adds	r3, r7, #2
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001416:	1cbb      	adds	r3, r7, #2
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e08f      	b.n	800155a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2241      	movs	r2, #65	; 0x41
 800143e:	5c9b      	ldrb	r3, [r3, r2]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2240      	movs	r2, #64	; 0x40
 800144a:	2100      	movs	r1, #0
 800144c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff fbd7 	bl	8000c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2241      	movs	r2, #65	; 0x41
 800145a:	2124      	movs	r1, #36	; 0x24
 800145c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	438a      	bics	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	493b      	ldr	r1, [pc, #236]	; (8001564 <HAL_I2C_Init+0x13c>)
 8001478:	400a      	ands	r2, r1
 800147a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4938      	ldr	r1, [pc, #224]	; (8001568 <HAL_I2C_Init+0x140>)
 8001488:	400a      	ands	r2, r1
 800148a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d108      	bne.n	80014a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0209      	lsls	r1, r1, #8
 80014a0:	430a      	orrs	r2, r1
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	e007      	b.n	80014b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2184      	movs	r1, #132	; 0x84
 80014b0:	0209      	lsls	r1, r1, #8
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d109      	bne.n	80014d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	0109      	lsls	r1, r1, #4
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	e007      	b.n	80014e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4923      	ldr	r1, [pc, #140]	; (800156c <HAL_I2C_Init+0x144>)
 80014de:	400a      	ands	r2, r1
 80014e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4920      	ldr	r1, [pc, #128]	; (8001570 <HAL_I2C_Init+0x148>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	491a      	ldr	r1, [pc, #104]	; (8001568 <HAL_I2C_Init+0x140>)
 80014fe:	400a      	ands	r2, r1
 8001500:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	431a      	orrs	r2, r3
 800150c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69d9      	ldr	r1, [r3, #28]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1a      	ldr	r2, [r3, #32]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2101      	movs	r1, #1
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2241      	movs	r2, #65	; 0x41
 8001546:	2120      	movs	r1, #32
 8001548:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2242      	movs	r2, #66	; 0x42
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b002      	add	sp, #8
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	f0ffffff 	.word	0xf0ffffff
 8001568:	ffff7fff 	.word	0xffff7fff
 800156c:	fffff7ff 	.word	0xfffff7ff
 8001570:	02008000 	.word	0x02008000

08001574 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	000c      	movs	r4, r1
 800157e:	0010      	movs	r0, r2
 8001580:	0019      	movs	r1, r3
 8001582:	230a      	movs	r3, #10
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	1c22      	adds	r2, r4, #0
 8001588:	801a      	strh	r2, [r3, #0]
 800158a:	2308      	movs	r3, #8
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	1c02      	adds	r2, r0, #0
 8001590:	801a      	strh	r2, [r3, #0]
 8001592:	1dbb      	adds	r3, r7, #6
 8001594:	1c0a      	adds	r2, r1, #0
 8001596:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2241      	movs	r2, #65	; 0x41
 800159c:	5c9b      	ldrb	r3, [r3, r2]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	d000      	beq.n	80015a6 <HAL_I2C_Mem_Write+0x32>
 80015a4:	e10c      	b.n	80017c0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <HAL_I2C_Mem_Write+0x42>
 80015ac:	232c      	movs	r3, #44	; 0x2c
 80015ae:	18fb      	adds	r3, r7, r3
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d105      	bne.n	80015c2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0ff      	b.n	80017c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2240      	movs	r2, #64	; 0x40
 80015c6:	5c9b      	ldrb	r3, [r3, r2]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_I2C_Mem_Write+0x5c>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e0f8      	b.n	80017c2 <HAL_I2C_Mem_Write+0x24e>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2240      	movs	r2, #64	; 0x40
 80015d4:	2101      	movs	r1, #1
 80015d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015d8:	f7ff fcd0 	bl	8000f7c <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	0219      	lsls	r1, r3, #8
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2319      	movs	r3, #25
 80015ec:	2201      	movs	r2, #1
 80015ee:	f000 fb0b 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e3      	b.n	80017c2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2241      	movs	r2, #65	; 0x41
 80015fe:	2121      	movs	r1, #33	; 0x21
 8001600:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2242      	movs	r2, #66	; 0x42
 8001606:	2140      	movs	r1, #64	; 0x40
 8001608:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	222c      	movs	r2, #44	; 0x2c
 800161a:	18ba      	adds	r2, r7, r2
 800161c:	8812      	ldrh	r2, [r2, #0]
 800161e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001626:	1dbb      	adds	r3, r7, #6
 8001628:	881c      	ldrh	r4, [r3, #0]
 800162a:	2308      	movs	r3, #8
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	881a      	ldrh	r2, [r3, #0]
 8001630:	230a      	movs	r3, #10
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	8819      	ldrh	r1, [r3, #0]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	0023      	movs	r3, r4
 8001642:	f000 f9f9 	bl	8001a38 <I2C_RequestMemoryWrite>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d005      	beq.n	8001656 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	2100      	movs	r1, #0
 8001650:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0b5      	b.n	80017c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165a:	b29b      	uxth	r3, r3
 800165c:	2bff      	cmp	r3, #255	; 0xff
 800165e:	d911      	bls.n	8001684 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	22ff      	movs	r2, #255	; 0xff
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166a:	b2da      	uxtb	r2, r3
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	045c      	lsls	r4, r3, #17
 8001670:	230a      	movs	r3, #10
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	8819      	ldrh	r1, [r3, #0]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	0023      	movs	r3, r4
 800167e:	f000 fca5 	bl	8001fcc <I2C_TransferConfig>
 8001682:	e012      	b.n	80016aa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001692:	b2da      	uxtb	r2, r3
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	049c      	lsls	r4, r3, #18
 8001698:	230a      	movs	r3, #10
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	8819      	ldrh	r1, [r3, #0]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	2300      	movs	r3, #0
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	0023      	movs	r3, r4
 80016a6:	f000 fc91 	bl	8001fcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f000 fb01 	bl	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 80016b6:	1e03      	subs	r3, r0, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e081      	b.n	80017c2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03a      	beq.n	800176e <HAL_I2C_Mem_Write+0x1fa>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d136      	bne.n	800176e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	0013      	movs	r3, r2
 800170a:	2200      	movs	r2, #0
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	f000 fa7b 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e053      	b.n	80017c2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	2bff      	cmp	r3, #255	; 0xff
 8001722:	d911      	bls.n	8001748 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	22ff      	movs	r2, #255	; 0xff
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	b2da      	uxtb	r2, r3
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	045c      	lsls	r4, r3, #17
 8001734:	230a      	movs	r3, #10
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	8819      	ldrh	r1, [r3, #0]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	0023      	movs	r3, r4
 8001742:	f000 fc43 	bl	8001fcc <I2C_TransferConfig>
 8001746:	e012      	b.n	800176e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	b2da      	uxtb	r2, r3
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	049c      	lsls	r4, r3, #18
 800175c:	230a      	movs	r3, #10
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	8819      	ldrh	r1, [r3, #0]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	0023      	movs	r3, r4
 800176a:	f000 fc2f 	bl	8001fcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29b      	uxth	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d198      	bne.n	80016aa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	0018      	movs	r0, r3
 8001780:	f000 fae0 	bl	8001d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e01a      	b.n	80017c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2220      	movs	r2, #32
 8001792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	490b      	ldr	r1, [pc, #44]	; (80017cc <HAL_I2C_Mem_Write+0x258>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2241      	movs	r2, #65	; 0x41
 80017a8:	2120      	movs	r1, #32
 80017aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2242      	movs	r2, #66	; 0x42
 80017b0:	2100      	movs	r1, #0
 80017b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	2100      	movs	r1, #0
 80017ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
  }
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b007      	add	sp, #28
 80017c8:	bd90      	pop	{r4, r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	fe00e800 	.word	0xfe00e800

080017d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	000c      	movs	r4, r1
 80017da:	0010      	movs	r0, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	230a      	movs	r3, #10
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	1c22      	adds	r2, r4, #0
 80017e4:	801a      	strh	r2, [r3, #0]
 80017e6:	2308      	movs	r3, #8
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	1c02      	adds	r2, r0, #0
 80017ec:	801a      	strh	r2, [r3, #0]
 80017ee:	1dbb      	adds	r3, r7, #6
 80017f0:	1c0a      	adds	r2, r1, #0
 80017f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2241      	movs	r2, #65	; 0x41
 80017f8:	5c9b      	ldrb	r3, [r3, r2]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b20      	cmp	r3, #32
 80017fe:	d000      	beq.n	8001802 <HAL_I2C_Mem_Read+0x32>
 8001800:	e110      	b.n	8001a24 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_I2C_Mem_Read+0x42>
 8001808:	232c      	movs	r3, #44	; 0x2c
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d105      	bne.n	800181e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e103      	b.n	8001a26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	5c9b      	ldrb	r3, [r3, r2]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_I2C_Mem_Read+0x5c>
 8001828:	2302      	movs	r3, #2
 800182a:	e0fc      	b.n	8001a26 <HAL_I2C_Mem_Read+0x256>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	2101      	movs	r1, #1
 8001832:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001834:	f7ff fba2 	bl	8000f7c <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	0219      	lsls	r1, r3, #8
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2319      	movs	r3, #25
 8001848:	2201      	movs	r2, #1
 800184a:	f000 f9dd 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0e7      	b.n	8001a26 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2241      	movs	r2, #65	; 0x41
 800185a:	2122      	movs	r1, #34	; 0x22
 800185c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2242      	movs	r2, #66	; 0x42
 8001862:	2140      	movs	r1, #64	; 0x40
 8001864:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	222c      	movs	r2, #44	; 0x2c
 8001876:	18ba      	adds	r2, r7, r2
 8001878:	8812      	ldrh	r2, [r2, #0]
 800187a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001882:	1dbb      	adds	r3, r7, #6
 8001884:	881c      	ldrh	r4, [r3, #0]
 8001886:	2308      	movs	r3, #8
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	230a      	movs	r3, #10
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	8819      	ldrh	r1, [r3, #0]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	0023      	movs	r3, r4
 800189e:	f000 f92f 	bl	8001b00 <I2C_RequestMemoryRead>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2240      	movs	r2, #64	; 0x40
 80018aa:	2100      	movs	r1, #0
 80018ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0b9      	b.n	8001a26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2bff      	cmp	r3, #255	; 0xff
 80018ba:	d911      	bls.n	80018e0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	22ff      	movs	r2, #255	; 0xff
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	045c      	lsls	r4, r3, #17
 80018cc:	230a      	movs	r3, #10
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	8819      	ldrh	r1, [r3, #0]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <HAL_I2C_Mem_Read+0x260>)
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	0023      	movs	r3, r4
 80018da:	f000 fb77 	bl	8001fcc <I2C_TransferConfig>
 80018de:	e012      	b.n	8001906 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	049c      	lsls	r4, r3, #18
 80018f4:	230a      	movs	r3, #10
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	8819      	ldrh	r1, [r3, #0]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <HAL_I2C_Mem_Read+0x260>)
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	0023      	movs	r3, r4
 8001902:	f000 fb63 	bl	8001fcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	0013      	movs	r3, r2
 8001910:	2200      	movs	r2, #0
 8001912:	2104      	movs	r1, #4
 8001914:	f000 f978 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001918:	1e03      	subs	r3, r0, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e082      	b.n	8001a26 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193c:	3b01      	subs	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001948:	b29b      	uxth	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001956:	b29b      	uxth	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03a      	beq.n	80019d2 <HAL_I2C_Mem_Read+0x202>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001960:	2b00      	cmp	r3, #0
 8001962:	d136      	bne.n	80019d2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	0013      	movs	r3, r2
 800196e:	2200      	movs	r2, #0
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	f000 f949 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e053      	b.n	8001a26 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001982:	b29b      	uxth	r3, r3
 8001984:	2bff      	cmp	r3, #255	; 0xff
 8001986:	d911      	bls.n	80019ac <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	22ff      	movs	r2, #255	; 0xff
 800198c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001992:	b2da      	uxtb	r2, r3
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	045c      	lsls	r4, r3, #17
 8001998:	230a      	movs	r3, #10
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	8819      	ldrh	r1, [r3, #0]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	2300      	movs	r3, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	0023      	movs	r3, r4
 80019a6:	f000 fb11 	bl	8001fcc <I2C_TransferConfig>
 80019aa:	e012      	b.n	80019d2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	049c      	lsls	r4, r3, #18
 80019c0:	230a      	movs	r3, #10
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	8819      	ldrh	r1, [r3, #0]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	2300      	movs	r3, #0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	0023      	movs	r3, r4
 80019ce:	f000 fafd 	bl	8001fcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d194      	bne.n	8001906 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f9ae 	bl	8001d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e01a      	b.n	8001a26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2220      	movs	r2, #32
 80019f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	490c      	ldr	r1, [pc, #48]	; (8001a34 <HAL_I2C_Mem_Read+0x264>)
 8001a04:	400a      	ands	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2241      	movs	r2, #65	; 0x41
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2242      	movs	r2, #66	; 0x42
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001a24:	2302      	movs	r3, #2
  }
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b007      	add	sp, #28
 8001a2c:	bd90      	pop	{r4, r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	80002400 	.word	0x80002400
 8001a34:	fe00e800 	.word	0xfe00e800

08001a38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a38:	b5b0      	push	{r4, r5, r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	000c      	movs	r4, r1
 8001a42:	0010      	movs	r0, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	250a      	movs	r5, #10
 8001a48:	197b      	adds	r3, r7, r5
 8001a4a:	1c22      	adds	r2, r4, #0
 8001a4c:	801a      	strh	r2, [r3, #0]
 8001a4e:	2308      	movs	r3, #8
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	1c02      	adds	r2, r0, #0
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	1dbb      	adds	r3, r7, #6
 8001a58:	1c0a      	adds	r2, r1, #0
 8001a5a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a5c:	1dbb      	adds	r3, r7, #6
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	045c      	lsls	r4, r3, #17
 8001a66:	197b      	adds	r3, r7, r5
 8001a68:	8819      	ldrh	r1, [r3, #0]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <I2C_RequestMemoryWrite+0xc4>)
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	0023      	movs	r3, r4
 8001a72:	f000 faab 	bl	8001fcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a78:	6a39      	ldr	r1, [r7, #32]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 f91b 	bl	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d001      	beq.n	8001a8a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e033      	b.n	8001af2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a8a:	1dbb      	adds	r3, r7, #6
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a92:	2308      	movs	r3, #8
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8001aa0:	e019      	b.n	8001ad6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	6a39      	ldr	r1, [r7, #32]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 f8fc 	bl	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d001      	beq.n	8001ac8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e014      	b.n	8001af2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac8:	2308      	movs	r3, #8
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad6:	6a3a      	ldr	r2, [r7, #32]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	0013      	movs	r3, r2
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	f000 f890 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d001      	beq.n	8001af0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b004      	add	sp, #16
 8001af8:	bdb0      	pop	{r4, r5, r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	80002000 	.word	0x80002000

08001b00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	000c      	movs	r4, r1
 8001b0a:	0010      	movs	r0, r2
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	250a      	movs	r5, #10
 8001b10:	197b      	adds	r3, r7, r5
 8001b12:	1c22      	adds	r2, r4, #0
 8001b14:	801a      	strh	r2, [r3, #0]
 8001b16:	2308      	movs	r3, #8
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	1c02      	adds	r2, r0, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	1dbb      	adds	r3, r7, #6
 8001b20:	1c0a      	adds	r2, r1, #0
 8001b22:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b24:	1dbb      	adds	r3, r7, #6
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	197b      	adds	r3, r7, r5
 8001b2c:	8819      	ldrh	r1, [r3, #0]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <I2C_RequestMemoryRead+0xc0>)
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	f000 fa49 	bl	8001fcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3c:	6a39      	ldr	r1, [r7, #32]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 f8b9 	bl	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d001      	beq.n	8001b4e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e033      	b.n	8001bb6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b4e:	1dbb      	adds	r3, r7, #6
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b56:	2308      	movs	r3, #8
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
 8001b64:	e019      	b.n	8001b9a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b66:	2308      	movs	r3, #8
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7a:	6a39      	ldr	r1, [r7, #32]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 f89a 	bl	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b84:	1e03      	subs	r3, r0, #0
 8001b86:	d001      	beq.n	8001b8c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e014      	b.n	8001bb6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b9a:	6a3a      	ldr	r2, [r7, #32]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2140      	movs	r1, #64	; 0x40
 8001ba8:	f000 f82e 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d001      	beq.n	8001bb4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	80002000 	.word	0x80002000

08001bc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d103      	bne.n	8001be2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2201      	movs	r2, #1
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d007      	beq.n	8001c00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	619a      	str	r2, [r3, #24]
  }
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	1dfb      	adds	r3, r7, #7
 8001c16:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c18:	e03a      	b.n	8001c90 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	6839      	ldr	r1, [r7, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f000 f8d3 	bl	8001dcc <I2C_IsErrorOccurred>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e040      	b.n	8001cb0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	d02d      	beq.n	8001c90 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c34:	f7ff f9a2 	bl	8000f7c <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d302      	bcc.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x42>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d122      	bne.n	8001c90 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	4013      	ands	r3, r2
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	425a      	negs	r2, r3
 8001c5a:	4153      	adcs	r3, r2
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	001a      	movs	r2, r3
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d113      	bne.n	8001c90 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2241      	movs	r2, #65	; 0x41
 8001c78:	2120      	movs	r1, #32
 8001c7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2242      	movs	r2, #66	; 0x42
 8001c80:	2100      	movs	r1, #0
 8001c82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	2100      	movs	r1, #0
 8001c8a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e00f      	b.n	8001cb0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	425a      	negs	r2, r3
 8001ca0:	4153      	adcs	r3, r2
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d0b5      	beq.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b004      	add	sp, #16
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cc4:	e032      	b.n	8001d2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 f87d 	bl	8001dcc <I2C_IsErrorOccurred>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e030      	b.n	8001d3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	d025      	beq.n	8001d2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce0:	f7ff f94c 	bl	8000f7c <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d302      	bcc.n	8001cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d11a      	bne.n	8001d2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d013      	beq.n	8001d2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	2220      	movs	r2, #32
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2241      	movs	r2, #65	; 0x41
 8001d14:	2120      	movs	r1, #32
 8001d16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2242      	movs	r2, #66	; 0x42
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	2100      	movs	r1, #0
 8001d26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e007      	b.n	8001d3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2202      	movs	r2, #2
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d1c5      	bne.n	8001cc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b004      	add	sp, #16
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d50:	e02f      	b.n	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 f837 	bl	8001dcc <I2C_IsErrorOccurred>
 8001d5e:	1e03      	subs	r3, r0, #0
 8001d60:	d001      	beq.n	8001d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e02d      	b.n	8001dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d66:	f7ff f909 	bl	8000f7c <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d302      	bcc.n	8001d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d11a      	bne.n	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2220      	movs	r2, #32
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d013      	beq.n	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	2220      	movs	r2, #32
 8001d90:	431a      	orrs	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2241      	movs	r2, #65	; 0x41
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2242      	movs	r2, #66	; 0x42
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2240      	movs	r2, #64	; 0x40
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e007      	b.n	8001dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2220      	movs	r2, #32
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d1c8      	bne.n	8001d52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b08b      	sub	sp, #44	; 0x2c
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd8:	2327      	movs	r3, #39	; 0x27
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2210      	movs	r2, #16
 8001df4:	4013      	ands	r3, r2
 8001df6:	d100      	bne.n	8001dfa <I2C_IsErrorOccurred+0x2e>
 8001df8:	e082      	b.n	8001f00 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2210      	movs	r2, #16
 8001e00:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e02:	e060      	b.n	8001ec6 <I2C_IsErrorOccurred+0xfa>
 8001e04:	2427      	movs	r4, #39	; 0x27
 8001e06:	193b      	adds	r3, r7, r4
 8001e08:	193a      	adds	r2, r7, r4
 8001e0a:	7812      	ldrb	r2, [r2, #0]
 8001e0c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3301      	adds	r3, #1
 8001e12:	d058      	beq.n	8001ec6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e14:	f7ff f8b2 	bl	8000f7c <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d306      	bcc.n	8001e32 <I2C_IsErrorOccurred+0x66>
 8001e24:	193b      	adds	r3, r7, r4
 8001e26:	193a      	adds	r2, r7, r4
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d149      	bne.n	8001ec6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	01db      	lsls	r3, r3, #7
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e40:	2013      	movs	r0, #19
 8001e42:	183b      	adds	r3, r7, r0
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	2142      	movs	r1, #66	; 0x42
 8001e48:	5c52      	ldrb	r2, [r2, r1]
 8001e4a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	401a      	ands	r2, r3
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d126      	bne.n	8001eae <I2C_IsErrorOccurred+0xe2>
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	01db      	lsls	r3, r3, #7
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d021      	beq.n	8001eae <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001e6a:	183b      	adds	r3, r7, r0
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d01d      	beq.n	8001eae <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	01c9      	lsls	r1, r1, #7
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e84:	f7ff f87a 	bl	8000f7c <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e8c:	e00f      	b.n	8001eae <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e8e:	f7ff f875 	bl	8000f7c <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b19      	cmp	r3, #25
 8001e9a:	d908      	bls.n	8001eae <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ea4:	2327      	movs	r3, #39	; 0x27
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]

              break;
 8001eac:	e00b      	b.n	8001ec6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2127      	movs	r1, #39	; 0x27
 8001eba:	187a      	adds	r2, r7, r1
 8001ebc:	1879      	adds	r1, r7, r1
 8001ebe:	7809      	ldrb	r1, [r1, #0]
 8001ec0:	7011      	strb	r1, [r2, #0]
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d1e3      	bne.n	8001e8e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d004      	beq.n	8001ede <I2C_IsErrorOccurred+0x112>
 8001ed4:	2327      	movs	r3, #39	; 0x27
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d092      	beq.n	8001e04 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ede:	2327      	movs	r3, #39	; 0x27
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d103      	bne.n	8001ef0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2220      	movs	r2, #32
 8001eee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ef8:	2327      	movs	r3, #39	; 0x27
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d00c      	beq.n	8001f2c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4313      	orrs	r3, r2
 8001f18:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	0052      	lsls	r2, r2, #1
 8001f22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f24:	2327      	movs	r3, #39	; 0x27
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4013      	ands	r3, r2
 8001f34:	d00c      	beq.n	8001f50 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	2208      	movs	r2, #8
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2280      	movs	r2, #128	; 0x80
 8001f44:	00d2      	lsls	r2, r2, #3
 8001f46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f48:	2327      	movs	r3, #39	; 0x27
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d00c      	beq.n	8001f74 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	0092      	lsls	r2, r2, #2
 8001f6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f6c:	2327      	movs	r3, #39	; 0x27
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001f74:	2327      	movs	r3, #39	; 0x27
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01d      	beq.n	8001fba <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff fe1f 	bl	8001bc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	490d      	ldr	r1, [pc, #52]	; (8001fc8 <I2C_IsErrorOccurred+0x1fc>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2241      	movs	r2, #65	; 0x41
 8001fa6:	2120      	movs	r1, #32
 8001fa8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2242      	movs	r2, #66	; 0x42
 8001fae:	2100      	movs	r1, #0
 8001fb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001fba:	2327      	movs	r3, #39	; 0x27
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	781b      	ldrb	r3, [r3, #0]
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b00b      	add	sp, #44	; 0x2c
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	fe00e800 	.word	0xfe00e800

08001fcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	0008      	movs	r0, r1
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	240a      	movs	r4, #10
 8001fdc:	193b      	adds	r3, r7, r4
 8001fde:	1c02      	adds	r2, r0, #0
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	2009      	movs	r0, #9
 8001fe4:	183b      	adds	r3, r7, r0
 8001fe6:	1c0a      	adds	r2, r1, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fea:	193b      	adds	r3, r7, r4
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	059b      	lsls	r3, r3, #22
 8001ff0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ff2:	183b      	adds	r3, r7, r0
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	0419      	lsls	r1, r3, #16
 8001ff8:	23ff      	movs	r3, #255	; 0xff
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ffe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	4313      	orrs	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002016:	0d51      	lsrs	r1, r2, #21
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	00d2      	lsls	r2, r2, #3
 800201c:	400a      	ands	r2, r1
 800201e:	4907      	ldr	r1, [pc, #28]	; (800203c <I2C_TransferConfig+0x70>)
 8002020:	430a      	orrs	r2, r1
 8002022:	43d2      	mvns	r2, r2
 8002024:	401a      	ands	r2, r3
 8002026:	0011      	movs	r1, r2
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	b007      	add	sp, #28
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	03ff63ff 	.word	0x03ff63ff

08002040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2241      	movs	r2, #65	; 0x41
 800204e:	5c9b      	ldrb	r3, [r3, r2]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b20      	cmp	r3, #32
 8002054:	d138      	bne.n	80020c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2240      	movs	r2, #64	; 0x40
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002060:	2302      	movs	r3, #2
 8002062:	e032      	b.n	80020ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	2101      	movs	r1, #1
 800206a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2241      	movs	r2, #65	; 0x41
 8002070:	2124      	movs	r1, #36	; 0x24
 8002072:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2101      	movs	r1, #1
 8002080:	438a      	bics	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4911      	ldr	r1, [pc, #68]	; (80020d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2241      	movs	r2, #65	; 0x41
 80020b8:	2120      	movs	r1, #32
 80020ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e000      	b.n	80020ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
  }
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b002      	add	sp, #8
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	ffffefff 	.word	0xffffefff

080020d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2241      	movs	r2, #65	; 0x41
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d139      	bne.n	8002162 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2240      	movs	r2, #64	; 0x40
 80020f2:	5c9b      	ldrb	r3, [r3, r2]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e033      	b.n	8002164 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2240      	movs	r2, #64	; 0x40
 8002100:	2101      	movs	r1, #1
 8002102:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2241      	movs	r2, #65	; 0x41
 8002108:	2124      	movs	r1, #36	; 0x24
 800210a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	438a      	bics	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2241      	movs	r2, #65	; 0x41
 8002152:	2120      	movs	r1, #32
 8002154:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2240      	movs	r2, #64	; 0x40
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
  }
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b004      	add	sp, #16
 800216a:	bd80      	pop	{r7, pc}
 800216c:	fffff0ff 	.word	0xfffff0ff

08002170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800217e:	4013      	ands	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d11f      	bne.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	0013      	movs	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	189b      	adds	r3, r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4912      	ldr	r1, [pc, #72]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021a2:	0018      	movs	r0, r3
 80021a4:	f7fd ffc0 	bl	8000128 <__udivsi3>
 80021a8:	0003      	movs	r3, r0
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ae:	e008      	b.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e001      	b.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e009      	b.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	401a      	ands	r2, r3
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d0ed      	beq.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b004      	add	sp, #16
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	40007000 	.word	0x40007000
 80021e4:	fffff9ff 	.word	0xfffff9ff
 80021e8:	20000000 	.word	0x20000000
 80021ec:	000f4240 	.word	0x000f4240

080021f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <LL_RCC_GetAPB1Prescaler+0x14>)
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	23e0      	movs	r3, #224	; 0xe0
 80021fa:	01db      	lsls	r3, r3, #7
 80021fc:	4013      	ands	r3, r2
}
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e2fe      	b.n	8002818 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_RCC_OscConfig+0x1e>
 8002224:	e07c      	b.n	8002320 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	4bc3      	ldr	r3, [pc, #780]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2238      	movs	r2, #56	; 0x38
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002230:	4bc0      	ldr	r3, [pc, #768]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2203      	movs	r2, #3
 8002236:	4013      	ands	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b10      	cmp	r3, #16
 800223e:	d102      	bne.n	8002246 <HAL_RCC_OscConfig+0x3e>
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d002      	beq.n	800224c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d10b      	bne.n	8002264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	4bb9      	ldr	r3, [pc, #740]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	029b      	lsls	r3, r3, #10
 8002254:	4013      	ands	r3, r2
 8002256:	d062      	beq.n	800231e <HAL_RCC_OscConfig+0x116>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d15e      	bne.n	800231e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e2d9      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	025b      	lsls	r3, r3, #9
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x78>
 8002270:	4bb0      	ldr	r3, [pc, #704]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4baf      	ldr	r3, [pc, #700]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	0249      	lsls	r1, r1, #9
 800227a:	430a      	orrs	r2, r1
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e020      	b.n	80022c2 <HAL_RCC_OscConfig+0xba>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	23a0      	movs	r3, #160	; 0xa0
 8002286:	02db      	lsls	r3, r3, #11
 8002288:	429a      	cmp	r2, r3
 800228a:	d10e      	bne.n	80022aa <HAL_RCC_OscConfig+0xa2>
 800228c:	4ba9      	ldr	r3, [pc, #676]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4ba8      	ldr	r3, [pc, #672]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	02c9      	lsls	r1, r1, #11
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	4ba6      	ldr	r3, [pc, #664]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4ba5      	ldr	r3, [pc, #660]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0249      	lsls	r1, r1, #9
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e00b      	b.n	80022c2 <HAL_RCC_OscConfig+0xba>
 80022aa:	4ba2      	ldr	r3, [pc, #648]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4ba1      	ldr	r3, [pc, #644]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80022b0:	49a1      	ldr	r1, [pc, #644]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	4b9f      	ldr	r3, [pc, #636]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b9e      	ldr	r3, [pc, #632]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	499f      	ldr	r1, [pc, #636]	; (800253c <HAL_RCC_OscConfig+0x334>)
 80022be:	400a      	ands	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d014      	beq.n	80022f4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe fe57 	bl	8000f7c <HAL_GetTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7fe fe52 	bl	8000f7c <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e298      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	4b93      	ldr	r3, [pc, #588]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	029b      	lsls	r3, r3, #10
 80022ee:	4013      	ands	r3, r2
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0xcc>
 80022f2:	e015      	b.n	8002320 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fe42 	bl	8000f7c <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fe:	f7fe fe3d 	bl	8000f7c <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b64      	cmp	r3, #100	; 0x64
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e283      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002310:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	029b      	lsls	r3, r3, #10
 8002318:	4013      	ands	r3, r2
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0xf6>
 800231c:	e000      	b.n	8002320 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	d100      	bne.n	800232c <HAL_RCC_OscConfig+0x124>
 800232a:	e099      	b.n	8002460 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232c:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2238      	movs	r2, #56	; 0x38
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002336:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2203      	movs	r2, #3
 800233c:	4013      	ands	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b10      	cmp	r3, #16
 8002344:	d102      	bne.n	800234c <HAL_RCC_OscConfig+0x144>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d002      	beq.n	8002352 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d135      	bne.n	80023be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002352:	4b78      	ldr	r3, [pc, #480]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4013      	ands	r3, r2
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x162>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e256      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b72      	ldr	r3, [pc, #456]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a74      	ldr	r2, [pc, #464]	; (8002540 <HAL_RCC_OscConfig+0x338>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	021a      	lsls	r2, r3, #8
 800237a:	4b6e      	ldr	r3, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d112      	bne.n	80023ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002386:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x33c>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800239a:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	2207      	movs	r2, #7
 80023a2:	4013      	ands	r3, r2
 80023a4:	4a68      	ldr	r2, [pc, #416]	; (8002548 <HAL_RCC_OscConfig+0x340>)
 80023a6:	40da      	lsrs	r2, r3
 80023a8:	4b68      	ldr	r3, [pc, #416]	; (800254c <HAL_RCC_OscConfig+0x344>)
 80023aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x348>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7fe fd87 	bl	8000ec4 <HAL_InitTick>
 80023b6:	1e03      	subs	r3, r0, #0
 80023b8:	d051      	beq.n	800245e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e22c      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d030      	beq.n	8002428 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023c6:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a5e      	ldr	r2, [pc, #376]	; (8002544 <HAL_RCC_OscConfig+0x33c>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80023da:	4b56      	ldr	r3, [pc, #344]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b55      	ldr	r3, [pc, #340]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	0049      	lsls	r1, r1, #1
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fdc8 	bl	8000f7c <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f2:	f7fe fdc3 	bl	8000f7c <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e209      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002404:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4013      	ands	r3, r2
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b48      	ldr	r3, [pc, #288]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <HAL_RCC_OscConfig+0x338>)
 8002416:	4013      	ands	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	021a      	lsls	r2, r3, #8
 8002420:	4b44      	ldr	r3, [pc, #272]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	e01b      	b.n	8002460 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002428:	4b42      	ldr	r3, [pc, #264]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800242e:	4949      	ldr	r1, [pc, #292]	; (8002554 <HAL_RCC_OscConfig+0x34c>)
 8002430:	400a      	ands	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fda2 	bl	8000f7c <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe fd9d 	bl	8000f7c <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1e3      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002450:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4013      	ands	r3, r2
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0x236>
 800245c:	e000      	b.n	8002460 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2208      	movs	r2, #8
 8002466:	4013      	ands	r3, r2
 8002468:	d047      	beq.n	80024fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800246a:	4b32      	ldr	r3, [pc, #200]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2238      	movs	r2, #56	; 0x38
 8002470:	4013      	ands	r3, r2
 8002472:	2b18      	cmp	r3, #24
 8002474:	d10a      	bne.n	800248c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002476:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d03c      	beq.n	80024fa <HAL_RCC_OscConfig+0x2f2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d138      	bne.n	80024fa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e1c5      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d019      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002496:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800249a:	2101      	movs	r1, #1
 800249c:	430a      	orrs	r2, r1
 800249e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd6c 	bl	8000f7c <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024aa:	f7fe fd67 	bl	8000f7c <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1ad      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	2202      	movs	r2, #2
 80024c2:	4013      	ands	r3, r2
 80024c4:	d0f1      	beq.n	80024aa <HAL_RCC_OscConfig+0x2a2>
 80024c6:	e018      	b.n	80024fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	2101      	movs	r1, #1
 80024d0:	438a      	bics	r2, r1
 80024d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fd52 	bl	8000f7c <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024de:	f7fe fd4d 	bl	8000f7c <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e193      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f4:	2202      	movs	r2, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d1f1      	bne.n	80024de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	d100      	bne.n	8002506 <HAL_RCC_OscConfig+0x2fe>
 8002504:	e0c6      	b.n	8002694 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	231f      	movs	r3, #31
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2238      	movs	r2, #56	; 0x38
 8002514:	4013      	ands	r3, r2
 8002516:	2b20      	cmp	r3, #32
 8002518:	d11e      	bne.n	8002558 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_OscConfig+0x32c>)
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d100      	bne.n	8002526 <HAL_RCC_OscConfig+0x31e>
 8002524:	e0b6      	b.n	8002694 <HAL_RCC_OscConfig+0x48c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d000      	beq.n	8002530 <HAL_RCC_OscConfig+0x328>
 800252e:	e0b1      	b.n	8002694 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e171      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
 8002534:	40021000 	.word	0x40021000
 8002538:	fffeffff 	.word	0xfffeffff
 800253c:	fffbffff 	.word	0xfffbffff
 8002540:	ffff80ff 	.word	0xffff80ff
 8002544:	ffffc7ff 	.word	0xffffc7ff
 8002548:	00f42400 	.word	0x00f42400
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004
 8002554:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002558:	4bb1      	ldr	r3, [pc, #708]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800255a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	055b      	lsls	r3, r3, #21
 8002560:	4013      	ands	r3, r2
 8002562:	d101      	bne.n	8002568 <HAL_RCC_OscConfig+0x360>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x362>
 8002568:	2300      	movs	r3, #0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d011      	beq.n	8002592 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4bac      	ldr	r3, [pc, #688]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002572:	4bab      	ldr	r3, [pc, #684]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002574:	2180      	movs	r1, #128	; 0x80
 8002576:	0549      	lsls	r1, r1, #21
 8002578:	430a      	orrs	r2, r1
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c
 800257c:	4ba8      	ldr	r3, [pc, #672]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800257e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	055b      	lsls	r3, r3, #21
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800258a:	231f      	movs	r3, #31
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002592:	4ba4      	ldr	r3, [pc, #656]	; (8002824 <HAL_RCC_OscConfig+0x61c>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d11a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800259e:	4ba1      	ldr	r3, [pc, #644]	; (8002824 <HAL_RCC_OscConfig+0x61c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4ba0      	ldr	r3, [pc, #640]	; (8002824 <HAL_RCC_OscConfig+0x61c>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0049      	lsls	r1, r1, #1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fce6 	bl	8000f7c <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe fce1 	bl	8000f7c <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e127      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c8:	4b96      	ldr	r3, [pc, #600]	; (8002824 <HAL_RCC_OscConfig+0x61c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x3e2>
 80025dc:	4b90      	ldr	r3, [pc, #576]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80025de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025e0:	4b8f      	ldr	r3, [pc, #572]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	430a      	orrs	r2, r1
 80025e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80025e8:	e01c      	b.n	8002624 <HAL_RCC_OscConfig+0x41c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x404>
 80025f2:	4b8b      	ldr	r3, [pc, #556]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80025f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025f6:	4b8a      	ldr	r3, [pc, #552]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80025f8:	2104      	movs	r1, #4
 80025fa:	430a      	orrs	r2, r1
 80025fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80025fe:	4b88      	ldr	r3, [pc, #544]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002600:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002602:	4b87      	ldr	r3, [pc, #540]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002604:	2101      	movs	r1, #1
 8002606:	430a      	orrs	r2, r1
 8002608:	65da      	str	r2, [r3, #92]	; 0x5c
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0x41c>
 800260c:	4b84      	ldr	r3, [pc, #528]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800260e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002610:	4b83      	ldr	r3, [pc, #524]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002612:	2101      	movs	r1, #1
 8002614:	438a      	bics	r2, r1
 8002616:	65da      	str	r2, [r3, #92]	; 0x5c
 8002618:	4b81      	ldr	r3, [pc, #516]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800261a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800261c:	4b80      	ldr	r3, [pc, #512]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800261e:	2104      	movs	r1, #4
 8002620:	438a      	bics	r2, r1
 8002622:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d014      	beq.n	8002656 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fca6 	bl	8000f7c <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002634:	e009      	b.n	800264a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe fca1 	bl	8000f7c <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	4a79      	ldr	r2, [pc, #484]	; (8002828 <HAL_RCC_OscConfig+0x620>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0e6      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264a:	4b75      	ldr	r3, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x42e>
 8002654:	e013      	b.n	800267e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fc91 	bl	8000f7c <HAL_GetTick>
 800265a:	0003      	movs	r3, r0
 800265c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800265e:	e009      	b.n	8002674 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002660:	f7fe fc8c 	bl	8000f7c <HAL_GetTick>
 8002664:	0002      	movs	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	4a6f      	ldr	r2, [pc, #444]	; (8002828 <HAL_RCC_OscConfig+0x620>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0d1      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002674:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	2202      	movs	r2, #2
 800267a:	4013      	ands	r3, r2
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800267e:	231f      	movs	r3, #31
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002688:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800268a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800268c:	4b64      	ldr	r3, [pc, #400]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800268e:	4967      	ldr	r1, [pc, #412]	; (800282c <HAL_RCC_OscConfig+0x624>)
 8002690:	400a      	ands	r2, r1
 8002692:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d100      	bne.n	800269e <HAL_RCC_OscConfig+0x496>
 800269c:	e0bb      	b.n	8002816 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269e:	4b60      	ldr	r3, [pc, #384]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2238      	movs	r2, #56	; 0x38
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d100      	bne.n	80026ac <HAL_RCC_OscConfig+0x4a4>
 80026aa:	e07b      	b.n	80027a4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d156      	bne.n	8002762 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b4:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80026ba:	495d      	ldr	r1, [pc, #372]	; (8002830 <HAL_RCC_OscConfig+0x628>)
 80026bc:	400a      	ands	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fc5c 	bl	8000f7c <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ca:	f7fe fc57 	bl	8000f7c <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e09d      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	049b      	lsls	r3, r3, #18
 80026e4:	4013      	ands	r3, r2
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e8:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a51      	ldr	r2, [pc, #324]	; (8002834 <HAL_RCC_OscConfig+0x62c>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002714:	431a      	orrs	r2, r3
 8002716:	4b42      	ldr	r3, [pc, #264]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271c:	4b40      	ldr	r3, [pc, #256]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	0449      	lsls	r1, r1, #17
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	4b3c      	ldr	r3, [pc, #240]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	0549      	lsls	r1, r1, #21
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fc20 	bl	8000f7c <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002742:	f7fe fc1b 	bl	8000f7c <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e061      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002754:	4b32      	ldr	r3, [pc, #200]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	049b      	lsls	r3, r3, #18
 800275c:	4013      	ands	r3, r2
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x53a>
 8002760:	e059      	b.n	8002816 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002768:	4931      	ldr	r1, [pc, #196]	; (8002830 <HAL_RCC_OscConfig+0x628>)
 800276a:	400a      	ands	r2, r1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fc05 	bl	8000f7c <HAL_GetTick>
 8002772:	0003      	movs	r3, r0
 8002774:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7fe fc00 	bl	8000f7c <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e046      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278a:	4b25      	ldr	r3, [pc, #148]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	049b      	lsls	r3, r3, #18
 8002792:	4013      	ands	r3, r2
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 800279c:	4926      	ldr	r1, [pc, #152]	; (8002838 <HAL_RCC_OscConfig+0x630>)
 800279e:	400a      	ands	r2, r1
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	e038      	b.n	8002816 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e033      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x618>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2203      	movs	r2, #3
 80027ba:	401a      	ands	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d126      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2270      	movs	r2, #112	; 0x70
 80027c8:	401a      	ands	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d11f      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	23fe      	movs	r3, #254	; 0xfe
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	401a      	ands	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d116      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	23f8      	movs	r3, #248	; 0xf8
 80027e8:	039b      	lsls	r3, r3, #14
 80027ea:	401a      	ands	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d10e      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	23e0      	movs	r3, #224	; 0xe0
 80027f8:	051b      	lsls	r3, r3, #20
 80027fa:	401a      	ands	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	0f5b      	lsrs	r3, r3, #29
 8002808:	075a      	lsls	r2, r3, #29
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b008      	add	sp, #32
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
 8002828:	00001388 	.word	0x00001388
 800282c:	efffffff 	.word	0xefffffff
 8002830:	feffffff 	.word	0xfeffffff
 8002834:	11c1808c 	.word	0x11c1808c
 8002838:	eefefffc 	.word	0xeefefffc

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0e9      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2207      	movs	r2, #7
 8002856:	4013      	ands	r3, r2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d91e      	bls.n	800289c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b73      	ldr	r3, [pc, #460]	; (8002a2c <HAL_RCC_ClockConfig+0x1f0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2207      	movs	r2, #7
 8002864:	4393      	bics	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002870:	f7fe fb84 	bl	8000f7c <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002878:	e009      	b.n	800288e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287a:	f7fe fb7f 	bl	8000f7c <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	4a6a      	ldr	r2, [pc, #424]	; (8002a30 <HAL_RCC_ClockConfig+0x1f4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e0ca      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800288e:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2207      	movs	r2, #7
 8002894:	4013      	ands	r3, r2
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d1ee      	bne.n	800287a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2202      	movs	r2, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d015      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	d006      	beq.n	80028be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028b0:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	4b5f      	ldr	r3, [pc, #380]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 80028b6:	21e0      	movs	r1, #224	; 0xe0
 80028b8:	01c9      	lsls	r1, r1, #7
 80028ba:	430a      	orrs	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4a5d      	ldr	r2, [pc, #372]	; (8002a38 <HAL_RCC_ClockConfig+0x1fc>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b59      	ldr	r3, [pc, #356]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	d057      	beq.n	800298c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e4:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	029b      	lsls	r3, r3, #10
 80028ec:	4013      	ands	r3, r2
 80028ee:	d12b      	bne.n	8002948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e097      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d107      	bne.n	800290c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fc:	4b4d      	ldr	r3, [pc, #308]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	049b      	lsls	r3, r3, #18
 8002904:	4013      	ands	r3, r2
 8002906:	d11f      	bne.n	8002948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e08b      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d107      	bne.n	8002924 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002914:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4013      	ands	r3, r2
 800291e:	d113      	bne.n	8002948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e07f      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d106      	bne.n	800293a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800292c:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002930:	2202      	movs	r2, #2
 8002932:	4013      	ands	r3, r2
 8002934:	d108      	bne.n	8002948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e074      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293a:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 800293c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e06d      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2207      	movs	r2, #7
 800294e:	4393      	bics	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 8002958:	430a      	orrs	r2, r1
 800295a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295c:	f7fe fb0e 	bl	8000f7c <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002964:	e009      	b.n	800297a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002966:	f7fe fb09 	bl	8000f7c <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <HAL_RCC_ClockConfig+0x1f4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e054      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2238      	movs	r2, #56	; 0x38
 8002980:	401a      	ands	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	429a      	cmp	r2, r3
 800298a:	d1ec      	bne.n	8002966 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <HAL_RCC_ClockConfig+0x1f0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2207      	movs	r2, #7
 8002992:	4013      	ands	r3, r2
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d21e      	bcs.n	80029d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2207      	movs	r2, #7
 80029a0:	4393      	bics	r3, r2
 80029a2:	0019      	movs	r1, r3
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCC_ClockConfig+0x1f0>)
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029ac:	f7fe fae6 	bl	8000f7c <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029b4:	e009      	b.n	80029ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b6:	f7fe fae1 	bl	8000f7c <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_RCC_ClockConfig+0x1f4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e02c      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2207      	movs	r2, #7
 80029d0:	4013      	ands	r3, r2
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d1ee      	bne.n	80029b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	4013      	ands	r3, r2
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <HAL_RCC_ClockConfig+0x200>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029f6:	f000 f829 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80029fa:	0001      	movs	r1, r0
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	220f      	movs	r2, #15
 8002a04:	401a      	ands	r2, r3
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <HAL_RCC_ClockConfig+0x204>)
 8002a08:	0092      	lsls	r2, r2, #2
 8002a0a:	58d3      	ldr	r3, [r2, r3]
 8002a0c:	221f      	movs	r2, #31
 8002a0e:	4013      	ands	r3, r2
 8002a10:	000a      	movs	r2, r1
 8002a12:	40da      	lsrs	r2, r3
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_ClockConfig+0x208>)
 8002a16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_ClockConfig+0x20c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fe fa51 	bl	8000ec4 <HAL_InitTick>
 8002a22:	0003      	movs	r3, r0
}
 8002a24:	0018      	movs	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b004      	add	sp, #16
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	00001388 	.word	0x00001388
 8002a34:	40021000 	.word	0x40021000
 8002a38:	fffff0ff 	.word	0xfffff0ff
 8002a3c:	ffff8fff 	.word	0xffff8fff
 8002a40:	080046e0 	.word	0x080046e0
 8002a44:	20000000 	.word	0x20000000
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a52:	4b3c      	ldr	r3, [pc, #240]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2238      	movs	r2, #56	; 0x38
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d10f      	bne.n	8002a7c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a5c:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0adb      	lsrs	r3, r3, #11
 8002a62:	2207      	movs	r2, #7
 8002a64:	4013      	ands	r3, r2
 8002a66:	2201      	movs	r2, #1
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	0013      	movs	r3, r2
 8002a6c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	4835      	ldr	r0, [pc, #212]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a72:	f7fd fb59 	bl	8000128 <__udivsi3>
 8002a76:	0003      	movs	r3, r0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	e05d      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2238      	movs	r2, #56	; 0x38
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a88:	4b30      	ldr	r3, [pc, #192]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x100>)
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	e054      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2238      	movs	r2, #56	; 0x38
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d138      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	2207      	movs	r2, #7
 8002aac:	4013      	ands	r3, r2
 8002aae:	3301      	adds	r3, #1
 8002ab0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d10d      	bne.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	4824      	ldr	r0, [pc, #144]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x100>)
 8002abc:	f7fd fb34 	bl	8000128 <__udivsi3>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	227f      	movs	r2, #127	; 0x7f
 8002acc:	4013      	ands	r3, r2
 8002ace:	434b      	muls	r3, r1
 8002ad0:	617b      	str	r3, [r7, #20]
        break;
 8002ad2:	e00d      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	481c      	ldr	r0, [pc, #112]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ad8:	f7fd fb26 	bl	8000128 <__udivsi3>
 8002adc:	0003      	movs	r3, r0
 8002ade:	0019      	movs	r1, r3
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	227f      	movs	r2, #127	; 0x7f
 8002ae8:	4013      	ands	r3, r2
 8002aea:	434b      	muls	r3, r1
 8002aec:	617b      	str	r3, [r7, #20]
        break;
 8002aee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0f5b      	lsrs	r3, r3, #29
 8002af6:	2207      	movs	r2, #7
 8002af8:	4013      	ands	r3, r2
 8002afa:	3301      	adds	r3, #1
 8002afc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f7fd fb11 	bl	8000128 <__udivsi3>
 8002b06:	0003      	movs	r3, r0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	e015      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2238      	movs	r2, #56	; 0x38
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d103      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2238      	movs	r2, #56	; 0x38
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b18      	cmp	r3, #24
 8002b2a:	d103      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b2c:	23fa      	movs	r3, #250	; 0xfa
 8002b2e:	01db      	lsls	r3, r3, #7
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	e001      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b38:	693b      	ldr	r3, [r7, #16]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b006      	add	sp, #24
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	40021000 	.word	0x40021000
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	007a1200 	.word	0x007a1200

08002b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b02      	ldr	r3, [pc, #8]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	20000000 	.word	0x20000000

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b68:	f7ff fff2 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b6c:	0004      	movs	r4, r0
 8002b6e:	f7ff fb3f 	bl	80021f0 <LL_RCC_GetAPB1Prescaler>
 8002b72:	0003      	movs	r3, r0
 8002b74:	0b1a      	lsrs	r2, r3, #12
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b78:	0092      	lsls	r2, r2, #2
 8002b7a:	58d3      	ldr	r3, [r2, r3]
 8002b7c:	221f      	movs	r2, #31
 8002b7e:	4013      	ands	r3, r2
 8002b80:	40dc      	lsrs	r4, r3
 8002b82:	0023      	movs	r3, r4
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bdb0      	pop	{r4, r5, r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	08004720 	.word	0x08004720

08002b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b98:	2313      	movs	r3, #19
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ba0:	2312      	movs	r3, #18
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	029b      	lsls	r3, r3, #10
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002bb4:	e0a3      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb6:	2011      	movs	r0, #17
 8002bb8:	183b      	adds	r3, r7, r0
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbe:	4bc3      	ldr	r3, [pc, #780]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	055b      	lsls	r3, r3, #21
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d110      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	4bc0      	ldr	r3, [pc, #768]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bce:	4bbf      	ldr	r3, [pc, #764]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	0549      	lsls	r1, r1, #21
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bd8:	4bbc      	ldr	r3, [pc, #752]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	055b      	lsls	r3, r3, #21
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be6:	183b      	adds	r3, r7, r0
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bec:	4bb8      	ldr	r3, [pc, #736]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4bb7      	ldr	r3, [pc, #732]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	0049      	lsls	r1, r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bfa:	f7fe f9bf 	bl	8000f7c <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c02:	e00b      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c04:	f7fe f9ba 	bl	8000f7c <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d904      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c12:	2313      	movs	r3, #19
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2203      	movs	r2, #3
 8002c18:	701a      	strb	r2, [r3, #0]
        break;
 8002c1a:	e005      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c1c:	4bac      	ldr	r3, [pc, #688]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4013      	ands	r3, r2
 8002c26:	d0ed      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c28:	2313      	movs	r3, #19
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d154      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c32:	4ba6      	ldr	r3, [pc, #664]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c36:	23c0      	movs	r3, #192	; 0xc0
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d019      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d014      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c4e:	4b9f      	ldr	r3, [pc, #636]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	4aa0      	ldr	r2, [pc, #640]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c58:	4b9c      	ldr	r3, [pc, #624]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c5c:	4b9b      	ldr	r3, [pc, #620]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c5e:	2180      	movs	r1, #128	; 0x80
 8002c60:	0249      	lsls	r1, r1, #9
 8002c62:	430a      	orrs	r2, r1
 8002c64:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c66:	4b99      	ldr	r3, [pc, #612]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c6a:	4b98      	ldr	r3, [pc, #608]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c6c:	499a      	ldr	r1, [pc, #616]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002c6e:	400a      	ands	r2, r1
 8002c70:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c72:	4b96      	ldr	r3, [pc, #600]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d016      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe f97c 	bl	8000f7c <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c88:	e00c      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe f977 	bl	8000f7c <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	4a91      	ldr	r2, [pc, #580]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d904      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c9a:	2313      	movs	r3, #19
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	701a      	strb	r2, [r3, #0]
            break;
 8002ca2:	e004      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca4:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	d0ed      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cae:	2313      	movs	r3, #19
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb8:	4b84      	ldr	r3, [pc, #528]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	4a85      	ldr	r2, [pc, #532]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc6:	4b81      	ldr	r3, [pc, #516]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ccc:	e00c      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cce:	2312      	movs	r3, #18
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2213      	movs	r2, #19
 8002cd4:	18ba      	adds	r2, r7, r2
 8002cd6:	7812      	ldrb	r2, [r2, #0]
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e005      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cdc:	2312      	movs	r3, #18
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2213      	movs	r2, #19
 8002ce2:	18ba      	adds	r2, r7, r2
 8002ce4:	7812      	ldrb	r2, [r2, #0]
 8002ce6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce8:	2311      	movs	r3, #17
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d105      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf6:	4b75      	ldr	r3, [pc, #468]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf8:	4979      	ldr	r1, [pc, #484]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2201      	movs	r2, #1
 8002d04:	4013      	ands	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d08:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	4393      	bics	r3, r2
 8002d10:	0019      	movs	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2202      	movs	r2, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	d009      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d26:	4b69      	ldr	r3, [pc, #420]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	4393      	bics	r3, r2
 8002d2e:	0019      	movs	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d36:	430a      	orrs	r2, r1
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2210      	movs	r2, #16
 8002d40:	4013      	ands	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	4a66      	ldr	r2, [pc, #408]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d54:	430a      	orrs	r2, r1
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4013      	ands	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d64:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	4a5f      	ldr	r2, [pc, #380]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4013      	ands	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d84:	4b51      	ldr	r3, [pc, #324]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	4a58      	ldr	r2, [pc, #352]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	4b4e      	ldr	r3, [pc, #312]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da2:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db2:	430a      	orrs	r2, r1
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	01db      	lsls	r3, r3, #7
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d015      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dc2:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	0899      	lsrs	r1, r3, #2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1a      	ldr	r2, [r3, #32]
 8002dce:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	05db      	lsls	r3, r3, #23
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d106      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002de0:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	0249      	lsls	r1, r1, #9
 8002dea:	430a      	orrs	r2, r1
 8002dec:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	031b      	lsls	r3, r3, #12
 8002df6:	4013      	ands	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dfa:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	2240      	movs	r2, #64	; 0x40
 8002e00:	4393      	bics	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	039b      	lsls	r3, r3, #14
 8002e16:	4013      	ands	r3, r2
 8002e18:	d016      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	0019      	movs	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	03db      	lsls	r3, r3, #15
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d106      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	0449      	lsls	r1, r1, #17
 8002e44:	430a      	orrs	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	03db      	lsls	r3, r3, #15
 8002e50:	4013      	ands	r3, r2
 8002e52:	d016      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	4a27      	ldr	r2, [pc, #156]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e64:	430a      	orrs	r2, r1
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	045b      	lsls	r3, r3, #17
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d106      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e74:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7a:	2180      	movs	r1, #128	; 0x80
 8002e7c:	0449      	lsls	r1, r1, #17
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d016      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	4a1a      	ldr	r2, [pc, #104]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	01db      	lsls	r3, r3, #7
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d106      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	0249      	lsls	r1, r1, #9
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ebc:	2312      	movs	r3, #18
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	781b      	ldrb	r3, [r3, #0]
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b006      	add	sp, #24
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	fffffcff 	.word	0xfffffcff
 8002ed8:	fffeffff 	.word	0xfffeffff
 8002edc:	00001388 	.word	0x00001388
 8002ee0:	efffffff 	.word	0xefffffff
 8002ee4:	fffff3ff 	.word	0xfffff3ff
 8002ee8:	fff3ffff 	.word	0xfff3ffff
 8002eec:	ffcfffff 	.word	0xffcfffff
 8002ef0:	ffffcfff 	.word	0xffffcfff
 8002ef4:	ffbfffff 	.word	0xffbfffff
 8002ef8:	feffffff 	.word	0xfeffffff
 8002efc:	ffff3fff 	.word	0xffff3fff

08002f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e046      	b.n	8002fa0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2288      	movs	r2, #136	; 0x88
 8002f16:	589b      	ldr	r3, [r3, r2]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2284      	movs	r2, #132	; 0x84
 8002f20:	2100      	movs	r1, #0
 8002f22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f7fd fece 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2288      	movs	r2, #136	; 0x88
 8002f30:	2124      	movs	r1, #36	; 0x24
 8002f32:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2101      	movs	r1, #1
 8002f40:	438a      	bics	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 fb8e 	bl	8003670 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 f8cc 	bl	80030f4 <UART_SetConfig>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e01c      	b.n	8002fa0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	490d      	ldr	r1, [pc, #52]	; (8002fa8 <HAL_UART_Init+0xa8>)
 8002f72:	400a      	ands	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	212a      	movs	r1, #42	; 0x2a
 8002f82:	438a      	bics	r2, r1
 8002f84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 fc1d 	bl	80037d8 <UART_CheckIdleState>
 8002f9e:	0003      	movs	r3, r0
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	ffffb7ff 	.word	0xffffb7ff

08002fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	1dbb      	adds	r3, r7, #6
 8002fba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2288      	movs	r2, #136	; 0x88
 8002fc0:	589b      	ldr	r3, [r3, r2]
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d000      	beq.n	8002fc8 <HAL_UART_Transmit+0x1c>
 8002fc6:	e090      	b.n	80030ea <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_UART_Transmit+0x2a>
 8002fce:	1dbb      	adds	r3, r7, #6
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e088      	b.n	80030ec <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	015b      	lsls	r3, r3, #5
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d109      	bne.n	8002ffa <HAL_UART_Transmit+0x4e>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d001      	beq.n	8002ffa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e078      	b.n	80030ec <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2290      	movs	r2, #144	; 0x90
 8002ffe:	2100      	movs	r1, #0
 8003000:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2288      	movs	r2, #136	; 0x88
 8003006:	2121      	movs	r1, #33	; 0x21
 8003008:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300a:	f7fd ffb7 	bl	8000f7c <HAL_GetTick>
 800300e:	0003      	movs	r3, r0
 8003010:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1dba      	adds	r2, r7, #6
 8003016:	2154      	movs	r1, #84	; 0x54
 8003018:	8812      	ldrh	r2, [r2, #0]
 800301a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1dba      	adds	r2, r7, #6
 8003020:	2156      	movs	r1, #86	; 0x56
 8003022:	8812      	ldrh	r2, [r2, #0]
 8003024:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	015b      	lsls	r3, r3, #5
 800302e:	429a      	cmp	r2, r3
 8003030:	d108      	bne.n	8003044 <HAL_UART_Transmit+0x98>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e003      	b.n	800304c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800304c:	e030      	b.n	80030b0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	0013      	movs	r3, r2
 8003058:	2200      	movs	r2, #0
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	f000 fc66 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d005      	beq.n	8003070 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2288      	movs	r2, #136	; 0x88
 8003068:	2120      	movs	r1, #32
 800306a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e03d      	b.n	80030ec <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	001a      	movs	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	05d2      	lsls	r2, r2, #23
 8003082:	0dd2      	lsrs	r2, r2, #23
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	3302      	adds	r3, #2
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	e007      	b.n	800309e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	3301      	adds	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2256      	movs	r2, #86	; 0x56
 80030a2:	5a9b      	ldrh	r3, [r3, r2]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b299      	uxth	r1, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2256      	movs	r2, #86	; 0x56
 80030ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2256      	movs	r2, #86	; 0x56
 80030b4:	5a9b      	ldrh	r3, [r3, r2]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1c8      	bne.n	800304e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	0013      	movs	r3, r2
 80030c6:	2200      	movs	r2, #0
 80030c8:	2140      	movs	r1, #64	; 0x40
 80030ca:	f000 fc2f 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d005      	beq.n	80030de <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2288      	movs	r2, #136	; 0x88
 80030d6:	2120      	movs	r1, #32
 80030d8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e006      	b.n	80030ec <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2288      	movs	r2, #136	; 0x88
 80030e2:	2120      	movs	r1, #32
 80030e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b008      	add	sp, #32
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b5b0      	push	{r4, r5, r7, lr}
 80030f6:	b090      	sub	sp, #64	; 0x40
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030fc:	231a      	movs	r3, #26
 80030fe:	2220      	movs	r2, #32
 8003100:	189b      	adds	r3, r3, r2
 8003102:	19db      	adds	r3, r3, r7
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	431a      	orrs	r2, r3
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	431a      	orrs	r2, r3
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	4313      	orrs	r3, r2
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4aaf      	ldr	r2, [pc, #700]	; (80033e4 <UART_SetConfig+0x2f0>)
 8003128:	4013      	ands	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003132:	430b      	orrs	r3, r1
 8003134:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4aaa      	ldr	r2, [pc, #680]	; (80033e8 <UART_SetConfig+0x2f4>)
 800313e:	4013      	ands	r3, r2
 8003140:	0018      	movs	r0, r3
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	68d9      	ldr	r1, [r3, #12]
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	0003      	movs	r3, r0
 800314c:	430b      	orrs	r3, r1
 800314e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4aa4      	ldr	r2, [pc, #656]	; (80033ec <UART_SetConfig+0x2f8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003166:	4313      	orrs	r3, r2
 8003168:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a9f      	ldr	r2, [pc, #636]	; (80033f0 <UART_SetConfig+0x2fc>)
 8003172:	4013      	ands	r3, r2
 8003174:	0019      	movs	r1, r3
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	220f      	movs	r2, #15
 8003188:	4393      	bics	r3, r2
 800318a:	0018      	movs	r0, r3
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	0003      	movs	r3, r0
 8003196:	430b      	orrs	r3, r1
 8003198:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a95      	ldr	r2, [pc, #596]	; (80033f4 <UART_SetConfig+0x300>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d131      	bne.n	8003208 <UART_SetConfig+0x114>
 80031a4:	4b94      	ldr	r3, [pc, #592]	; (80033f8 <UART_SetConfig+0x304>)
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	2203      	movs	r2, #3
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d01d      	beq.n	80031ec <UART_SetConfig+0xf8>
 80031b0:	d823      	bhi.n	80031fa <UART_SetConfig+0x106>
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d00c      	beq.n	80031d0 <UART_SetConfig+0xdc>
 80031b6:	d820      	bhi.n	80031fa <UART_SetConfig+0x106>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <UART_SetConfig+0xce>
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d00e      	beq.n	80031de <UART_SetConfig+0xea>
 80031c0:	e01b      	b.n	80031fa <UART_SetConfig+0x106>
 80031c2:	231b      	movs	r3, #27
 80031c4:	2220      	movs	r2, #32
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	19db      	adds	r3, r3, r7
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e0b4      	b.n	800333a <UART_SetConfig+0x246>
 80031d0:	231b      	movs	r3, #27
 80031d2:	2220      	movs	r2, #32
 80031d4:	189b      	adds	r3, r3, r2
 80031d6:	19db      	adds	r3, r3, r7
 80031d8:	2202      	movs	r2, #2
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e0ad      	b.n	800333a <UART_SetConfig+0x246>
 80031de:	231b      	movs	r3, #27
 80031e0:	2220      	movs	r2, #32
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	19db      	adds	r3, r3, r7
 80031e6:	2204      	movs	r2, #4
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e0a6      	b.n	800333a <UART_SetConfig+0x246>
 80031ec:	231b      	movs	r3, #27
 80031ee:	2220      	movs	r2, #32
 80031f0:	189b      	adds	r3, r3, r2
 80031f2:	19db      	adds	r3, r3, r7
 80031f4:	2208      	movs	r2, #8
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e09f      	b.n	800333a <UART_SetConfig+0x246>
 80031fa:	231b      	movs	r3, #27
 80031fc:	2220      	movs	r2, #32
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	19db      	adds	r3, r3, r7
 8003202:	2210      	movs	r2, #16
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e098      	b.n	800333a <UART_SetConfig+0x246>
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7b      	ldr	r2, [pc, #492]	; (80033fc <UART_SetConfig+0x308>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d131      	bne.n	8003276 <UART_SetConfig+0x182>
 8003212:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <UART_SetConfig+0x304>)
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	220c      	movs	r2, #12
 8003218:	4013      	ands	r3, r2
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d01d      	beq.n	800325a <UART_SetConfig+0x166>
 800321e:	d823      	bhi.n	8003268 <UART_SetConfig+0x174>
 8003220:	2b08      	cmp	r3, #8
 8003222:	d00c      	beq.n	800323e <UART_SetConfig+0x14a>
 8003224:	d820      	bhi.n	8003268 <UART_SetConfig+0x174>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <UART_SetConfig+0x13c>
 800322a:	2b04      	cmp	r3, #4
 800322c:	d00e      	beq.n	800324c <UART_SetConfig+0x158>
 800322e:	e01b      	b.n	8003268 <UART_SetConfig+0x174>
 8003230:	231b      	movs	r3, #27
 8003232:	2220      	movs	r2, #32
 8003234:	189b      	adds	r3, r3, r2
 8003236:	19db      	adds	r3, r3, r7
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e07d      	b.n	800333a <UART_SetConfig+0x246>
 800323e:	231b      	movs	r3, #27
 8003240:	2220      	movs	r2, #32
 8003242:	189b      	adds	r3, r3, r2
 8003244:	19db      	adds	r3, r3, r7
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e076      	b.n	800333a <UART_SetConfig+0x246>
 800324c:	231b      	movs	r3, #27
 800324e:	2220      	movs	r2, #32
 8003250:	189b      	adds	r3, r3, r2
 8003252:	19db      	adds	r3, r3, r7
 8003254:	2204      	movs	r2, #4
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e06f      	b.n	800333a <UART_SetConfig+0x246>
 800325a:	231b      	movs	r3, #27
 800325c:	2220      	movs	r2, #32
 800325e:	189b      	adds	r3, r3, r2
 8003260:	19db      	adds	r3, r3, r7
 8003262:	2208      	movs	r2, #8
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e068      	b.n	800333a <UART_SetConfig+0x246>
 8003268:	231b      	movs	r3, #27
 800326a:	2220      	movs	r2, #32
 800326c:	189b      	adds	r3, r3, r2
 800326e:	19db      	adds	r3, r3, r7
 8003270:	2210      	movs	r2, #16
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e061      	b.n	800333a <UART_SetConfig+0x246>
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a61      	ldr	r2, [pc, #388]	; (8003400 <UART_SetConfig+0x30c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d106      	bne.n	800328e <UART_SetConfig+0x19a>
 8003280:	231b      	movs	r3, #27
 8003282:	2220      	movs	r2, #32
 8003284:	189b      	adds	r3, r3, r2
 8003286:	19db      	adds	r3, r3, r7
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e055      	b.n	800333a <UART_SetConfig+0x246>
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5c      	ldr	r2, [pc, #368]	; (8003404 <UART_SetConfig+0x310>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d106      	bne.n	80032a6 <UART_SetConfig+0x1b2>
 8003298:	231b      	movs	r3, #27
 800329a:	2220      	movs	r2, #32
 800329c:	189b      	adds	r3, r3, r2
 800329e:	19db      	adds	r3, r3, r7
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e049      	b.n	800333a <UART_SetConfig+0x246>
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a50      	ldr	r2, [pc, #320]	; (80033ec <UART_SetConfig+0x2f8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d13e      	bne.n	800332e <UART_SetConfig+0x23a>
 80032b0:	4b51      	ldr	r3, [pc, #324]	; (80033f8 <UART_SetConfig+0x304>)
 80032b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032b4:	23c0      	movs	r3, #192	; 0xc0
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	4013      	ands	r3, r2
 80032ba:	22c0      	movs	r2, #192	; 0xc0
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	4293      	cmp	r3, r2
 80032c0:	d027      	beq.n	8003312 <UART_SetConfig+0x21e>
 80032c2:	22c0      	movs	r2, #192	; 0xc0
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d82a      	bhi.n	8003320 <UART_SetConfig+0x22c>
 80032ca:	2280      	movs	r2, #128	; 0x80
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d011      	beq.n	80032f6 <UART_SetConfig+0x202>
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d822      	bhi.n	8003320 <UART_SetConfig+0x22c>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <UART_SetConfig+0x1f4>
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	00d2      	lsls	r2, r2, #3
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <UART_SetConfig+0x210>
 80032e6:	e01b      	b.n	8003320 <UART_SetConfig+0x22c>
 80032e8:	231b      	movs	r3, #27
 80032ea:	2220      	movs	r2, #32
 80032ec:	189b      	adds	r3, r3, r2
 80032ee:	19db      	adds	r3, r3, r7
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e021      	b.n	800333a <UART_SetConfig+0x246>
 80032f6:	231b      	movs	r3, #27
 80032f8:	2220      	movs	r2, #32
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	19db      	adds	r3, r3, r7
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e01a      	b.n	800333a <UART_SetConfig+0x246>
 8003304:	231b      	movs	r3, #27
 8003306:	2220      	movs	r2, #32
 8003308:	189b      	adds	r3, r3, r2
 800330a:	19db      	adds	r3, r3, r7
 800330c:	2204      	movs	r2, #4
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e013      	b.n	800333a <UART_SetConfig+0x246>
 8003312:	231b      	movs	r3, #27
 8003314:	2220      	movs	r2, #32
 8003316:	189b      	adds	r3, r3, r2
 8003318:	19db      	adds	r3, r3, r7
 800331a:	2208      	movs	r2, #8
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e00c      	b.n	800333a <UART_SetConfig+0x246>
 8003320:	231b      	movs	r3, #27
 8003322:	2220      	movs	r2, #32
 8003324:	189b      	adds	r3, r3, r2
 8003326:	19db      	adds	r3, r3, r7
 8003328:	2210      	movs	r2, #16
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e005      	b.n	800333a <UART_SetConfig+0x246>
 800332e:	231b      	movs	r3, #27
 8003330:	2220      	movs	r2, #32
 8003332:	189b      	adds	r3, r3, r2
 8003334:	19db      	adds	r3, r3, r7
 8003336:	2210      	movs	r2, #16
 8003338:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <UART_SetConfig+0x2f8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d000      	beq.n	8003346 <UART_SetConfig+0x252>
 8003344:	e0a9      	b.n	800349a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003346:	231b      	movs	r3, #27
 8003348:	2220      	movs	r2, #32
 800334a:	189b      	adds	r3, r3, r2
 800334c:	19db      	adds	r3, r3, r7
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d015      	beq.n	8003380 <UART_SetConfig+0x28c>
 8003354:	dc18      	bgt.n	8003388 <UART_SetConfig+0x294>
 8003356:	2b04      	cmp	r3, #4
 8003358:	d00d      	beq.n	8003376 <UART_SetConfig+0x282>
 800335a:	dc15      	bgt.n	8003388 <UART_SetConfig+0x294>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <UART_SetConfig+0x272>
 8003360:	2b02      	cmp	r3, #2
 8003362:	d005      	beq.n	8003370 <UART_SetConfig+0x27c>
 8003364:	e010      	b.n	8003388 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003366:	f7ff fbfd 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 800336a:	0003      	movs	r3, r0
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800336e:	e014      	b.n	800339a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <UART_SetConfig+0x314>)
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003374:	e011      	b.n	800339a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003376:	f7ff fb69 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800337a:	0003      	movs	r3, r0
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800337e:	e00c      	b.n	800339a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003386:	e008      	b.n	800339a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800338c:	231a      	movs	r3, #26
 800338e:	2220      	movs	r2, #32
 8003390:	189b      	adds	r3, r3, r2
 8003392:	19db      	adds	r3, r3, r7
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
        break;
 8003398:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339c:	2b00      	cmp	r3, #0
 800339e:	d100      	bne.n	80033a2 <UART_SetConfig+0x2ae>
 80033a0:	e14b      	b.n	800363a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <UART_SetConfig+0x318>)
 80033a8:	0052      	lsls	r2, r2, #1
 80033aa:	5ad3      	ldrh	r3, [r2, r3]
 80033ac:	0019      	movs	r1, r3
 80033ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033b0:	f7fc feba 	bl	8000128 <__udivsi3>
 80033b4:	0003      	movs	r3, r0
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	0013      	movs	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	189b      	adds	r3, r3, r2
 80033c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d305      	bcc.n	80033d4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d91d      	bls.n	8003410 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80033d4:	231a      	movs	r3, #26
 80033d6:	2220      	movs	r2, #32
 80033d8:	189b      	adds	r3, r3, r2
 80033da:	19db      	adds	r3, r3, r7
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e12b      	b.n	800363a <UART_SetConfig+0x546>
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	cfff69f3 	.word	0xcfff69f3
 80033e8:	ffffcfff 	.word	0xffffcfff
 80033ec:	40008000 	.word	0x40008000
 80033f0:	11fff4ff 	.word	0x11fff4ff
 80033f4:	40013800 	.word	0x40013800
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40004400 	.word	0x40004400
 8003400:	40004800 	.word	0x40004800
 8003404:	40004c00 	.word	0x40004c00
 8003408:	00f42400 	.word	0x00f42400
 800340c:	08004740 	.word	0x08004740
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800341c:	4b92      	ldr	r3, [pc, #584]	; (8003668 <UART_SetConfig+0x574>)
 800341e:	0052      	lsls	r2, r2, #1
 8003420:	5ad3      	ldrh	r3, [r2, r3]
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	69b8      	ldr	r0, [r7, #24]
 800342e:	69f9      	ldr	r1, [r7, #28]
 8003430:	f7fc fff0 	bl	8000414 <__aeabi_uldivmod>
 8003434:	0002      	movs	r2, r0
 8003436:	000b      	movs	r3, r1
 8003438:	0e11      	lsrs	r1, r2, #24
 800343a:	021d      	lsls	r5, r3, #8
 800343c:	430d      	orrs	r5, r1
 800343e:	0214      	lsls	r4, r2, #8
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68b8      	ldr	r0, [r7, #8]
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	1900      	adds	r0, r0, r4
 8003452:	4169      	adcs	r1, r5
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f7fc ffd7 	bl	8000414 <__aeabi_uldivmod>
 8003466:	0002      	movs	r2, r0
 8003468:	000b      	movs	r3, r1
 800346a:	0013      	movs	r3, r2
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800346e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003470:	23c0      	movs	r3, #192	; 0xc0
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d309      	bcc.n	800348c <UART_SetConfig+0x398>
 8003478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	035b      	lsls	r3, r3, #13
 800347e:	429a      	cmp	r2, r3
 8003480:	d204      	bcs.n	800348c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	e0d6      	b.n	800363a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800348c:	231a      	movs	r3, #26
 800348e:	2220      	movs	r2, #32
 8003490:	189b      	adds	r3, r3, r2
 8003492:	19db      	adds	r3, r3, r7
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e0cf      	b.n	800363a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d000      	beq.n	80034a8 <UART_SetConfig+0x3b4>
 80034a6:	e070      	b.n	800358a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80034a8:	231b      	movs	r3, #27
 80034aa:	2220      	movs	r2, #32
 80034ac:	189b      	adds	r3, r3, r2
 80034ae:	19db      	adds	r3, r3, r7
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d015      	beq.n	80034e2 <UART_SetConfig+0x3ee>
 80034b6:	dc18      	bgt.n	80034ea <UART_SetConfig+0x3f6>
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d00d      	beq.n	80034d8 <UART_SetConfig+0x3e4>
 80034bc:	dc15      	bgt.n	80034ea <UART_SetConfig+0x3f6>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <UART_SetConfig+0x3d4>
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d005      	beq.n	80034d2 <UART_SetConfig+0x3de>
 80034c6:	e010      	b.n	80034ea <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c8:	f7ff fb4c 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80034cc:	0003      	movs	r3, r0
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034d0:	e014      	b.n	80034fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d2:	4b66      	ldr	r3, [pc, #408]	; (800366c <UART_SetConfig+0x578>)
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034d6:	e011      	b.n	80034fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d8:	f7ff fab8 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80034dc:	0003      	movs	r3, r0
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034e0:	e00c      	b.n	80034fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034e8:	e008      	b.n	80034fc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034ee:	231a      	movs	r3, #26
 80034f0:	2220      	movs	r2, #32
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	19db      	adds	r3, r3, r7
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
        break;
 80034fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d100      	bne.n	8003504 <UART_SetConfig+0x410>
 8003502:	e09a      	b.n	800363a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003508:	4b57      	ldr	r3, [pc, #348]	; (8003668 <UART_SetConfig+0x574>)
 800350a:	0052      	lsls	r2, r2, #1
 800350c:	5ad3      	ldrh	r3, [r2, r3]
 800350e:	0019      	movs	r1, r3
 8003510:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003512:	f7fc fe09 	bl	8000128 <__udivsi3>
 8003516:	0003      	movs	r3, r0
 8003518:	005a      	lsls	r2, r3, #1
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	18d2      	adds	r2, r2, r3
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	0019      	movs	r1, r3
 8003528:	0010      	movs	r0, r2
 800352a:	f7fc fdfd 	bl	8000128 <__udivsi3>
 800352e:	0003      	movs	r3, r0
 8003530:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	2b0f      	cmp	r3, #15
 8003536:	d921      	bls.n	800357c <UART_SetConfig+0x488>
 8003538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	025b      	lsls	r3, r3, #9
 800353e:	429a      	cmp	r2, r3
 8003540:	d21c      	bcs.n	800357c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	b29a      	uxth	r2, r3
 8003546:	200e      	movs	r0, #14
 8003548:	2420      	movs	r4, #32
 800354a:	1903      	adds	r3, r0, r4
 800354c:	19db      	adds	r3, r3, r7
 800354e:	210f      	movs	r1, #15
 8003550:	438a      	bics	r2, r1
 8003552:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	b29b      	uxth	r3, r3
 800355a:	2207      	movs	r2, #7
 800355c:	4013      	ands	r3, r2
 800355e:	b299      	uxth	r1, r3
 8003560:	1903      	adds	r3, r0, r4
 8003562:	19db      	adds	r3, r3, r7
 8003564:	1902      	adds	r2, r0, r4
 8003566:	19d2      	adds	r2, r2, r7
 8003568:	8812      	ldrh	r2, [r2, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	1902      	adds	r2, r0, r4
 8003574:	19d2      	adds	r2, r2, r7
 8003576:	8812      	ldrh	r2, [r2, #0]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	e05e      	b.n	800363a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800357c:	231a      	movs	r3, #26
 800357e:	2220      	movs	r2, #32
 8003580:	189b      	adds	r3, r3, r2
 8003582:	19db      	adds	r3, r3, r7
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
 8003588:	e057      	b.n	800363a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800358a:	231b      	movs	r3, #27
 800358c:	2220      	movs	r2, #32
 800358e:	189b      	adds	r3, r3, r2
 8003590:	19db      	adds	r3, r3, r7
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d015      	beq.n	80035c4 <UART_SetConfig+0x4d0>
 8003598:	dc18      	bgt.n	80035cc <UART_SetConfig+0x4d8>
 800359a:	2b04      	cmp	r3, #4
 800359c:	d00d      	beq.n	80035ba <UART_SetConfig+0x4c6>
 800359e:	dc15      	bgt.n	80035cc <UART_SetConfig+0x4d8>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <UART_SetConfig+0x4b6>
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d005      	beq.n	80035b4 <UART_SetConfig+0x4c0>
 80035a8:	e010      	b.n	80035cc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035aa:	f7ff fadb 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80035ae:	0003      	movs	r3, r0
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035b2:	e014      	b.n	80035de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b4:	4b2d      	ldr	r3, [pc, #180]	; (800366c <UART_SetConfig+0x578>)
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035b8:	e011      	b.n	80035de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ba:	f7ff fa47 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80035be:	0003      	movs	r3, r0
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035c2:	e00c      	b.n	80035de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035ca:	e008      	b.n	80035de <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035d0:	231a      	movs	r3, #26
 80035d2:	2220      	movs	r2, #32
 80035d4:	189b      	adds	r3, r3, r2
 80035d6:	19db      	adds	r3, r3, r7
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
        break;
 80035dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d02a      	beq.n	800363a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e8:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <UART_SetConfig+0x574>)
 80035ea:	0052      	lsls	r2, r2, #1
 80035ec:	5ad3      	ldrh	r3, [r2, r3]
 80035ee:	0019      	movs	r1, r3
 80035f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035f2:	f7fc fd99 	bl	8000128 <__udivsi3>
 80035f6:	0003      	movs	r3, r0
 80035f8:	001a      	movs	r2, r3
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	18d2      	adds	r2, r2, r3
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	0019      	movs	r1, r3
 8003608:	0010      	movs	r0, r2
 800360a:	f7fc fd8d 	bl	8000128 <__udivsi3>
 800360e:	0003      	movs	r3, r0
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	2b0f      	cmp	r3, #15
 8003616:	d90a      	bls.n	800362e <UART_SetConfig+0x53a>
 8003618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	025b      	lsls	r3, r3, #9
 800361e:	429a      	cmp	r2, r3
 8003620:	d205      	bcs.n	800362e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	b29a      	uxth	r2, r3
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60da      	str	r2, [r3, #12]
 800362c:	e005      	b.n	800363a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800362e:	231a      	movs	r3, #26
 8003630:	2220      	movs	r2, #32
 8003632:	189b      	adds	r3, r3, r2
 8003634:	19db      	adds	r3, r3, r7
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	226a      	movs	r2, #106	; 0x6a
 800363e:	2101      	movs	r1, #1
 8003640:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	2268      	movs	r2, #104	; 0x68
 8003646:	2101      	movs	r1, #1
 8003648:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	2200      	movs	r2, #0
 800364e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	2200      	movs	r2, #0
 8003654:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003656:	231a      	movs	r3, #26
 8003658:	2220      	movs	r2, #32
 800365a:	189b      	adds	r3, r3, r2
 800365c:	19db      	adds	r3, r3, r7
 800365e:	781b      	ldrb	r3, [r3, #0]
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b010      	add	sp, #64	; 0x40
 8003666:	bdb0      	pop	{r4, r5, r7, pc}
 8003668:	08004740 	.word	0x08004740
 800366c:	00f42400 	.word	0x00f42400

08003670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	2208      	movs	r2, #8
 800367e:	4013      	ands	r3, r2
 8003680:	d00b      	beq.n	800369a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a4a      	ldr	r2, [pc, #296]	; (80037b4 <UART_AdvFeatureConfig+0x144>)
 800368a:	4013      	ands	r3, r2
 800368c:	0019      	movs	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	2201      	movs	r2, #1
 80036a0:	4013      	ands	r3, r2
 80036a2:	d00b      	beq.n	80036bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4a43      	ldr	r2, [pc, #268]	; (80037b8 <UART_AdvFeatureConfig+0x148>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	0019      	movs	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	2202      	movs	r2, #2
 80036c2:	4013      	ands	r3, r2
 80036c4:	d00b      	beq.n	80036de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <UART_AdvFeatureConfig+0x14c>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	2204      	movs	r2, #4
 80036e4:	4013      	ands	r3, r2
 80036e6:	d00b      	beq.n	8003700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a34      	ldr	r2, [pc, #208]	; (80037c0 <UART_AdvFeatureConfig+0x150>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2210      	movs	r2, #16
 8003706:	4013      	ands	r3, r2
 8003708:	d00b      	beq.n	8003722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <UART_AdvFeatureConfig+0x154>)
 8003712:	4013      	ands	r3, r2
 8003714:	0019      	movs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	2220      	movs	r2, #32
 8003728:	4013      	ands	r3, r2
 800372a:	d00b      	beq.n	8003744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <UART_AdvFeatureConfig+0x158>)
 8003734:	4013      	ands	r3, r2
 8003736:	0019      	movs	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	2240      	movs	r2, #64	; 0x40
 800374a:	4013      	ands	r3, r2
 800374c:	d01d      	beq.n	800378a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <UART_AdvFeatureConfig+0x15c>)
 8003756:	4013      	ands	r3, r2
 8003758:	0019      	movs	r1, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	035b      	lsls	r3, r3, #13
 800376e:	429a      	cmp	r2, r3
 8003770:	d10b      	bne.n	800378a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <UART_AdvFeatureConfig+0x160>)
 800377a:	4013      	ands	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	4013      	ands	r3, r2
 8003792:	d00b      	beq.n	80037ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <UART_AdvFeatureConfig+0x164>)
 800379c:	4013      	ands	r3, r2
 800379e:	0019      	movs	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	ffff7fff 	.word	0xffff7fff
 80037b8:	fffdffff 	.word	0xfffdffff
 80037bc:	fffeffff 	.word	0xfffeffff
 80037c0:	fffbffff 	.word	0xfffbffff
 80037c4:	ffffefff 	.word	0xffffefff
 80037c8:	ffffdfff 	.word	0xffffdfff
 80037cc:	ffefffff 	.word	0xffefffff
 80037d0:	ff9fffff 	.word	0xff9fffff
 80037d4:	fff7ffff 	.word	0xfff7ffff

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b092      	sub	sp, #72	; 0x48
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2290      	movs	r2, #144	; 0x90
 80037e4:	2100      	movs	r1, #0
 80037e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fbc8 	bl	8000f7c <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2208      	movs	r2, #8
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d12d      	bne.n	800385a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	0391      	lsls	r1, r2, #14
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4a47      	ldr	r2, [pc, #284]	; (8003924 <UART_CheckIdleState+0x14c>)
 8003808:	9200      	str	r2, [sp, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	f000 f88e 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d022      	beq.n	800385a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003814:	f3ef 8310 	mrs	r3, PRIMASK
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800381c:	63bb      	str	r3, [r7, #56]	; 0x38
 800381e:	2301      	movs	r3, #1
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	f383 8810 	msr	PRIMASK, r3
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2180      	movs	r1, #128	; 0x80
 8003836:	438a      	bics	r2, r1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	f383 8810 	msr	PRIMASK, r3
}
 8003844:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2288      	movs	r2, #136	; 0x88
 800384a:	2120      	movs	r1, #32
 800384c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2284      	movs	r2, #132	; 0x84
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e060      	b.n	800391c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2204      	movs	r2, #4
 8003862:	4013      	ands	r3, r2
 8003864:	2b04      	cmp	r3, #4
 8003866:	d146      	bne.n	80038f6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	03d1      	lsls	r1, r2, #15
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4a2c      	ldr	r2, [pc, #176]	; (8003924 <UART_CheckIdleState+0x14c>)
 8003872:	9200      	str	r2, [sp, #0]
 8003874:	2200      	movs	r2, #0
 8003876:	f000 f859 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 800387a:	1e03      	subs	r3, r0, #0
 800387c:	d03b      	beq.n	80038f6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387e:	f3ef 8310 	mrs	r3, PRIMASK
 8003882:	60fb      	str	r3, [r7, #12]
  return(result);
 8003884:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
 8003888:	2301      	movs	r3, #1
 800388a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f383 8810 	msr	PRIMASK, r3
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4922      	ldr	r1, [pc, #136]	; (8003928 <UART_CheckIdleState+0x150>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f383 8810 	msr	PRIMASK, r3
}
 80038ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b0:	f3ef 8310 	mrs	r3, PRIMASK
 80038b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80038b6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f383 8810 	msr	PRIMASK, r3
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	438a      	bics	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f383 8810 	msr	PRIMASK, r3
}
 80038e0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	228c      	movs	r2, #140	; 0x8c
 80038e6:	2120      	movs	r1, #32
 80038e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2284      	movs	r2, #132	; 0x84
 80038ee:	2100      	movs	r1, #0
 80038f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e012      	b.n	800391c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2288      	movs	r2, #136	; 0x88
 80038fa:	2120      	movs	r1, #32
 80038fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	228c      	movs	r2, #140	; 0x8c
 8003902:	2120      	movs	r1, #32
 8003904:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2284      	movs	r2, #132	; 0x84
 8003916:	2100      	movs	r1, #0
 8003918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b010      	add	sp, #64	; 0x40
 8003922:	bd80      	pop	{r7, pc}
 8003924:	01ffffff 	.word	0x01ffffff
 8003928:	fffffedf 	.word	0xfffffedf

0800392c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393c:	e051      	b.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3301      	adds	r3, #1
 8003942:	d04e      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fd fb1a 	bl	8000f7c <HAL_GetTick>
 8003948:	0002      	movs	r2, r0
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e051      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2204      	movs	r2, #4
 8003966:	4013      	ands	r3, r2
 8003968:	d03b      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d038      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d035      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	2208      	movs	r2, #8
 800397e:	4013      	ands	r3, r2
 8003980:	2b08      	cmp	r3, #8
 8003982:	d111      	bne.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2208      	movs	r2, #8
 800398a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	0018      	movs	r0, r3
 8003990:	f000 f83c 	bl	8003a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2290      	movs	r2, #144	; 0x90
 8003998:	2108      	movs	r1, #8
 800399a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2284      	movs	r2, #132	; 0x84
 80039a0:	2100      	movs	r1, #0
 80039a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e02c      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	401a      	ands	r2, r3
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d112      	bne.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 f81f 	bl	8003a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2290      	movs	r2, #144	; 0x90
 80039d2:	2120      	movs	r1, #32
 80039d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2284      	movs	r2, #132	; 0x84
 80039da:	2100      	movs	r1, #0
 80039dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e00f      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	425a      	negs	r2, r3
 80039f2:	4153      	adcs	r3, r2
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	001a      	movs	r2, r3
 80039f8:	1dfb      	adds	r3, r7, #7
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d09e      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08e      	sub	sp, #56	; 0x38
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a14:	f3ef 8310 	mrs	r3, PRIMASK
 8003a18:	617b      	str	r3, [r7, #20]
  return(result);
 8003a1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f383 8810 	msr	PRIMASK, r3
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4926      	ldr	r1, [pc, #152]	; (8003ad0 <UART_EndRxTransfer+0xc4>)
 8003a36:	400a      	ands	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f383 8810 	msr	PRIMASK, r3
}
 8003a44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a46:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4a:	623b      	str	r3, [r7, #32]
  return(result);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a50:	2301      	movs	r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	f383 8810 	msr	PRIMASK, r3
}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	491b      	ldr	r1, [pc, #108]	; (8003ad4 <UART_EndRxTransfer+0xc8>)
 8003a68:	400a      	ands	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	f383 8810 	msr	PRIMASK, r3
}
 8003a76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d118      	bne.n	8003ab2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a80:	f3ef 8310 	mrs	r3, PRIMASK
 8003a84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f383 8810 	msr	PRIMASK, r3
}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2110      	movs	r1, #16
 8003aa2:	438a      	bics	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f383 8810 	msr	PRIMASK, r3
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	228c      	movs	r2, #140	; 0x8c
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b00e      	add	sp, #56	; 0x38
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	fffffedf 	.word	0xfffffedf
 8003ad4:	effffffe 	.word	0xeffffffe

08003ad8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2284      	movs	r2, #132	; 0x84
 8003ae4:	5c9b      	ldrb	r3, [r3, r2]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_UARTEx_DisableFifoMode+0x16>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e027      	b.n	8003b3e <HAL_UARTEx_DisableFifoMode+0x66>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2284      	movs	r2, #132	; 0x84
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2288      	movs	r2, #136	; 0x88
 8003afa:	2124      	movs	r1, #36	; 0x24
 8003afc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	438a      	bics	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2288      	movs	r2, #136	; 0x88
 8003b30:	2120      	movs	r1, #32
 8003b32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2284      	movs	r2, #132	; 0x84
 8003b38:	2100      	movs	r1, #0
 8003b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b004      	add	sp, #16
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	dfffffff 	.word	0xdfffffff

08003b4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2284      	movs	r2, #132	; 0x84
 8003b5a:	5c9b      	ldrb	r3, [r3, r2]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e02e      	b.n	8003bc2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2284      	movs	r2, #132	; 0x84
 8003b68:	2101      	movs	r1, #1
 8003b6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2288      	movs	r2, #136	; 0x88
 8003b70:	2124      	movs	r1, #36	; 0x24
 8003b72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2101      	movs	r1, #1
 8003b88:	438a      	bics	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	08d9      	lsrs	r1, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f000 f854 	bl	8003c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2288      	movs	r2, #136	; 0x88
 8003bb4:	2120      	movs	r1, #32
 8003bb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2284      	movs	r2, #132	; 0x84
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2284      	movs	r2, #132	; 0x84
 8003bda:	5c9b      	ldrb	r3, [r3, r2]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e02f      	b.n	8003c44 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2284      	movs	r2, #132	; 0x84
 8003be8:	2101      	movs	r1, #1
 8003bea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2288      	movs	r2, #136	; 0x88
 8003bf0:	2124      	movs	r1, #36	; 0x24
 8003bf2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2101      	movs	r1, #1
 8003c08:	438a      	bics	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f000 f813 	bl	8003c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2288      	movs	r2, #136	; 0x88
 8003c36:	2120      	movs	r1, #32
 8003c38:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2284      	movs	r2, #132	; 0x84
 8003c3e:	2100      	movs	r1, #0
 8003c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b004      	add	sp, #16
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	f1ffffff 	.word	0xf1ffffff

08003c50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d108      	bne.n	8003c72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	226a      	movs	r2, #106	; 0x6a
 8003c64:	2101      	movs	r1, #1
 8003c66:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2268      	movs	r2, #104	; 0x68
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c70:	e043      	b.n	8003cfa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c72:	260f      	movs	r6, #15
 8003c74:	19bb      	adds	r3, r7, r6
 8003c76:	2208      	movs	r2, #8
 8003c78:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c7a:	200e      	movs	r0, #14
 8003c7c:	183b      	adds	r3, r7, r0
 8003c7e:	2208      	movs	r2, #8
 8003c80:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	0e5b      	lsrs	r3, r3, #25
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	240d      	movs	r4, #13
 8003c8e:	193b      	adds	r3, r7, r4
 8003c90:	2107      	movs	r1, #7
 8003c92:	400a      	ands	r2, r1
 8003c94:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	0f5b      	lsrs	r3, r3, #29
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	250c      	movs	r5, #12
 8003ca2:	197b      	adds	r3, r7, r5
 8003ca4:	2107      	movs	r1, #7
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003caa:	183b      	adds	r3, r7, r0
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	197a      	adds	r2, r7, r5
 8003cb0:	7812      	ldrb	r2, [r2, #0]
 8003cb2:	4914      	ldr	r1, [pc, #80]	; (8003d04 <UARTEx_SetNbDataToProcess+0xb4>)
 8003cb4:	5c8a      	ldrb	r2, [r1, r2]
 8003cb6:	435a      	muls	r2, r3
 8003cb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003cba:	197b      	adds	r3, r7, r5
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <UARTEx_SetNbDataToProcess+0xb8>)
 8003cc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	f7fc faba 	bl	800023c <__divsi3>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	b299      	uxth	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	226a      	movs	r2, #106	; 0x6a
 8003cd0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cd2:	19bb      	adds	r3, r7, r6
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	193a      	adds	r2, r7, r4
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	490a      	ldr	r1, [pc, #40]	; (8003d04 <UARTEx_SetNbDataToProcess+0xb4>)
 8003cdc:	5c8a      	ldrb	r2, [r1, r2]
 8003cde:	435a      	muls	r2, r3
 8003ce0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ce2:	193b      	adds	r3, r7, r4
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ce8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cea:	0019      	movs	r1, r3
 8003cec:	f7fc faa6 	bl	800023c <__divsi3>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	b299      	uxth	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2268      	movs	r2, #104	; 0x68
 8003cf8:	5299      	strh	r1, [r3, r2]
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b005      	add	sp, #20
 8003d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	08004758 	.word	0x08004758
 8003d08:	08004760 	.word	0x08004760

08003d0c <siprintf>:
 8003d0c:	b40e      	push	{r1, r2, r3}
 8003d0e:	b500      	push	{lr}
 8003d10:	490b      	ldr	r1, [pc, #44]	; (8003d40 <siprintf+0x34>)
 8003d12:	b09c      	sub	sp, #112	; 0x70
 8003d14:	ab1d      	add	r3, sp, #116	; 0x74
 8003d16:	9002      	str	r0, [sp, #8]
 8003d18:	9006      	str	r0, [sp, #24]
 8003d1a:	9107      	str	r1, [sp, #28]
 8003d1c:	9104      	str	r1, [sp, #16]
 8003d1e:	4809      	ldr	r0, [pc, #36]	; (8003d44 <siprintf+0x38>)
 8003d20:	4909      	ldr	r1, [pc, #36]	; (8003d48 <siprintf+0x3c>)
 8003d22:	cb04      	ldmia	r3!, {r2}
 8003d24:	9105      	str	r1, [sp, #20]
 8003d26:	6800      	ldr	r0, [r0, #0]
 8003d28:	a902      	add	r1, sp, #8
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	f000 f9a2 	bl	8004074 <_svfiprintf_r>
 8003d30:	2200      	movs	r2, #0
 8003d32:	9b02      	ldr	r3, [sp, #8]
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	b01c      	add	sp, #112	; 0x70
 8003d38:	bc08      	pop	{r3}
 8003d3a:	b003      	add	sp, #12
 8003d3c:	4718      	bx	r3
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	7fffffff 	.word	0x7fffffff
 8003d44:	20000058 	.word	0x20000058
 8003d48:	ffff0208 	.word	0xffff0208

08003d4c <memset>:
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	1882      	adds	r2, r0, r2
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d100      	bne.n	8003d56 <memset+0xa>
 8003d54:	4770      	bx	lr
 8003d56:	7019      	strb	r1, [r3, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	e7f9      	b.n	8003d50 <memset+0x4>

08003d5c <__errno>:
 8003d5c:	4b01      	ldr	r3, [pc, #4]	; (8003d64 <__errno+0x8>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	4770      	bx	lr
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	20000058 	.word	0x20000058

08003d68 <__libc_init_array>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	2600      	movs	r6, #0
 8003d6c:	4c0c      	ldr	r4, [pc, #48]	; (8003da0 <__libc_init_array+0x38>)
 8003d6e:	4d0d      	ldr	r5, [pc, #52]	; (8003da4 <__libc_init_array+0x3c>)
 8003d70:	1b64      	subs	r4, r4, r5
 8003d72:	10a4      	asrs	r4, r4, #2
 8003d74:	42a6      	cmp	r6, r4
 8003d76:	d109      	bne.n	8003d8c <__libc_init_array+0x24>
 8003d78:	2600      	movs	r6, #0
 8003d7a:	f000 fc6d 	bl	8004658 <_init>
 8003d7e:	4c0a      	ldr	r4, [pc, #40]	; (8003da8 <__libc_init_array+0x40>)
 8003d80:	4d0a      	ldr	r5, [pc, #40]	; (8003dac <__libc_init_array+0x44>)
 8003d82:	1b64      	subs	r4, r4, r5
 8003d84:	10a4      	asrs	r4, r4, #2
 8003d86:	42a6      	cmp	r6, r4
 8003d88:	d105      	bne.n	8003d96 <__libc_init_array+0x2e>
 8003d8a:	bd70      	pop	{r4, r5, r6, pc}
 8003d8c:	00b3      	lsls	r3, r6, #2
 8003d8e:	58eb      	ldr	r3, [r5, r3]
 8003d90:	4798      	blx	r3
 8003d92:	3601      	adds	r6, #1
 8003d94:	e7ee      	b.n	8003d74 <__libc_init_array+0xc>
 8003d96:	00b3      	lsls	r3, r6, #2
 8003d98:	58eb      	ldr	r3, [r5, r3]
 8003d9a:	4798      	blx	r3
 8003d9c:	3601      	adds	r6, #1
 8003d9e:	e7f2      	b.n	8003d86 <__libc_init_array+0x1e>
 8003da0:	080047a4 	.word	0x080047a4
 8003da4:	080047a4 	.word	0x080047a4
 8003da8:	080047a8 	.word	0x080047a8
 8003dac:	080047a4 	.word	0x080047a4

08003db0 <__retarget_lock_acquire_recursive>:
 8003db0:	4770      	bx	lr

08003db2 <__retarget_lock_release_recursive>:
 8003db2:	4770      	bx	lr

08003db4 <_free_r>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	0005      	movs	r5, r0
 8003db8:	2900      	cmp	r1, #0
 8003dba:	d010      	beq.n	8003dde <_free_r+0x2a>
 8003dbc:	1f0c      	subs	r4, r1, #4
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da00      	bge.n	8003dc6 <_free_r+0x12>
 8003dc4:	18e4      	adds	r4, r4, r3
 8003dc6:	0028      	movs	r0, r5
 8003dc8:	f000 f8e2 	bl	8003f90 <__malloc_lock>
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <_free_r+0x90>)
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <_free_r+0x2c>
 8003dd4:	6063      	str	r3, [r4, #4]
 8003dd6:	6014      	str	r4, [r2, #0]
 8003dd8:	0028      	movs	r0, r5
 8003dda:	f000 f8e1 	bl	8003fa0 <__malloc_unlock>
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	42a3      	cmp	r3, r4
 8003de2:	d908      	bls.n	8003df6 <_free_r+0x42>
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	1821      	adds	r1, r4, r0
 8003de8:	428b      	cmp	r3, r1
 8003dea:	d1f3      	bne.n	8003dd4 <_free_r+0x20>
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	1809      	adds	r1, r1, r0
 8003df2:	6021      	str	r1, [r4, #0]
 8003df4:	e7ee      	b.n	8003dd4 <_free_r+0x20>
 8003df6:	001a      	movs	r2, r3
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <_free_r+0x4e>
 8003dfe:	42a3      	cmp	r3, r4
 8003e00:	d9f9      	bls.n	8003df6 <_free_r+0x42>
 8003e02:	6811      	ldr	r1, [r2, #0]
 8003e04:	1850      	adds	r0, r2, r1
 8003e06:	42a0      	cmp	r0, r4
 8003e08:	d10b      	bne.n	8003e22 <_free_r+0x6e>
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	1809      	adds	r1, r1, r0
 8003e0e:	1850      	adds	r0, r2, r1
 8003e10:	6011      	str	r1, [r2, #0]
 8003e12:	4283      	cmp	r3, r0
 8003e14:	d1e0      	bne.n	8003dd8 <_free_r+0x24>
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	1841      	adds	r1, r0, r1
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	6053      	str	r3, [r2, #4]
 8003e20:	e7da      	b.n	8003dd8 <_free_r+0x24>
 8003e22:	42a0      	cmp	r0, r4
 8003e24:	d902      	bls.n	8003e2c <_free_r+0x78>
 8003e26:	230c      	movs	r3, #12
 8003e28:	602b      	str	r3, [r5, #0]
 8003e2a:	e7d5      	b.n	8003dd8 <_free_r+0x24>
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	1821      	adds	r1, r4, r0
 8003e30:	428b      	cmp	r3, r1
 8003e32:	d103      	bne.n	8003e3c <_free_r+0x88>
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	1809      	adds	r1, r1, r0
 8003e3a:	6021      	str	r1, [r4, #0]
 8003e3c:	6063      	str	r3, [r4, #4]
 8003e3e:	6054      	str	r4, [r2, #4]
 8003e40:	e7ca      	b.n	8003dd8 <_free_r+0x24>
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	200002e0 	.word	0x200002e0

08003e48 <sbrk_aligned>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4e0f      	ldr	r6, [pc, #60]	; (8003e88 <sbrk_aligned+0x40>)
 8003e4c:	000d      	movs	r5, r1
 8003e4e:	6831      	ldr	r1, [r6, #0]
 8003e50:	0004      	movs	r4, r0
 8003e52:	2900      	cmp	r1, #0
 8003e54:	d102      	bne.n	8003e5c <sbrk_aligned+0x14>
 8003e56:	f000 fba1 	bl	800459c <_sbrk_r>
 8003e5a:	6030      	str	r0, [r6, #0]
 8003e5c:	0029      	movs	r1, r5
 8003e5e:	0020      	movs	r0, r4
 8003e60:	f000 fb9c 	bl	800459c <_sbrk_r>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d00a      	beq.n	8003e7e <sbrk_aligned+0x36>
 8003e68:	2303      	movs	r3, #3
 8003e6a:	1cc5      	adds	r5, r0, #3
 8003e6c:	439d      	bics	r5, r3
 8003e6e:	42a8      	cmp	r0, r5
 8003e70:	d007      	beq.n	8003e82 <sbrk_aligned+0x3a>
 8003e72:	1a29      	subs	r1, r5, r0
 8003e74:	0020      	movs	r0, r4
 8003e76:	f000 fb91 	bl	800459c <_sbrk_r>
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d101      	bne.n	8003e82 <sbrk_aligned+0x3a>
 8003e7e:	2501      	movs	r5, #1
 8003e80:	426d      	negs	r5, r5
 8003e82:	0028      	movs	r0, r5
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	200002e4 	.word	0x200002e4

08003e8c <_malloc_r>:
 8003e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e8e:	2203      	movs	r2, #3
 8003e90:	1ccb      	adds	r3, r1, #3
 8003e92:	4393      	bics	r3, r2
 8003e94:	3308      	adds	r3, #8
 8003e96:	0006      	movs	r6, r0
 8003e98:	001f      	movs	r7, r3
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d238      	bcs.n	8003f10 <_malloc_r+0x84>
 8003e9e:	270c      	movs	r7, #12
 8003ea0:	42b9      	cmp	r1, r7
 8003ea2:	d837      	bhi.n	8003f14 <_malloc_r+0x88>
 8003ea4:	0030      	movs	r0, r6
 8003ea6:	f000 f873 	bl	8003f90 <__malloc_lock>
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <_malloc_r+0x100>)
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	001c      	movs	r4, r3
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	d133      	bne.n	8003f1e <_malloc_r+0x92>
 8003eb6:	0039      	movs	r1, r7
 8003eb8:	0030      	movs	r0, r6
 8003eba:	f7ff ffc5 	bl	8003e48 <sbrk_aligned>
 8003ebe:	0004      	movs	r4, r0
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d15e      	bne.n	8003f82 <_malloc_r+0xf6>
 8003ec4:	9b00      	ldr	r3, [sp, #0]
 8003ec6:	681c      	ldr	r4, [r3, #0]
 8003ec8:	0025      	movs	r5, r4
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	d14e      	bne.n	8003f6c <_malloc_r+0xe0>
 8003ece:	2c00      	cmp	r4, #0
 8003ed0:	d051      	beq.n	8003f76 <_malloc_r+0xea>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	0029      	movs	r1, r5
 8003ed6:	18e3      	adds	r3, r4, r3
 8003ed8:	0030      	movs	r0, r6
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	f000 fb5e 	bl	800459c <_sbrk_r>
 8003ee0:	9b01      	ldr	r3, [sp, #4]
 8003ee2:	4283      	cmp	r3, r0
 8003ee4:	d147      	bne.n	8003f76 <_malloc_r+0xea>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	0030      	movs	r0, r6
 8003eea:	1aff      	subs	r7, r7, r3
 8003eec:	0039      	movs	r1, r7
 8003eee:	f7ff ffab 	bl	8003e48 <sbrk_aligned>
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d03f      	beq.n	8003f76 <_malloc_r+0xea>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	19db      	adds	r3, r3, r7
 8003efa:	6023      	str	r3, [r4, #0]
 8003efc:	9b00      	ldr	r3, [sp, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d040      	beq.n	8003f86 <_malloc_r+0xfa>
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	42a2      	cmp	r2, r4
 8003f08:	d133      	bne.n	8003f72 <_malloc_r+0xe6>
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	e014      	b.n	8003f3a <_malloc_r+0xae>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dac5      	bge.n	8003ea0 <_malloc_r+0x14>
 8003f14:	230c      	movs	r3, #12
 8003f16:	2500      	movs	r5, #0
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	0028      	movs	r0, r5
 8003f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f1e:	6821      	ldr	r1, [r4, #0]
 8003f20:	1bc9      	subs	r1, r1, r7
 8003f22:	d420      	bmi.n	8003f66 <_malloc_r+0xda>
 8003f24:	290b      	cmp	r1, #11
 8003f26:	d918      	bls.n	8003f5a <_malloc_r+0xce>
 8003f28:	19e2      	adds	r2, r4, r7
 8003f2a:	6027      	str	r7, [r4, #0]
 8003f2c:	42a3      	cmp	r3, r4
 8003f2e:	d112      	bne.n	8003f56 <_malloc_r+0xca>
 8003f30:	9b00      	ldr	r3, [sp, #0]
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	6863      	ldr	r3, [r4, #4]
 8003f36:	6011      	str	r1, [r2, #0]
 8003f38:	6053      	str	r3, [r2, #4]
 8003f3a:	0030      	movs	r0, r6
 8003f3c:	0025      	movs	r5, r4
 8003f3e:	f000 f82f 	bl	8003fa0 <__malloc_unlock>
 8003f42:	2207      	movs	r2, #7
 8003f44:	350b      	adds	r5, #11
 8003f46:	1d23      	adds	r3, r4, #4
 8003f48:	4395      	bics	r5, r2
 8003f4a:	1aea      	subs	r2, r5, r3
 8003f4c:	429d      	cmp	r5, r3
 8003f4e:	d0e4      	beq.n	8003f1a <_malloc_r+0x8e>
 8003f50:	1b5b      	subs	r3, r3, r5
 8003f52:	50a3      	str	r3, [r4, r2]
 8003f54:	e7e1      	b.n	8003f1a <_malloc_r+0x8e>
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	e7ec      	b.n	8003f34 <_malloc_r+0xa8>
 8003f5a:	6862      	ldr	r2, [r4, #4]
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	d1d5      	bne.n	8003f0c <_malloc_r+0x80>
 8003f60:	9b00      	ldr	r3, [sp, #0]
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e7e9      	b.n	8003f3a <_malloc_r+0xae>
 8003f66:	0023      	movs	r3, r4
 8003f68:	6864      	ldr	r4, [r4, #4]
 8003f6a:	e7a2      	b.n	8003eb2 <_malloc_r+0x26>
 8003f6c:	002c      	movs	r4, r5
 8003f6e:	686d      	ldr	r5, [r5, #4]
 8003f70:	e7ab      	b.n	8003eca <_malloc_r+0x3e>
 8003f72:	0013      	movs	r3, r2
 8003f74:	e7c4      	b.n	8003f00 <_malloc_r+0x74>
 8003f76:	230c      	movs	r3, #12
 8003f78:	0030      	movs	r0, r6
 8003f7a:	6033      	str	r3, [r6, #0]
 8003f7c:	f000 f810 	bl	8003fa0 <__malloc_unlock>
 8003f80:	e7cb      	b.n	8003f1a <_malloc_r+0x8e>
 8003f82:	6027      	str	r7, [r4, #0]
 8003f84:	e7d9      	b.n	8003f3a <_malloc_r+0xae>
 8003f86:	605b      	str	r3, [r3, #4]
 8003f88:	deff      	udf	#255	; 0xff
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	200002e0 	.word	0x200002e0

08003f90 <__malloc_lock>:
 8003f90:	b510      	push	{r4, lr}
 8003f92:	4802      	ldr	r0, [pc, #8]	; (8003f9c <__malloc_lock+0xc>)
 8003f94:	f7ff ff0c 	bl	8003db0 <__retarget_lock_acquire_recursive>
 8003f98:	bd10      	pop	{r4, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	200002dc 	.word	0x200002dc

08003fa0 <__malloc_unlock>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4802      	ldr	r0, [pc, #8]	; (8003fac <__malloc_unlock+0xc>)
 8003fa4:	f7ff ff05 	bl	8003db2 <__retarget_lock_release_recursive>
 8003fa8:	bd10      	pop	{r4, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	200002dc 	.word	0x200002dc

08003fb0 <__ssputs_r>:
 8003fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	9203      	str	r2, [sp, #12]
 8003fb8:	688e      	ldr	r6, [r1, #8]
 8003fba:	9a01      	ldr	r2, [sp, #4]
 8003fbc:	0007      	movs	r7, r0
 8003fbe:	000c      	movs	r4, r1
 8003fc0:	680b      	ldr	r3, [r1, #0]
 8003fc2:	4296      	cmp	r6, r2
 8003fc4:	d831      	bhi.n	800402a <__ssputs_r+0x7a>
 8003fc6:	898a      	ldrh	r2, [r1, #12]
 8003fc8:	2190      	movs	r1, #144	; 0x90
 8003fca:	00c9      	lsls	r1, r1, #3
 8003fcc:	420a      	tst	r2, r1
 8003fce:	d029      	beq.n	8004024 <__ssputs_r+0x74>
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	6921      	ldr	r1, [r4, #16]
 8003fd4:	1a5b      	subs	r3, r3, r1
 8003fd6:	9302      	str	r3, [sp, #8]
 8003fd8:	6963      	ldr	r3, [r4, #20]
 8003fda:	4343      	muls	r3, r0
 8003fdc:	0fdd      	lsrs	r5, r3, #31
 8003fde:	18ed      	adds	r5, r5, r3
 8003fe0:	9b01      	ldr	r3, [sp, #4]
 8003fe2:	9802      	ldr	r0, [sp, #8]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	181b      	adds	r3, r3, r0
 8003fe8:	106d      	asrs	r5, r5, #1
 8003fea:	42ab      	cmp	r3, r5
 8003fec:	d900      	bls.n	8003ff0 <__ssputs_r+0x40>
 8003fee:	001d      	movs	r5, r3
 8003ff0:	0552      	lsls	r2, r2, #21
 8003ff2:	d529      	bpl.n	8004048 <__ssputs_r+0x98>
 8003ff4:	0029      	movs	r1, r5
 8003ff6:	0038      	movs	r0, r7
 8003ff8:	f7ff ff48 	bl	8003e8c <_malloc_r>
 8003ffc:	1e06      	subs	r6, r0, #0
 8003ffe:	d02d      	beq.n	800405c <__ssputs_r+0xac>
 8004000:	9a02      	ldr	r2, [sp, #8]
 8004002:	6921      	ldr	r1, [r4, #16]
 8004004:	f000 fae7 	bl	80045d6 <memcpy>
 8004008:	89a2      	ldrh	r2, [r4, #12]
 800400a:	4b19      	ldr	r3, [pc, #100]	; (8004070 <__ssputs_r+0xc0>)
 800400c:	401a      	ands	r2, r3
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	4313      	orrs	r3, r2
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	9b02      	ldr	r3, [sp, #8]
 8004016:	6126      	str	r6, [r4, #16]
 8004018:	18f6      	adds	r6, r6, r3
 800401a:	6026      	str	r6, [r4, #0]
 800401c:	6165      	str	r5, [r4, #20]
 800401e:	9e01      	ldr	r6, [sp, #4]
 8004020:	1aed      	subs	r5, r5, r3
 8004022:	60a5      	str	r5, [r4, #8]
 8004024:	9b01      	ldr	r3, [sp, #4]
 8004026:	429e      	cmp	r6, r3
 8004028:	d900      	bls.n	800402c <__ssputs_r+0x7c>
 800402a:	9e01      	ldr	r6, [sp, #4]
 800402c:	0032      	movs	r2, r6
 800402e:	9903      	ldr	r1, [sp, #12]
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	f000 fa9f 	bl	8004574 <memmove>
 8004036:	2000      	movs	r0, #0
 8004038:	68a3      	ldr	r3, [r4, #8]
 800403a:	1b9b      	subs	r3, r3, r6
 800403c:	60a3      	str	r3, [r4, #8]
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	199b      	adds	r3, r3, r6
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	b005      	add	sp, #20
 8004046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004048:	002a      	movs	r2, r5
 800404a:	0038      	movs	r0, r7
 800404c:	f000 facc 	bl	80045e8 <_realloc_r>
 8004050:	1e06      	subs	r6, r0, #0
 8004052:	d1df      	bne.n	8004014 <__ssputs_r+0x64>
 8004054:	0038      	movs	r0, r7
 8004056:	6921      	ldr	r1, [r4, #16]
 8004058:	f7ff feac 	bl	8003db4 <_free_r>
 800405c:	230c      	movs	r3, #12
 800405e:	2001      	movs	r0, #1
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	89a2      	ldrh	r2, [r4, #12]
 8004064:	3334      	adds	r3, #52	; 0x34
 8004066:	4313      	orrs	r3, r2
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	4240      	negs	r0, r0
 800406c:	e7ea      	b.n	8004044 <__ssputs_r+0x94>
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	fffffb7f 	.word	0xfffffb7f

08004074 <_svfiprintf_r>:
 8004074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004076:	b0a1      	sub	sp, #132	; 0x84
 8004078:	9003      	str	r0, [sp, #12]
 800407a:	001d      	movs	r5, r3
 800407c:	898b      	ldrh	r3, [r1, #12]
 800407e:	000f      	movs	r7, r1
 8004080:	0016      	movs	r6, r2
 8004082:	061b      	lsls	r3, r3, #24
 8004084:	d511      	bpl.n	80040aa <_svfiprintf_r+0x36>
 8004086:	690b      	ldr	r3, [r1, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10e      	bne.n	80040aa <_svfiprintf_r+0x36>
 800408c:	2140      	movs	r1, #64	; 0x40
 800408e:	f7ff fefd 	bl	8003e8c <_malloc_r>
 8004092:	6038      	str	r0, [r7, #0]
 8004094:	6138      	str	r0, [r7, #16]
 8004096:	2800      	cmp	r0, #0
 8004098:	d105      	bne.n	80040a6 <_svfiprintf_r+0x32>
 800409a:	230c      	movs	r3, #12
 800409c:	9a03      	ldr	r2, [sp, #12]
 800409e:	3801      	subs	r0, #1
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	b021      	add	sp, #132	; 0x84
 80040a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a6:	2340      	movs	r3, #64	; 0x40
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	2300      	movs	r3, #0
 80040ac:	ac08      	add	r4, sp, #32
 80040ae:	6163      	str	r3, [r4, #20]
 80040b0:	3320      	adds	r3, #32
 80040b2:	7663      	strb	r3, [r4, #25]
 80040b4:	3310      	adds	r3, #16
 80040b6:	76a3      	strb	r3, [r4, #26]
 80040b8:	9507      	str	r5, [sp, #28]
 80040ba:	0035      	movs	r5, r6
 80040bc:	782b      	ldrb	r3, [r5, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <_svfiprintf_r+0x52>
 80040c2:	2b25      	cmp	r3, #37	; 0x25
 80040c4:	d148      	bne.n	8004158 <_svfiprintf_r+0xe4>
 80040c6:	1bab      	subs	r3, r5, r6
 80040c8:	9305      	str	r3, [sp, #20]
 80040ca:	42b5      	cmp	r5, r6
 80040cc:	d00b      	beq.n	80040e6 <_svfiprintf_r+0x72>
 80040ce:	0032      	movs	r2, r6
 80040d0:	0039      	movs	r1, r7
 80040d2:	9803      	ldr	r0, [sp, #12]
 80040d4:	f7ff ff6c 	bl	8003fb0 <__ssputs_r>
 80040d8:	3001      	adds	r0, #1
 80040da:	d100      	bne.n	80040de <_svfiprintf_r+0x6a>
 80040dc:	e0af      	b.n	800423e <_svfiprintf_r+0x1ca>
 80040de:	6963      	ldr	r3, [r4, #20]
 80040e0:	9a05      	ldr	r2, [sp, #20]
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	6163      	str	r3, [r4, #20]
 80040e6:	782b      	ldrb	r3, [r5, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d100      	bne.n	80040ee <_svfiprintf_r+0x7a>
 80040ec:	e0a7      	b.n	800423e <_svfiprintf_r+0x1ca>
 80040ee:	2201      	movs	r2, #1
 80040f0:	2300      	movs	r3, #0
 80040f2:	4252      	negs	r2, r2
 80040f4:	6062      	str	r2, [r4, #4]
 80040f6:	a904      	add	r1, sp, #16
 80040f8:	3254      	adds	r2, #84	; 0x54
 80040fa:	1852      	adds	r2, r2, r1
 80040fc:	1c6e      	adds	r6, r5, #1
 80040fe:	6023      	str	r3, [r4, #0]
 8004100:	60e3      	str	r3, [r4, #12]
 8004102:	60a3      	str	r3, [r4, #8]
 8004104:	7013      	strb	r3, [r2, #0]
 8004106:	65a3      	str	r3, [r4, #88]	; 0x58
 8004108:	4b55      	ldr	r3, [pc, #340]	; (8004260 <_svfiprintf_r+0x1ec>)
 800410a:	2205      	movs	r2, #5
 800410c:	0018      	movs	r0, r3
 800410e:	7831      	ldrb	r1, [r6, #0]
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	f000 fa55 	bl	80045c0 <memchr>
 8004116:	1c75      	adds	r5, r6, #1
 8004118:	2800      	cmp	r0, #0
 800411a:	d11f      	bne.n	800415c <_svfiprintf_r+0xe8>
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	06d3      	lsls	r3, r2, #27
 8004120:	d504      	bpl.n	800412c <_svfiprintf_r+0xb8>
 8004122:	2353      	movs	r3, #83	; 0x53
 8004124:	a904      	add	r1, sp, #16
 8004126:	185b      	adds	r3, r3, r1
 8004128:	2120      	movs	r1, #32
 800412a:	7019      	strb	r1, [r3, #0]
 800412c:	0713      	lsls	r3, r2, #28
 800412e:	d504      	bpl.n	800413a <_svfiprintf_r+0xc6>
 8004130:	2353      	movs	r3, #83	; 0x53
 8004132:	a904      	add	r1, sp, #16
 8004134:	185b      	adds	r3, r3, r1
 8004136:	212b      	movs	r1, #43	; 0x2b
 8004138:	7019      	strb	r1, [r3, #0]
 800413a:	7833      	ldrb	r3, [r6, #0]
 800413c:	2b2a      	cmp	r3, #42	; 0x2a
 800413e:	d016      	beq.n	800416e <_svfiprintf_r+0xfa>
 8004140:	0035      	movs	r5, r6
 8004142:	2100      	movs	r1, #0
 8004144:	200a      	movs	r0, #10
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	782a      	ldrb	r2, [r5, #0]
 800414a:	1c6e      	adds	r6, r5, #1
 800414c:	3a30      	subs	r2, #48	; 0x30
 800414e:	2a09      	cmp	r2, #9
 8004150:	d94e      	bls.n	80041f0 <_svfiprintf_r+0x17c>
 8004152:	2900      	cmp	r1, #0
 8004154:	d111      	bne.n	800417a <_svfiprintf_r+0x106>
 8004156:	e017      	b.n	8004188 <_svfiprintf_r+0x114>
 8004158:	3501      	adds	r5, #1
 800415a:	e7af      	b.n	80040bc <_svfiprintf_r+0x48>
 800415c:	9b05      	ldr	r3, [sp, #20]
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	1ac0      	subs	r0, r0, r3
 8004162:	2301      	movs	r3, #1
 8004164:	4083      	lsls	r3, r0
 8004166:	4313      	orrs	r3, r2
 8004168:	002e      	movs	r6, r5
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	e7cc      	b.n	8004108 <_svfiprintf_r+0x94>
 800416e:	9b07      	ldr	r3, [sp, #28]
 8004170:	1d19      	adds	r1, r3, #4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	9107      	str	r1, [sp, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	db01      	blt.n	800417e <_svfiprintf_r+0x10a>
 800417a:	930b      	str	r3, [sp, #44]	; 0x2c
 800417c:	e004      	b.n	8004188 <_svfiprintf_r+0x114>
 800417e:	425b      	negs	r3, r3
 8004180:	60e3      	str	r3, [r4, #12]
 8004182:	2302      	movs	r3, #2
 8004184:	4313      	orrs	r3, r2
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	782b      	ldrb	r3, [r5, #0]
 800418a:	2b2e      	cmp	r3, #46	; 0x2e
 800418c:	d10a      	bne.n	80041a4 <_svfiprintf_r+0x130>
 800418e:	786b      	ldrb	r3, [r5, #1]
 8004190:	2b2a      	cmp	r3, #42	; 0x2a
 8004192:	d135      	bne.n	8004200 <_svfiprintf_r+0x18c>
 8004194:	9b07      	ldr	r3, [sp, #28]
 8004196:	3502      	adds	r5, #2
 8004198:	1d1a      	adds	r2, r3, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	9207      	str	r2, [sp, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db2b      	blt.n	80041fa <_svfiprintf_r+0x186>
 80041a2:	9309      	str	r3, [sp, #36]	; 0x24
 80041a4:	4e2f      	ldr	r6, [pc, #188]	; (8004264 <_svfiprintf_r+0x1f0>)
 80041a6:	2203      	movs	r2, #3
 80041a8:	0030      	movs	r0, r6
 80041aa:	7829      	ldrb	r1, [r5, #0]
 80041ac:	f000 fa08 	bl	80045c0 <memchr>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d006      	beq.n	80041c2 <_svfiprintf_r+0x14e>
 80041b4:	2340      	movs	r3, #64	; 0x40
 80041b6:	1b80      	subs	r0, r0, r6
 80041b8:	4083      	lsls	r3, r0
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	3501      	adds	r5, #1
 80041be:	4313      	orrs	r3, r2
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	7829      	ldrb	r1, [r5, #0]
 80041c4:	2206      	movs	r2, #6
 80041c6:	4828      	ldr	r0, [pc, #160]	; (8004268 <_svfiprintf_r+0x1f4>)
 80041c8:	1c6e      	adds	r6, r5, #1
 80041ca:	7621      	strb	r1, [r4, #24]
 80041cc:	f000 f9f8 	bl	80045c0 <memchr>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d03c      	beq.n	800424e <_svfiprintf_r+0x1da>
 80041d4:	4b25      	ldr	r3, [pc, #148]	; (800426c <_svfiprintf_r+0x1f8>)
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d125      	bne.n	8004226 <_svfiprintf_r+0x1b2>
 80041da:	2207      	movs	r2, #7
 80041dc:	9b07      	ldr	r3, [sp, #28]
 80041de:	3307      	adds	r3, #7
 80041e0:	4393      	bics	r3, r2
 80041e2:	3308      	adds	r3, #8
 80041e4:	9307      	str	r3, [sp, #28]
 80041e6:	6963      	ldr	r3, [r4, #20]
 80041e8:	9a04      	ldr	r2, [sp, #16]
 80041ea:	189b      	adds	r3, r3, r2
 80041ec:	6163      	str	r3, [r4, #20]
 80041ee:	e764      	b.n	80040ba <_svfiprintf_r+0x46>
 80041f0:	4343      	muls	r3, r0
 80041f2:	0035      	movs	r5, r6
 80041f4:	2101      	movs	r1, #1
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	e7a6      	b.n	8004148 <_svfiprintf_r+0xd4>
 80041fa:	2301      	movs	r3, #1
 80041fc:	425b      	negs	r3, r3
 80041fe:	e7d0      	b.n	80041a2 <_svfiprintf_r+0x12e>
 8004200:	2300      	movs	r3, #0
 8004202:	200a      	movs	r0, #10
 8004204:	001a      	movs	r2, r3
 8004206:	3501      	adds	r5, #1
 8004208:	6063      	str	r3, [r4, #4]
 800420a:	7829      	ldrb	r1, [r5, #0]
 800420c:	1c6e      	adds	r6, r5, #1
 800420e:	3930      	subs	r1, #48	; 0x30
 8004210:	2909      	cmp	r1, #9
 8004212:	d903      	bls.n	800421c <_svfiprintf_r+0x1a8>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0c5      	beq.n	80041a4 <_svfiprintf_r+0x130>
 8004218:	9209      	str	r2, [sp, #36]	; 0x24
 800421a:	e7c3      	b.n	80041a4 <_svfiprintf_r+0x130>
 800421c:	4342      	muls	r2, r0
 800421e:	0035      	movs	r5, r6
 8004220:	2301      	movs	r3, #1
 8004222:	1852      	adds	r2, r2, r1
 8004224:	e7f1      	b.n	800420a <_svfiprintf_r+0x196>
 8004226:	aa07      	add	r2, sp, #28
 8004228:	9200      	str	r2, [sp, #0]
 800422a:	0021      	movs	r1, r4
 800422c:	003a      	movs	r2, r7
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <_svfiprintf_r+0x1fc>)
 8004230:	9803      	ldr	r0, [sp, #12]
 8004232:	e000      	b.n	8004236 <_svfiprintf_r+0x1c2>
 8004234:	bf00      	nop
 8004236:	9004      	str	r0, [sp, #16]
 8004238:	9b04      	ldr	r3, [sp, #16]
 800423a:	3301      	adds	r3, #1
 800423c:	d1d3      	bne.n	80041e6 <_svfiprintf_r+0x172>
 800423e:	89bb      	ldrh	r3, [r7, #12]
 8004240:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004242:	065b      	lsls	r3, r3, #25
 8004244:	d400      	bmi.n	8004248 <_svfiprintf_r+0x1d4>
 8004246:	e72c      	b.n	80040a2 <_svfiprintf_r+0x2e>
 8004248:	2001      	movs	r0, #1
 800424a:	4240      	negs	r0, r0
 800424c:	e729      	b.n	80040a2 <_svfiprintf_r+0x2e>
 800424e:	aa07      	add	r2, sp, #28
 8004250:	9200      	str	r2, [sp, #0]
 8004252:	0021      	movs	r1, r4
 8004254:	003a      	movs	r2, r7
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <_svfiprintf_r+0x1fc>)
 8004258:	9803      	ldr	r0, [sp, #12]
 800425a:	f000 f87b 	bl	8004354 <_printf_i>
 800425e:	e7ea      	b.n	8004236 <_svfiprintf_r+0x1c2>
 8004260:	08004768 	.word	0x08004768
 8004264:	0800476e 	.word	0x0800476e
 8004268:	08004772 	.word	0x08004772
 800426c:	00000000 	.word	0x00000000
 8004270:	08003fb1 	.word	0x08003fb1

08004274 <_printf_common>:
 8004274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004276:	0016      	movs	r6, r2
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	688a      	ldr	r2, [r1, #8]
 800427c:	690b      	ldr	r3, [r1, #16]
 800427e:	000c      	movs	r4, r1
 8004280:	9000      	str	r0, [sp, #0]
 8004282:	4293      	cmp	r3, r2
 8004284:	da00      	bge.n	8004288 <_printf_common+0x14>
 8004286:	0013      	movs	r3, r2
 8004288:	0022      	movs	r2, r4
 800428a:	6033      	str	r3, [r6, #0]
 800428c:	3243      	adds	r2, #67	; 0x43
 800428e:	7812      	ldrb	r2, [r2, #0]
 8004290:	2a00      	cmp	r2, #0
 8004292:	d001      	beq.n	8004298 <_printf_common+0x24>
 8004294:	3301      	adds	r3, #1
 8004296:	6033      	str	r3, [r6, #0]
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	069b      	lsls	r3, r3, #26
 800429c:	d502      	bpl.n	80042a4 <_printf_common+0x30>
 800429e:	6833      	ldr	r3, [r6, #0]
 80042a0:	3302      	adds	r3, #2
 80042a2:	6033      	str	r3, [r6, #0]
 80042a4:	6822      	ldr	r2, [r4, #0]
 80042a6:	2306      	movs	r3, #6
 80042a8:	0015      	movs	r5, r2
 80042aa:	401d      	ands	r5, r3
 80042ac:	421a      	tst	r2, r3
 80042ae:	d027      	beq.n	8004300 <_printf_common+0x8c>
 80042b0:	0023      	movs	r3, r4
 80042b2:	3343      	adds	r3, #67	; 0x43
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	1e5a      	subs	r2, r3, #1
 80042b8:	4193      	sbcs	r3, r2
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	0692      	lsls	r2, r2, #26
 80042be:	d430      	bmi.n	8004322 <_printf_common+0xae>
 80042c0:	0022      	movs	r2, r4
 80042c2:	9901      	ldr	r1, [sp, #4]
 80042c4:	9800      	ldr	r0, [sp, #0]
 80042c6:	9d08      	ldr	r5, [sp, #32]
 80042c8:	3243      	adds	r2, #67	; 0x43
 80042ca:	47a8      	blx	r5
 80042cc:	3001      	adds	r0, #1
 80042ce:	d025      	beq.n	800431c <_printf_common+0xa8>
 80042d0:	2206      	movs	r2, #6
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	2500      	movs	r5, #0
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d105      	bne.n	80042e8 <_printf_common+0x74>
 80042dc:	6833      	ldr	r3, [r6, #0]
 80042de:	68e5      	ldr	r5, [r4, #12]
 80042e0:	1aed      	subs	r5, r5, r3
 80042e2:	43eb      	mvns	r3, r5
 80042e4:	17db      	asrs	r3, r3, #31
 80042e6:	401d      	ands	r5, r3
 80042e8:	68a3      	ldr	r3, [r4, #8]
 80042ea:	6922      	ldr	r2, [r4, #16]
 80042ec:	4293      	cmp	r3, r2
 80042ee:	dd01      	ble.n	80042f4 <_printf_common+0x80>
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	18ed      	adds	r5, r5, r3
 80042f4:	2600      	movs	r6, #0
 80042f6:	42b5      	cmp	r5, r6
 80042f8:	d120      	bne.n	800433c <_printf_common+0xc8>
 80042fa:	2000      	movs	r0, #0
 80042fc:	e010      	b.n	8004320 <_printf_common+0xac>
 80042fe:	3501      	adds	r5, #1
 8004300:	68e3      	ldr	r3, [r4, #12]
 8004302:	6832      	ldr	r2, [r6, #0]
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	42ab      	cmp	r3, r5
 8004308:	ddd2      	ble.n	80042b0 <_printf_common+0x3c>
 800430a:	0022      	movs	r2, r4
 800430c:	2301      	movs	r3, #1
 800430e:	9901      	ldr	r1, [sp, #4]
 8004310:	9800      	ldr	r0, [sp, #0]
 8004312:	9f08      	ldr	r7, [sp, #32]
 8004314:	3219      	adds	r2, #25
 8004316:	47b8      	blx	r7
 8004318:	3001      	adds	r0, #1
 800431a:	d1f0      	bne.n	80042fe <_printf_common+0x8a>
 800431c:	2001      	movs	r0, #1
 800431e:	4240      	negs	r0, r0
 8004320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004322:	2030      	movs	r0, #48	; 0x30
 8004324:	18e1      	adds	r1, r4, r3
 8004326:	3143      	adds	r1, #67	; 0x43
 8004328:	7008      	strb	r0, [r1, #0]
 800432a:	0021      	movs	r1, r4
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	3145      	adds	r1, #69	; 0x45
 8004330:	7809      	ldrb	r1, [r1, #0]
 8004332:	18a2      	adds	r2, r4, r2
 8004334:	3243      	adds	r2, #67	; 0x43
 8004336:	3302      	adds	r3, #2
 8004338:	7011      	strb	r1, [r2, #0]
 800433a:	e7c1      	b.n	80042c0 <_printf_common+0x4c>
 800433c:	0022      	movs	r2, r4
 800433e:	2301      	movs	r3, #1
 8004340:	9901      	ldr	r1, [sp, #4]
 8004342:	9800      	ldr	r0, [sp, #0]
 8004344:	9f08      	ldr	r7, [sp, #32]
 8004346:	321a      	adds	r2, #26
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	d0e6      	beq.n	800431c <_printf_common+0xa8>
 800434e:	3601      	adds	r6, #1
 8004350:	e7d1      	b.n	80042f6 <_printf_common+0x82>
	...

08004354 <_printf_i>:
 8004354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004356:	b08b      	sub	sp, #44	; 0x2c
 8004358:	9206      	str	r2, [sp, #24]
 800435a:	000a      	movs	r2, r1
 800435c:	3243      	adds	r2, #67	; 0x43
 800435e:	9307      	str	r3, [sp, #28]
 8004360:	9005      	str	r0, [sp, #20]
 8004362:	9204      	str	r2, [sp, #16]
 8004364:	7e0a      	ldrb	r2, [r1, #24]
 8004366:	000c      	movs	r4, r1
 8004368:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800436a:	2a78      	cmp	r2, #120	; 0x78
 800436c:	d809      	bhi.n	8004382 <_printf_i+0x2e>
 800436e:	2a62      	cmp	r2, #98	; 0x62
 8004370:	d80b      	bhi.n	800438a <_printf_i+0x36>
 8004372:	2a00      	cmp	r2, #0
 8004374:	d100      	bne.n	8004378 <_printf_i+0x24>
 8004376:	e0be      	b.n	80044f6 <_printf_i+0x1a2>
 8004378:	497c      	ldr	r1, [pc, #496]	; (800456c <_printf_i+0x218>)
 800437a:	9103      	str	r1, [sp, #12]
 800437c:	2a58      	cmp	r2, #88	; 0x58
 800437e:	d100      	bne.n	8004382 <_printf_i+0x2e>
 8004380:	e093      	b.n	80044aa <_printf_i+0x156>
 8004382:	0026      	movs	r6, r4
 8004384:	3642      	adds	r6, #66	; 0x42
 8004386:	7032      	strb	r2, [r6, #0]
 8004388:	e022      	b.n	80043d0 <_printf_i+0x7c>
 800438a:	0010      	movs	r0, r2
 800438c:	3863      	subs	r0, #99	; 0x63
 800438e:	2815      	cmp	r0, #21
 8004390:	d8f7      	bhi.n	8004382 <_printf_i+0x2e>
 8004392:	f7fb febf 	bl	8000114 <__gnu_thumb1_case_shi>
 8004396:	0016      	.short	0x0016
 8004398:	fff6001f 	.word	0xfff6001f
 800439c:	fff6fff6 	.word	0xfff6fff6
 80043a0:	001ffff6 	.word	0x001ffff6
 80043a4:	fff6fff6 	.word	0xfff6fff6
 80043a8:	fff6fff6 	.word	0xfff6fff6
 80043ac:	003600a3 	.word	0x003600a3
 80043b0:	fff60083 	.word	0xfff60083
 80043b4:	00b4fff6 	.word	0x00b4fff6
 80043b8:	0036fff6 	.word	0x0036fff6
 80043bc:	fff6fff6 	.word	0xfff6fff6
 80043c0:	0087      	.short	0x0087
 80043c2:	0026      	movs	r6, r4
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	3642      	adds	r6, #66	; 0x42
 80043c8:	1d11      	adds	r1, r2, #4
 80043ca:	6019      	str	r1, [r3, #0]
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	7033      	strb	r3, [r6, #0]
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0a2      	b.n	800451a <_printf_i+0x1c6>
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	6809      	ldr	r1, [r1, #0]
 80043d8:	1d02      	adds	r2, r0, #4
 80043da:	060d      	lsls	r5, r1, #24
 80043dc:	d50b      	bpl.n	80043f6 <_printf_i+0xa2>
 80043de:	6805      	ldr	r5, [r0, #0]
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	2d00      	cmp	r5, #0
 80043e4:	da03      	bge.n	80043ee <_printf_i+0x9a>
 80043e6:	232d      	movs	r3, #45	; 0x2d
 80043e8:	9a04      	ldr	r2, [sp, #16]
 80043ea:	426d      	negs	r5, r5
 80043ec:	7013      	strb	r3, [r2, #0]
 80043ee:	4b5f      	ldr	r3, [pc, #380]	; (800456c <_printf_i+0x218>)
 80043f0:	270a      	movs	r7, #10
 80043f2:	9303      	str	r3, [sp, #12]
 80043f4:	e01b      	b.n	800442e <_printf_i+0xda>
 80043f6:	6805      	ldr	r5, [r0, #0]
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	0649      	lsls	r1, r1, #25
 80043fc:	d5f1      	bpl.n	80043e2 <_printf_i+0x8e>
 80043fe:	b22d      	sxth	r5, r5
 8004400:	e7ef      	b.n	80043e2 <_printf_i+0x8e>
 8004402:	680d      	ldr	r5, [r1, #0]
 8004404:	6819      	ldr	r1, [r3, #0]
 8004406:	1d08      	adds	r0, r1, #4
 8004408:	6018      	str	r0, [r3, #0]
 800440a:	062e      	lsls	r6, r5, #24
 800440c:	d501      	bpl.n	8004412 <_printf_i+0xbe>
 800440e:	680d      	ldr	r5, [r1, #0]
 8004410:	e003      	b.n	800441a <_printf_i+0xc6>
 8004412:	066d      	lsls	r5, r5, #25
 8004414:	d5fb      	bpl.n	800440e <_printf_i+0xba>
 8004416:	680d      	ldr	r5, [r1, #0]
 8004418:	b2ad      	uxth	r5, r5
 800441a:	4b54      	ldr	r3, [pc, #336]	; (800456c <_printf_i+0x218>)
 800441c:	2708      	movs	r7, #8
 800441e:	9303      	str	r3, [sp, #12]
 8004420:	2a6f      	cmp	r2, #111	; 0x6f
 8004422:	d000      	beq.n	8004426 <_printf_i+0xd2>
 8004424:	3702      	adds	r7, #2
 8004426:	0023      	movs	r3, r4
 8004428:	2200      	movs	r2, #0
 800442a:	3343      	adds	r3, #67	; 0x43
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	6863      	ldr	r3, [r4, #4]
 8004430:	60a3      	str	r3, [r4, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	db03      	blt.n	800443e <_printf_i+0xea>
 8004436:	2104      	movs	r1, #4
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	438a      	bics	r2, r1
 800443c:	6022      	str	r2, [r4, #0]
 800443e:	2d00      	cmp	r5, #0
 8004440:	d102      	bne.n	8004448 <_printf_i+0xf4>
 8004442:	9e04      	ldr	r6, [sp, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <_printf_i+0x10e>
 8004448:	9e04      	ldr	r6, [sp, #16]
 800444a:	0028      	movs	r0, r5
 800444c:	0039      	movs	r1, r7
 800444e:	f7fb fef1 	bl	8000234 <__aeabi_uidivmod>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	3e01      	subs	r6, #1
 8004456:	5c5b      	ldrb	r3, [r3, r1]
 8004458:	7033      	strb	r3, [r6, #0]
 800445a:	002b      	movs	r3, r5
 800445c:	0005      	movs	r5, r0
 800445e:	429f      	cmp	r7, r3
 8004460:	d9f3      	bls.n	800444a <_printf_i+0xf6>
 8004462:	2f08      	cmp	r7, #8
 8004464:	d109      	bne.n	800447a <_printf_i+0x126>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	07db      	lsls	r3, r3, #31
 800446a:	d506      	bpl.n	800447a <_printf_i+0x126>
 800446c:	6862      	ldr	r2, [r4, #4]
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	429a      	cmp	r2, r3
 8004472:	dc02      	bgt.n	800447a <_printf_i+0x126>
 8004474:	2330      	movs	r3, #48	; 0x30
 8004476:	3e01      	subs	r6, #1
 8004478:	7033      	strb	r3, [r6, #0]
 800447a:	9b04      	ldr	r3, [sp, #16]
 800447c:	1b9b      	subs	r3, r3, r6
 800447e:	6123      	str	r3, [r4, #16]
 8004480:	9b07      	ldr	r3, [sp, #28]
 8004482:	0021      	movs	r1, r4
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	9805      	ldr	r0, [sp, #20]
 8004488:	9b06      	ldr	r3, [sp, #24]
 800448a:	aa09      	add	r2, sp, #36	; 0x24
 800448c:	f7ff fef2 	bl	8004274 <_printf_common>
 8004490:	3001      	adds	r0, #1
 8004492:	d147      	bne.n	8004524 <_printf_i+0x1d0>
 8004494:	2001      	movs	r0, #1
 8004496:	4240      	negs	r0, r0
 8004498:	b00b      	add	sp, #44	; 0x2c
 800449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449c:	2220      	movs	r2, #32
 800449e:	6809      	ldr	r1, [r1, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	6022      	str	r2, [r4, #0]
 80044a4:	2278      	movs	r2, #120	; 0x78
 80044a6:	4932      	ldr	r1, [pc, #200]	; (8004570 <_printf_i+0x21c>)
 80044a8:	9103      	str	r1, [sp, #12]
 80044aa:	0021      	movs	r1, r4
 80044ac:	3145      	adds	r1, #69	; 0x45
 80044ae:	700a      	strb	r2, [r1, #0]
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	c920      	ldmia	r1!, {r5}
 80044b6:	0610      	lsls	r0, r2, #24
 80044b8:	d402      	bmi.n	80044c0 <_printf_i+0x16c>
 80044ba:	0650      	lsls	r0, r2, #25
 80044bc:	d500      	bpl.n	80044c0 <_printf_i+0x16c>
 80044be:	b2ad      	uxth	r5, r5
 80044c0:	6019      	str	r1, [r3, #0]
 80044c2:	07d3      	lsls	r3, r2, #31
 80044c4:	d502      	bpl.n	80044cc <_printf_i+0x178>
 80044c6:	2320      	movs	r3, #32
 80044c8:	4313      	orrs	r3, r2
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	2710      	movs	r7, #16
 80044ce:	2d00      	cmp	r5, #0
 80044d0:	d1a9      	bne.n	8004426 <_printf_i+0xd2>
 80044d2:	2220      	movs	r2, #32
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	4393      	bics	r3, r2
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	e7a4      	b.n	8004426 <_printf_i+0xd2>
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	680d      	ldr	r5, [r1, #0]
 80044e0:	1d10      	adds	r0, r2, #4
 80044e2:	6949      	ldr	r1, [r1, #20]
 80044e4:	6018      	str	r0, [r3, #0]
 80044e6:	6813      	ldr	r3, [r2, #0]
 80044e8:	062e      	lsls	r6, r5, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0x19c>
 80044ec:	6019      	str	r1, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <_printf_i+0x1a2>
 80044f0:	066d      	lsls	r5, r5, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0x198>
 80044f4:	8019      	strh	r1, [r3, #0]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9e04      	ldr	r6, [sp, #16]
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	e7c0      	b.n	8004480 <_printf_i+0x12c>
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	1d11      	adds	r1, r2, #4
 8004502:	6019      	str	r1, [r3, #0]
 8004504:	6816      	ldr	r6, [r2, #0]
 8004506:	2100      	movs	r1, #0
 8004508:	0030      	movs	r0, r6
 800450a:	6862      	ldr	r2, [r4, #4]
 800450c:	f000 f858 	bl	80045c0 <memchr>
 8004510:	2800      	cmp	r0, #0
 8004512:	d001      	beq.n	8004518 <_printf_i+0x1c4>
 8004514:	1b80      	subs	r0, r0, r6
 8004516:	6060      	str	r0, [r4, #4]
 8004518:	6863      	ldr	r3, [r4, #4]
 800451a:	6123      	str	r3, [r4, #16]
 800451c:	2300      	movs	r3, #0
 800451e:	9a04      	ldr	r2, [sp, #16]
 8004520:	7013      	strb	r3, [r2, #0]
 8004522:	e7ad      	b.n	8004480 <_printf_i+0x12c>
 8004524:	0032      	movs	r2, r6
 8004526:	6923      	ldr	r3, [r4, #16]
 8004528:	9906      	ldr	r1, [sp, #24]
 800452a:	9805      	ldr	r0, [sp, #20]
 800452c:	9d07      	ldr	r5, [sp, #28]
 800452e:	47a8      	blx	r5
 8004530:	3001      	adds	r0, #1
 8004532:	d0af      	beq.n	8004494 <_printf_i+0x140>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	079b      	lsls	r3, r3, #30
 8004538:	d415      	bmi.n	8004566 <_printf_i+0x212>
 800453a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800453c:	68e0      	ldr	r0, [r4, #12]
 800453e:	4298      	cmp	r0, r3
 8004540:	daaa      	bge.n	8004498 <_printf_i+0x144>
 8004542:	0018      	movs	r0, r3
 8004544:	e7a8      	b.n	8004498 <_printf_i+0x144>
 8004546:	0022      	movs	r2, r4
 8004548:	2301      	movs	r3, #1
 800454a:	9906      	ldr	r1, [sp, #24]
 800454c:	9805      	ldr	r0, [sp, #20]
 800454e:	9e07      	ldr	r6, [sp, #28]
 8004550:	3219      	adds	r2, #25
 8004552:	47b0      	blx	r6
 8004554:	3001      	adds	r0, #1
 8004556:	d09d      	beq.n	8004494 <_printf_i+0x140>
 8004558:	3501      	adds	r5, #1
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	42ab      	cmp	r3, r5
 8004562:	dcf0      	bgt.n	8004546 <_printf_i+0x1f2>
 8004564:	e7e9      	b.n	800453a <_printf_i+0x1e6>
 8004566:	2500      	movs	r5, #0
 8004568:	e7f7      	b.n	800455a <_printf_i+0x206>
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	08004779 	.word	0x08004779
 8004570:	0800478a 	.word	0x0800478a

08004574 <memmove>:
 8004574:	b510      	push	{r4, lr}
 8004576:	4288      	cmp	r0, r1
 8004578:	d902      	bls.n	8004580 <memmove+0xc>
 800457a:	188b      	adds	r3, r1, r2
 800457c:	4298      	cmp	r0, r3
 800457e:	d303      	bcc.n	8004588 <memmove+0x14>
 8004580:	2300      	movs	r3, #0
 8004582:	e007      	b.n	8004594 <memmove+0x20>
 8004584:	5c8b      	ldrb	r3, [r1, r2]
 8004586:	5483      	strb	r3, [r0, r2]
 8004588:	3a01      	subs	r2, #1
 800458a:	d2fb      	bcs.n	8004584 <memmove+0x10>
 800458c:	bd10      	pop	{r4, pc}
 800458e:	5ccc      	ldrb	r4, [r1, r3]
 8004590:	54c4      	strb	r4, [r0, r3]
 8004592:	3301      	adds	r3, #1
 8004594:	429a      	cmp	r2, r3
 8004596:	d1fa      	bne.n	800458e <memmove+0x1a>
 8004598:	e7f8      	b.n	800458c <memmove+0x18>
	...

0800459c <_sbrk_r>:
 800459c:	2300      	movs	r3, #0
 800459e:	b570      	push	{r4, r5, r6, lr}
 80045a0:	4d06      	ldr	r5, [pc, #24]	; (80045bc <_sbrk_r+0x20>)
 80045a2:	0004      	movs	r4, r0
 80045a4:	0008      	movs	r0, r1
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f7fc fc06 	bl	8000db8 <_sbrk>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d103      	bne.n	80045b8 <_sbrk_r+0x1c>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d000      	beq.n	80045b8 <_sbrk_r+0x1c>
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	200002d8 	.word	0x200002d8

080045c0 <memchr>:
 80045c0:	b2c9      	uxtb	r1, r1
 80045c2:	1882      	adds	r2, r0, r2
 80045c4:	4290      	cmp	r0, r2
 80045c6:	d101      	bne.n	80045cc <memchr+0xc>
 80045c8:	2000      	movs	r0, #0
 80045ca:	4770      	bx	lr
 80045cc:	7803      	ldrb	r3, [r0, #0]
 80045ce:	428b      	cmp	r3, r1
 80045d0:	d0fb      	beq.n	80045ca <memchr+0xa>
 80045d2:	3001      	adds	r0, #1
 80045d4:	e7f6      	b.n	80045c4 <memchr+0x4>

080045d6 <memcpy>:
 80045d6:	2300      	movs	r3, #0
 80045d8:	b510      	push	{r4, lr}
 80045da:	429a      	cmp	r2, r3
 80045dc:	d100      	bne.n	80045e0 <memcpy+0xa>
 80045de:	bd10      	pop	{r4, pc}
 80045e0:	5ccc      	ldrb	r4, [r1, r3]
 80045e2:	54c4      	strb	r4, [r0, r3]
 80045e4:	3301      	adds	r3, #1
 80045e6:	e7f8      	b.n	80045da <memcpy+0x4>

080045e8 <_realloc_r>:
 80045e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ea:	0007      	movs	r7, r0
 80045ec:	000e      	movs	r6, r1
 80045ee:	0014      	movs	r4, r2
 80045f0:	2900      	cmp	r1, #0
 80045f2:	d105      	bne.n	8004600 <_realloc_r+0x18>
 80045f4:	0011      	movs	r1, r2
 80045f6:	f7ff fc49 	bl	8003e8c <_malloc_r>
 80045fa:	0005      	movs	r5, r0
 80045fc:	0028      	movs	r0, r5
 80045fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004600:	2a00      	cmp	r2, #0
 8004602:	d103      	bne.n	800460c <_realloc_r+0x24>
 8004604:	f7ff fbd6 	bl	8003db4 <_free_r>
 8004608:	0025      	movs	r5, r4
 800460a:	e7f7      	b.n	80045fc <_realloc_r+0x14>
 800460c:	f000 f81b 	bl	8004646 <_malloc_usable_size_r>
 8004610:	9001      	str	r0, [sp, #4]
 8004612:	4284      	cmp	r4, r0
 8004614:	d803      	bhi.n	800461e <_realloc_r+0x36>
 8004616:	0035      	movs	r5, r6
 8004618:	0843      	lsrs	r3, r0, #1
 800461a:	42a3      	cmp	r3, r4
 800461c:	d3ee      	bcc.n	80045fc <_realloc_r+0x14>
 800461e:	0021      	movs	r1, r4
 8004620:	0038      	movs	r0, r7
 8004622:	f7ff fc33 	bl	8003e8c <_malloc_r>
 8004626:	1e05      	subs	r5, r0, #0
 8004628:	d0e8      	beq.n	80045fc <_realloc_r+0x14>
 800462a:	9b01      	ldr	r3, [sp, #4]
 800462c:	0022      	movs	r2, r4
 800462e:	429c      	cmp	r4, r3
 8004630:	d900      	bls.n	8004634 <_realloc_r+0x4c>
 8004632:	001a      	movs	r2, r3
 8004634:	0031      	movs	r1, r6
 8004636:	0028      	movs	r0, r5
 8004638:	f7ff ffcd 	bl	80045d6 <memcpy>
 800463c:	0031      	movs	r1, r6
 800463e:	0038      	movs	r0, r7
 8004640:	f7ff fbb8 	bl	8003db4 <_free_r>
 8004644:	e7da      	b.n	80045fc <_realloc_r+0x14>

08004646 <_malloc_usable_size_r>:
 8004646:	1f0b      	subs	r3, r1, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1f18      	subs	r0, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	da01      	bge.n	8004654 <_malloc_usable_size_r+0xe>
 8004650:	580b      	ldr	r3, [r1, r0]
 8004652:	18c0      	adds	r0, r0, r3
 8004654:	4770      	bx	lr
	...

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
