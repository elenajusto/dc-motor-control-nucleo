
dc-motor-control-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007178  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007238  08007238  00017238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b8  080073b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073c0  080073c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c4  080073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080073c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000070  08007438  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08007438  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e74b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000215a  00000000  00000000  0002e826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  00030980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008fc  00000000  00000000  00031500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018515  00000000  00000000  00031dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001015f  00000000  00000000  0004a311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099b90  00000000  00000000  0005a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f50  00000000  00000000  000f4000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f6f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800721c 	.word	0x0800721c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800721c 	.word	0x0800721c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 f99f 	bl	8001744 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 f8ef 	bl	80015f4 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 f991 	bl	8001744 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f987 	bl	8001744 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f917 	bl	8001678 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f90d 	bl	8001678 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_uldivmod>:
 800046c:	2b00      	cmp	r3, #0
 800046e:	d111      	bne.n	8000494 <__aeabi_uldivmod+0x28>
 8000470:	2a00      	cmp	r2, #0
 8000472:	d10f      	bne.n	8000494 <__aeabi_uldivmod+0x28>
 8000474:	2900      	cmp	r1, #0
 8000476:	d100      	bne.n	800047a <__aeabi_uldivmod+0xe>
 8000478:	2800      	cmp	r0, #0
 800047a:	d002      	beq.n	8000482 <__aeabi_uldivmod+0x16>
 800047c:	2100      	movs	r1, #0
 800047e:	43c9      	mvns	r1, r1
 8000480:	0008      	movs	r0, r1
 8000482:	b407      	push	{r0, r1, r2}
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <__aeabi_uldivmod+0x24>)
 8000486:	a102      	add	r1, pc, #8	; (adr r1, 8000490 <__aeabi_uldivmod+0x24>)
 8000488:	1840      	adds	r0, r0, r1
 800048a:	9002      	str	r0, [sp, #8]
 800048c:	bd03      	pop	{r0, r1, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	ffffff5d 	.word	0xffffff5d
 8000494:	b403      	push	{r0, r1}
 8000496:	4668      	mov	r0, sp
 8000498:	b501      	push	{r0, lr}
 800049a:	9802      	ldr	r0, [sp, #8]
 800049c:	f000 f824 	bl	80004e8 <__udivmoddi4>
 80004a0:	9b01      	ldr	r3, [sp, #4]
 80004a2:	469e      	mov	lr, r3
 80004a4:	b002      	add	sp, #8
 80004a6:	bc0c      	pop	{r2, r3}
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_d2uiz>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	2200      	movs	r2, #0
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <__aeabi_d2uiz+0x38>)
 80004b2:	0004      	movs	r4, r0
 80004b4:	000d      	movs	r5, r1
 80004b6:	f7ff ffcf 	bl	8000458 <__aeabi_dcmpge>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d104      	bne.n	80004c8 <__aeabi_d2uiz+0x1c>
 80004be:	0020      	movs	r0, r4
 80004c0:	0029      	movs	r1, r5
 80004c2:	f002 f805 	bl	80024d0 <__aeabi_d2iz>
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <__aeabi_d2uiz+0x38>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	0020      	movs	r0, r4
 80004ce:	0029      	movs	r1, r5
 80004d0:	f001 fc5e 	bl	8001d90 <__aeabi_dsub>
 80004d4:	f001 fffc 	bl	80024d0 <__aeabi_d2iz>
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	061b      	lsls	r3, r3, #24
 80004dc:	469c      	mov	ip, r3
 80004de:	4460      	add	r0, ip
 80004e0:	e7f1      	b.n	80004c6 <__aeabi_d2uiz+0x1a>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	41e00000 	.word	0x41e00000

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 f95a 	bl	80027c0 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 f955 	bl	80027c0 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_fdiv>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	0245      	lsls	r5, r0, #9
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0047      	lsls	r7, r0, #1
 800068e:	1c0c      	adds	r4, r1, #0
 8000690:	0a6d      	lsrs	r5, r5, #9
 8000692:	0e3f      	lsrs	r7, r7, #24
 8000694:	0fc6      	lsrs	r6, r0, #31
 8000696:	2f00      	cmp	r7, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fdiv+0x1c>
 800069a:	e06f      	b.n	800077c <__aeabi_fdiv+0xfc>
 800069c:	2fff      	cmp	r7, #255	; 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fdiv+0x22>
 80006a0:	e074      	b.n	800078c <__aeabi_fdiv+0x10c>
 80006a2:	2300      	movs	r3, #0
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	4699      	mov	r9, r3
 80006a8:	469a      	mov	sl, r3
 80006aa:	00ed      	lsls	r5, r5, #3
 80006ac:	04d2      	lsls	r2, r2, #19
 80006ae:	4315      	orrs	r5, r2
 80006b0:	3f7f      	subs	r7, #127	; 0x7f
 80006b2:	0263      	lsls	r3, r4, #9
 80006b4:	0a5b      	lsrs	r3, r3, #9
 80006b6:	4698      	mov	r8, r3
 80006b8:	0063      	lsls	r3, r4, #1
 80006ba:	0e1b      	lsrs	r3, r3, #24
 80006bc:	0fe4      	lsrs	r4, r4, #31
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d04d      	beq.n	800075e <__aeabi_fdiv+0xde>
 80006c2:	2bff      	cmp	r3, #255	; 0xff
 80006c4:	d045      	beq.n	8000752 <__aeabi_fdiv+0xd2>
 80006c6:	4642      	mov	r2, r8
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	00d2      	lsls	r2, r2, #3
 80006cc:	04c9      	lsls	r1, r1, #19
 80006ce:	4311      	orrs	r1, r2
 80006d0:	4688      	mov	r8, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	3b7f      	subs	r3, #127	; 0x7f
 80006d6:	0031      	movs	r1, r6
 80006d8:	1aff      	subs	r7, r7, r3
 80006da:	464b      	mov	r3, r9
 80006dc:	4061      	eors	r1, r4
 80006de:	b2c9      	uxtb	r1, r1
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	d900      	bls.n	80006e6 <__aeabi_fdiv+0x66>
 80006e4:	e0b8      	b.n	8000858 <__aeabi_fdiv+0x1d8>
 80006e6:	4870      	ldr	r0, [pc, #448]	; (80008a8 <__aeabi_fdiv+0x228>)
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	58c3      	ldr	r3, [r0, r3]
 80006ec:	469f      	mov	pc, r3
 80006ee:	2300      	movs	r3, #0
 80006f0:	4698      	mov	r8, r3
 80006f2:	0026      	movs	r6, r4
 80006f4:	4645      	mov	r5, r8
 80006f6:	4692      	mov	sl, r2
 80006f8:	4653      	mov	r3, sl
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d100      	bne.n	8000700 <__aeabi_fdiv+0x80>
 80006fe:	e08d      	b.n	800081c <__aeabi_fdiv+0x19c>
 8000700:	2b03      	cmp	r3, #3
 8000702:	d100      	bne.n	8000706 <__aeabi_fdiv+0x86>
 8000704:	e0a1      	b.n	800084a <__aeabi_fdiv+0x1ca>
 8000706:	2b01      	cmp	r3, #1
 8000708:	d018      	beq.n	800073c <__aeabi_fdiv+0xbc>
 800070a:	003b      	movs	r3, r7
 800070c:	337f      	adds	r3, #127	; 0x7f
 800070e:	2b00      	cmp	r3, #0
 8000710:	dd6d      	ble.n	80007ee <__aeabi_fdiv+0x16e>
 8000712:	076a      	lsls	r2, r5, #29
 8000714:	d004      	beq.n	8000720 <__aeabi_fdiv+0xa0>
 8000716:	220f      	movs	r2, #15
 8000718:	402a      	ands	r2, r5
 800071a:	2a04      	cmp	r2, #4
 800071c:	d000      	beq.n	8000720 <__aeabi_fdiv+0xa0>
 800071e:	3504      	adds	r5, #4
 8000720:	012a      	lsls	r2, r5, #4
 8000722:	d503      	bpl.n	800072c <__aeabi_fdiv+0xac>
 8000724:	4b61      	ldr	r3, [pc, #388]	; (80008ac <__aeabi_fdiv+0x22c>)
 8000726:	401d      	ands	r5, r3
 8000728:	003b      	movs	r3, r7
 800072a:	3380      	adds	r3, #128	; 0x80
 800072c:	2bfe      	cmp	r3, #254	; 0xfe
 800072e:	dd00      	ble.n	8000732 <__aeabi_fdiv+0xb2>
 8000730:	e074      	b.n	800081c <__aeabi_fdiv+0x19c>
 8000732:	01aa      	lsls	r2, r5, #6
 8000734:	0a52      	lsrs	r2, r2, #9
 8000736:	b2d8      	uxtb	r0, r3
 8000738:	e002      	b.n	8000740 <__aeabi_fdiv+0xc0>
 800073a:	000e      	movs	r6, r1
 800073c:	2000      	movs	r0, #0
 800073e:	2200      	movs	r2, #0
 8000740:	05c0      	lsls	r0, r0, #23
 8000742:	07f6      	lsls	r6, r6, #31
 8000744:	4310      	orrs	r0, r2
 8000746:	4330      	orrs	r0, r6
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	4643      	mov	r3, r8
 8000754:	2b00      	cmp	r3, #0
 8000756:	d13f      	bne.n	80007d8 <__aeabi_fdiv+0x158>
 8000758:	2202      	movs	r2, #2
 800075a:	3fff      	subs	r7, #255	; 0xff
 800075c:	e003      	b.n	8000766 <__aeabi_fdiv+0xe6>
 800075e:	4643      	mov	r3, r8
 8000760:	2b00      	cmp	r3, #0
 8000762:	d12d      	bne.n	80007c0 <__aeabi_fdiv+0x140>
 8000764:	2201      	movs	r2, #1
 8000766:	0031      	movs	r1, r6
 8000768:	464b      	mov	r3, r9
 800076a:	4061      	eors	r1, r4
 800076c:	b2c9      	uxtb	r1, r1
 800076e:	4313      	orrs	r3, r2
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d838      	bhi.n	80007e6 <__aeabi_fdiv+0x166>
 8000774:	484e      	ldr	r0, [pc, #312]	; (80008b0 <__aeabi_fdiv+0x230>)
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	58c3      	ldr	r3, [r0, r3]
 800077a:	469f      	mov	pc, r3
 800077c:	2d00      	cmp	r5, #0
 800077e:	d113      	bne.n	80007a8 <__aeabi_fdiv+0x128>
 8000780:	2304      	movs	r3, #4
 8000782:	4699      	mov	r9, r3
 8000784:	3b03      	subs	r3, #3
 8000786:	2700      	movs	r7, #0
 8000788:	469a      	mov	sl, r3
 800078a:	e792      	b.n	80006b2 <__aeabi_fdiv+0x32>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d105      	bne.n	800079c <__aeabi_fdiv+0x11c>
 8000790:	2308      	movs	r3, #8
 8000792:	4699      	mov	r9, r3
 8000794:	3b06      	subs	r3, #6
 8000796:	27ff      	movs	r7, #255	; 0xff
 8000798:	469a      	mov	sl, r3
 800079a:	e78a      	b.n	80006b2 <__aeabi_fdiv+0x32>
 800079c:	230c      	movs	r3, #12
 800079e:	4699      	mov	r9, r3
 80007a0:	3b09      	subs	r3, #9
 80007a2:	27ff      	movs	r7, #255	; 0xff
 80007a4:	469a      	mov	sl, r3
 80007a6:	e784      	b.n	80006b2 <__aeabi_fdiv+0x32>
 80007a8:	0028      	movs	r0, r5
 80007aa:	f001 ffeb 	bl	8002784 <__clzsi2>
 80007ae:	2776      	movs	r7, #118	; 0x76
 80007b0:	1f43      	subs	r3, r0, #5
 80007b2:	409d      	lsls	r5, r3
 80007b4:	2300      	movs	r3, #0
 80007b6:	427f      	negs	r7, r7
 80007b8:	4699      	mov	r9, r3
 80007ba:	469a      	mov	sl, r3
 80007bc:	1a3f      	subs	r7, r7, r0
 80007be:	e778      	b.n	80006b2 <__aeabi_fdiv+0x32>
 80007c0:	4640      	mov	r0, r8
 80007c2:	f001 ffdf 	bl	8002784 <__clzsi2>
 80007c6:	4642      	mov	r2, r8
 80007c8:	1f43      	subs	r3, r0, #5
 80007ca:	409a      	lsls	r2, r3
 80007cc:	2376      	movs	r3, #118	; 0x76
 80007ce:	425b      	negs	r3, r3
 80007d0:	4690      	mov	r8, r2
 80007d2:	1a1b      	subs	r3, r3, r0
 80007d4:	2200      	movs	r2, #0
 80007d6:	e77e      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007d8:	2303      	movs	r3, #3
 80007da:	464a      	mov	r2, r9
 80007dc:	431a      	orrs	r2, r3
 80007de:	4691      	mov	r9, r2
 80007e0:	33fc      	adds	r3, #252	; 0xfc
 80007e2:	2203      	movs	r2, #3
 80007e4:	e777      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007e6:	000e      	movs	r6, r1
 80007e8:	20ff      	movs	r0, #255	; 0xff
 80007ea:	2200      	movs	r2, #0
 80007ec:	e7a8      	b.n	8000740 <__aeabi_fdiv+0xc0>
 80007ee:	2201      	movs	r2, #1
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	2b1b      	cmp	r3, #27
 80007f4:	dca2      	bgt.n	800073c <__aeabi_fdiv+0xbc>
 80007f6:	379e      	adds	r7, #158	; 0x9e
 80007f8:	002a      	movs	r2, r5
 80007fa:	40bd      	lsls	r5, r7
 80007fc:	40da      	lsrs	r2, r3
 80007fe:	1e6b      	subs	r3, r5, #1
 8000800:	419d      	sbcs	r5, r3
 8000802:	4315      	orrs	r5, r2
 8000804:	076a      	lsls	r2, r5, #29
 8000806:	d004      	beq.n	8000812 <__aeabi_fdiv+0x192>
 8000808:	220f      	movs	r2, #15
 800080a:	402a      	ands	r2, r5
 800080c:	2a04      	cmp	r2, #4
 800080e:	d000      	beq.n	8000812 <__aeabi_fdiv+0x192>
 8000810:	3504      	adds	r5, #4
 8000812:	016a      	lsls	r2, r5, #5
 8000814:	d544      	bpl.n	80008a0 <__aeabi_fdiv+0x220>
 8000816:	2001      	movs	r0, #1
 8000818:	2200      	movs	r2, #0
 800081a:	e791      	b.n	8000740 <__aeabi_fdiv+0xc0>
 800081c:	20ff      	movs	r0, #255	; 0xff
 800081e:	2200      	movs	r2, #0
 8000820:	e78e      	b.n	8000740 <__aeabi_fdiv+0xc0>
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	2600      	movs	r6, #0
 8000826:	20ff      	movs	r0, #255	; 0xff
 8000828:	03d2      	lsls	r2, r2, #15
 800082a:	e789      	b.n	8000740 <__aeabi_fdiv+0xc0>
 800082c:	2300      	movs	r3, #0
 800082e:	4698      	mov	r8, r3
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	03d2      	lsls	r2, r2, #15
 8000834:	4215      	tst	r5, r2
 8000836:	d008      	beq.n	800084a <__aeabi_fdiv+0x1ca>
 8000838:	4643      	mov	r3, r8
 800083a:	4213      	tst	r3, r2
 800083c:	d105      	bne.n	800084a <__aeabi_fdiv+0x1ca>
 800083e:	431a      	orrs	r2, r3
 8000840:	0252      	lsls	r2, r2, #9
 8000842:	0026      	movs	r6, r4
 8000844:	20ff      	movs	r0, #255	; 0xff
 8000846:	0a52      	lsrs	r2, r2, #9
 8000848:	e77a      	b.n	8000740 <__aeabi_fdiv+0xc0>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	03d2      	lsls	r2, r2, #15
 800084e:	432a      	orrs	r2, r5
 8000850:	0252      	lsls	r2, r2, #9
 8000852:	20ff      	movs	r0, #255	; 0xff
 8000854:	0a52      	lsrs	r2, r2, #9
 8000856:	e773      	b.n	8000740 <__aeabi_fdiv+0xc0>
 8000858:	4642      	mov	r2, r8
 800085a:	016b      	lsls	r3, r5, #5
 800085c:	0155      	lsls	r5, r2, #5
 800085e:	42ab      	cmp	r3, r5
 8000860:	d21a      	bcs.n	8000898 <__aeabi_fdiv+0x218>
 8000862:	201b      	movs	r0, #27
 8000864:	2200      	movs	r2, #0
 8000866:	3f01      	subs	r7, #1
 8000868:	2601      	movs	r6, #1
 800086a:	001c      	movs	r4, r3
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2c00      	cmp	r4, #0
 8000872:	db01      	blt.n	8000878 <__aeabi_fdiv+0x1f8>
 8000874:	429d      	cmp	r5, r3
 8000876:	d801      	bhi.n	800087c <__aeabi_fdiv+0x1fc>
 8000878:	1b5b      	subs	r3, r3, r5
 800087a:	4332      	orrs	r2, r6
 800087c:	3801      	subs	r0, #1
 800087e:	2800      	cmp	r0, #0
 8000880:	d1f3      	bne.n	800086a <__aeabi_fdiv+0x1ea>
 8000882:	1e58      	subs	r0, r3, #1
 8000884:	4183      	sbcs	r3, r0
 8000886:	4313      	orrs	r3, r2
 8000888:	001d      	movs	r5, r3
 800088a:	003b      	movs	r3, r7
 800088c:	337f      	adds	r3, #127	; 0x7f
 800088e:	000e      	movs	r6, r1
 8000890:	2b00      	cmp	r3, #0
 8000892:	dd00      	ble.n	8000896 <__aeabi_fdiv+0x216>
 8000894:	e73d      	b.n	8000712 <__aeabi_fdiv+0x92>
 8000896:	e7aa      	b.n	80007ee <__aeabi_fdiv+0x16e>
 8000898:	201a      	movs	r0, #26
 800089a:	2201      	movs	r2, #1
 800089c:	1b5b      	subs	r3, r3, r5
 800089e:	e7e3      	b.n	8000868 <__aeabi_fdiv+0x1e8>
 80008a0:	01aa      	lsls	r2, r5, #6
 80008a2:	2000      	movs	r0, #0
 80008a4:	0a52      	lsrs	r2, r2, #9
 80008a6:	e74b      	b.n	8000740 <__aeabi_fdiv+0xc0>
 80008a8:	0800723c 	.word	0x0800723c
 80008ac:	f7ffffff 	.word	0xf7ffffff
 80008b0:	0800727c 	.word	0x0800727c

080008b4 <__aeabi_i2f>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d013      	beq.n	80008e2 <__aeabi_i2f+0x2e>
 80008ba:	17c3      	asrs	r3, r0, #31
 80008bc:	18c5      	adds	r5, r0, r3
 80008be:	405d      	eors	r5, r3
 80008c0:	0fc4      	lsrs	r4, r0, #31
 80008c2:	0028      	movs	r0, r5
 80008c4:	f001 ff5e 	bl	8002784 <__clzsi2>
 80008c8:	239e      	movs	r3, #158	; 0x9e
 80008ca:	0001      	movs	r1, r0
 80008cc:	1a1b      	subs	r3, r3, r0
 80008ce:	2b96      	cmp	r3, #150	; 0x96
 80008d0:	dc0f      	bgt.n	80008f2 <__aeabi_i2f+0x3e>
 80008d2:	2808      	cmp	r0, #8
 80008d4:	d031      	beq.n	800093a <__aeabi_i2f+0x86>
 80008d6:	3908      	subs	r1, #8
 80008d8:	408d      	lsls	r5, r1
 80008da:	026d      	lsls	r5, r5, #9
 80008dc:	0a6d      	lsrs	r5, r5, #9
 80008de:	b2d8      	uxtb	r0, r3
 80008e0:	e002      	b.n	80008e8 <__aeabi_i2f+0x34>
 80008e2:	2400      	movs	r4, #0
 80008e4:	2000      	movs	r0, #0
 80008e6:	2500      	movs	r5, #0
 80008e8:	05c0      	lsls	r0, r0, #23
 80008ea:	4328      	orrs	r0, r5
 80008ec:	07e4      	lsls	r4, r4, #31
 80008ee:	4320      	orrs	r0, r4
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	2b99      	cmp	r3, #153	; 0x99
 80008f4:	dd0c      	ble.n	8000910 <__aeabi_i2f+0x5c>
 80008f6:	2205      	movs	r2, #5
 80008f8:	1a12      	subs	r2, r2, r0
 80008fa:	0028      	movs	r0, r5
 80008fc:	40d0      	lsrs	r0, r2
 80008fe:	0002      	movs	r2, r0
 8000900:	0008      	movs	r0, r1
 8000902:	301b      	adds	r0, #27
 8000904:	4085      	lsls	r5, r0
 8000906:	0028      	movs	r0, r5
 8000908:	1e45      	subs	r5, r0, #1
 800090a:	41a8      	sbcs	r0, r5
 800090c:	4302      	orrs	r2, r0
 800090e:	0015      	movs	r5, r2
 8000910:	2905      	cmp	r1, #5
 8000912:	dc16      	bgt.n	8000942 <__aeabi_i2f+0x8e>
 8000914:	002a      	movs	r2, r5
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <__aeabi_i2f+0xa0>)
 8000918:	4002      	ands	r2, r0
 800091a:	076e      	lsls	r6, r5, #29
 800091c:	d009      	beq.n	8000932 <__aeabi_i2f+0x7e>
 800091e:	260f      	movs	r6, #15
 8000920:	4035      	ands	r5, r6
 8000922:	2d04      	cmp	r5, #4
 8000924:	d005      	beq.n	8000932 <__aeabi_i2f+0x7e>
 8000926:	3204      	adds	r2, #4
 8000928:	0155      	lsls	r5, r2, #5
 800092a:	d502      	bpl.n	8000932 <__aeabi_i2f+0x7e>
 800092c:	239f      	movs	r3, #159	; 0x9f
 800092e:	4002      	ands	r2, r0
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	0192      	lsls	r2, r2, #6
 8000934:	0a55      	lsrs	r5, r2, #9
 8000936:	b2d8      	uxtb	r0, r3
 8000938:	e7d6      	b.n	80008e8 <__aeabi_i2f+0x34>
 800093a:	026d      	lsls	r5, r5, #9
 800093c:	2096      	movs	r0, #150	; 0x96
 800093e:	0a6d      	lsrs	r5, r5, #9
 8000940:	e7d2      	b.n	80008e8 <__aeabi_i2f+0x34>
 8000942:	1f4a      	subs	r2, r1, #5
 8000944:	4095      	lsls	r5, r2
 8000946:	002a      	movs	r2, r5
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <__aeabi_i2f+0xa0>)
 800094a:	4002      	ands	r2, r0
 800094c:	076e      	lsls	r6, r5, #29
 800094e:	d0f0      	beq.n	8000932 <__aeabi_i2f+0x7e>
 8000950:	e7e5      	b.n	800091e <__aeabi_i2f+0x6a>
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	fbffffff 	.word	0xfbffffff

08000958 <__aeabi_dadd>:
 8000958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095a:	464f      	mov	r7, r9
 800095c:	4646      	mov	r6, r8
 800095e:	46d6      	mov	lr, sl
 8000960:	0004      	movs	r4, r0
 8000962:	b5c0      	push	{r6, r7, lr}
 8000964:	001f      	movs	r7, r3
 8000966:	030b      	lsls	r3, r1, #12
 8000968:	0010      	movs	r0, r2
 800096a:	004e      	lsls	r6, r1, #1
 800096c:	0a5b      	lsrs	r3, r3, #9
 800096e:	0fcd      	lsrs	r5, r1, #31
 8000970:	0f61      	lsrs	r1, r4, #29
 8000972:	007a      	lsls	r2, r7, #1
 8000974:	4319      	orrs	r1, r3
 8000976:	00e3      	lsls	r3, r4, #3
 8000978:	033c      	lsls	r4, r7, #12
 800097a:	0fff      	lsrs	r7, r7, #31
 800097c:	46bc      	mov	ip, r7
 800097e:	0a64      	lsrs	r4, r4, #9
 8000980:	0f47      	lsrs	r7, r0, #29
 8000982:	4327      	orrs	r7, r4
 8000984:	0d76      	lsrs	r6, r6, #21
 8000986:	0d52      	lsrs	r2, r2, #21
 8000988:	00c0      	lsls	r0, r0, #3
 800098a:	46b9      	mov	r9, r7
 800098c:	4680      	mov	r8, r0
 800098e:	1ab7      	subs	r7, r6, r2
 8000990:	4565      	cmp	r5, ip
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x3e>
 8000994:	e09b      	b.n	8000ace <__aeabi_dadd+0x176>
 8000996:	2f00      	cmp	r7, #0
 8000998:	dc00      	bgt.n	800099c <__aeabi_dadd+0x44>
 800099a:	e084      	b.n	8000aa6 <__aeabi_dadd+0x14e>
 800099c:	2a00      	cmp	r2, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x4a>
 80009a0:	e0be      	b.n	8000b20 <__aeabi_dadd+0x1c8>
 80009a2:	4ac8      	ldr	r2, [pc, #800]	; (8000cc4 <__aeabi_dadd+0x36c>)
 80009a4:	4296      	cmp	r6, r2
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x52>
 80009a8:	e124      	b.n	8000bf4 <__aeabi_dadd+0x29c>
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	464c      	mov	r4, r9
 80009ae:	0412      	lsls	r2, r2, #16
 80009b0:	4314      	orrs	r4, r2
 80009b2:	46a1      	mov	r9, r4
 80009b4:	2f38      	cmp	r7, #56	; 0x38
 80009b6:	dd00      	ble.n	80009ba <__aeabi_dadd+0x62>
 80009b8:	e167      	b.n	8000c8a <__aeabi_dadd+0x332>
 80009ba:	2f1f      	cmp	r7, #31
 80009bc:	dd00      	ble.n	80009c0 <__aeabi_dadd+0x68>
 80009be:	e1d6      	b.n	8000d6e <__aeabi_dadd+0x416>
 80009c0:	2220      	movs	r2, #32
 80009c2:	464c      	mov	r4, r9
 80009c4:	1bd2      	subs	r2, r2, r7
 80009c6:	4094      	lsls	r4, r2
 80009c8:	46a2      	mov	sl, r4
 80009ca:	4644      	mov	r4, r8
 80009cc:	40fc      	lsrs	r4, r7
 80009ce:	0020      	movs	r0, r4
 80009d0:	4654      	mov	r4, sl
 80009d2:	4304      	orrs	r4, r0
 80009d4:	4640      	mov	r0, r8
 80009d6:	4090      	lsls	r0, r2
 80009d8:	1e42      	subs	r2, r0, #1
 80009da:	4190      	sbcs	r0, r2
 80009dc:	464a      	mov	r2, r9
 80009de:	40fa      	lsrs	r2, r7
 80009e0:	4304      	orrs	r4, r0
 80009e2:	1a89      	subs	r1, r1, r2
 80009e4:	1b1c      	subs	r4, r3, r4
 80009e6:	42a3      	cmp	r3, r4
 80009e8:	4192      	sbcs	r2, r2
 80009ea:	4252      	negs	r2, r2
 80009ec:	1a8b      	subs	r3, r1, r2
 80009ee:	469a      	mov	sl, r3
 80009f0:	4653      	mov	r3, sl
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	d400      	bmi.n	80009f8 <__aeabi_dadd+0xa0>
 80009f6:	e0d4      	b.n	8000ba2 <__aeabi_dadd+0x24a>
 80009f8:	4653      	mov	r3, sl
 80009fa:	025a      	lsls	r2, r3, #9
 80009fc:	0a53      	lsrs	r3, r2, #9
 80009fe:	469a      	mov	sl, r3
 8000a00:	4653      	mov	r3, sl
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0xb0>
 8000a06:	e104      	b.n	8000c12 <__aeabi_dadd+0x2ba>
 8000a08:	4650      	mov	r0, sl
 8000a0a:	f001 febb 	bl	8002784 <__clzsi2>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	3b08      	subs	r3, #8
 8000a12:	2220      	movs	r2, #32
 8000a14:	0020      	movs	r0, r4
 8000a16:	1ad2      	subs	r2, r2, r3
 8000a18:	4651      	mov	r1, sl
 8000a1a:	40d0      	lsrs	r0, r2
 8000a1c:	4099      	lsls	r1, r3
 8000a1e:	0002      	movs	r2, r0
 8000a20:	409c      	lsls	r4, r3
 8000a22:	430a      	orrs	r2, r1
 8000a24:	42b3      	cmp	r3, r6
 8000a26:	da00      	bge.n	8000a2a <__aeabi_dadd+0xd2>
 8000a28:	e102      	b.n	8000c30 <__aeabi_dadd+0x2d8>
 8000a2a:	1b9b      	subs	r3, r3, r6
 8000a2c:	1c59      	adds	r1, r3, #1
 8000a2e:	291f      	cmp	r1, #31
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dadd+0xdc>
 8000a32:	e0a7      	b.n	8000b84 <__aeabi_dadd+0x22c>
 8000a34:	2320      	movs	r3, #32
 8000a36:	0010      	movs	r0, r2
 8000a38:	0026      	movs	r6, r4
 8000a3a:	1a5b      	subs	r3, r3, r1
 8000a3c:	409c      	lsls	r4, r3
 8000a3e:	4098      	lsls	r0, r3
 8000a40:	40ce      	lsrs	r6, r1
 8000a42:	40ca      	lsrs	r2, r1
 8000a44:	1e63      	subs	r3, r4, #1
 8000a46:	419c      	sbcs	r4, r3
 8000a48:	4330      	orrs	r0, r6
 8000a4a:	4692      	mov	sl, r2
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	4304      	orrs	r4, r0
 8000a50:	0763      	lsls	r3, r4, #29
 8000a52:	d009      	beq.n	8000a68 <__aeabi_dadd+0x110>
 8000a54:	230f      	movs	r3, #15
 8000a56:	4023      	ands	r3, r4
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d005      	beq.n	8000a68 <__aeabi_dadd+0x110>
 8000a5c:	1d23      	adds	r3, r4, #4
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	41a4      	sbcs	r4, r4
 8000a62:	4264      	negs	r4, r4
 8000a64:	44a2      	add	sl, r4
 8000a66:	001c      	movs	r4, r3
 8000a68:	4653      	mov	r3, sl
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	d400      	bmi.n	8000a70 <__aeabi_dadd+0x118>
 8000a6e:	e09b      	b.n	8000ba8 <__aeabi_dadd+0x250>
 8000a70:	4b94      	ldr	r3, [pc, #592]	; (8000cc4 <__aeabi_dadd+0x36c>)
 8000a72:	3601      	adds	r6, #1
 8000a74:	429e      	cmp	r6, r3
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x122>
 8000a78:	e0b8      	b.n	8000bec <__aeabi_dadd+0x294>
 8000a7a:	4653      	mov	r3, sl
 8000a7c:	4992      	ldr	r1, [pc, #584]	; (8000cc8 <__aeabi_dadd+0x370>)
 8000a7e:	08e4      	lsrs	r4, r4, #3
 8000a80:	400b      	ands	r3, r1
 8000a82:	0019      	movs	r1, r3
 8000a84:	075b      	lsls	r3, r3, #29
 8000a86:	4323      	orrs	r3, r4
 8000a88:	0572      	lsls	r2, r6, #21
 8000a8a:	024c      	lsls	r4, r1, #9
 8000a8c:	0b24      	lsrs	r4, r4, #12
 8000a8e:	0d52      	lsrs	r2, r2, #21
 8000a90:	0512      	lsls	r2, r2, #20
 8000a92:	07ed      	lsls	r5, r5, #31
 8000a94:	4322      	orrs	r2, r4
 8000a96:	432a      	orrs	r2, r5
 8000a98:	0018      	movs	r0, r3
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d048      	beq.n	8000b3c <__aeabi_dadd+0x1e4>
 8000aaa:	1b97      	subs	r7, r2, r6
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_dadd+0x15a>
 8000ab0:	e10e      	b.n	8000cd0 <__aeabi_dadd+0x378>
 8000ab2:	000c      	movs	r4, r1
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x162>
 8000ab8:	e1b7      	b.n	8000e2a <__aeabi_dadd+0x4d2>
 8000aba:	1e7c      	subs	r4, r7, #1
 8000abc:	2f01      	cmp	r7, #1
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x16a>
 8000ac0:	e226      	b.n	8000f10 <__aeabi_dadd+0x5b8>
 8000ac2:	4d80      	ldr	r5, [pc, #512]	; (8000cc4 <__aeabi_dadd+0x36c>)
 8000ac4:	42af      	cmp	r7, r5
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x172>
 8000ac8:	e1d5      	b.n	8000e76 <__aeabi_dadd+0x51e>
 8000aca:	0027      	movs	r7, r4
 8000acc:	e107      	b.n	8000cde <__aeabi_dadd+0x386>
 8000ace:	2f00      	cmp	r7, #0
 8000ad0:	dc00      	bgt.n	8000ad4 <__aeabi_dadd+0x17c>
 8000ad2:	e0b2      	b.n	8000c3a <__aeabi_dadd+0x2e2>
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	d047      	beq.n	8000b68 <__aeabi_dadd+0x210>
 8000ad8:	4a7a      	ldr	r2, [pc, #488]	; (8000cc4 <__aeabi_dadd+0x36c>)
 8000ada:	4296      	cmp	r6, r2
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x188>
 8000ade:	e089      	b.n	8000bf4 <__aeabi_dadd+0x29c>
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	464c      	mov	r4, r9
 8000ae4:	0412      	lsls	r2, r2, #16
 8000ae6:	4314      	orrs	r4, r2
 8000ae8:	46a1      	mov	r9, r4
 8000aea:	2f38      	cmp	r7, #56	; 0x38
 8000aec:	dc6b      	bgt.n	8000bc6 <__aeabi_dadd+0x26e>
 8000aee:	2f1f      	cmp	r7, #31
 8000af0:	dc00      	bgt.n	8000af4 <__aeabi_dadd+0x19c>
 8000af2:	e16e      	b.n	8000dd2 <__aeabi_dadd+0x47a>
 8000af4:	003a      	movs	r2, r7
 8000af6:	4648      	mov	r0, r9
 8000af8:	3a20      	subs	r2, #32
 8000afa:	40d0      	lsrs	r0, r2
 8000afc:	4684      	mov	ip, r0
 8000afe:	2f20      	cmp	r7, #32
 8000b00:	d007      	beq.n	8000b12 <__aeabi_dadd+0x1ba>
 8000b02:	2240      	movs	r2, #64	; 0x40
 8000b04:	4648      	mov	r0, r9
 8000b06:	1bd2      	subs	r2, r2, r7
 8000b08:	4090      	lsls	r0, r2
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	4640      	mov	r0, r8
 8000b0e:	4310      	orrs	r0, r2
 8000b10:	4680      	mov	r8, r0
 8000b12:	4640      	mov	r0, r8
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	4662      	mov	r2, ip
 8000b1a:	0004      	movs	r4, r0
 8000b1c:	4314      	orrs	r4, r2
 8000b1e:	e057      	b.n	8000bd0 <__aeabi_dadd+0x278>
 8000b20:	464a      	mov	r2, r9
 8000b22:	4302      	orrs	r2, r0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x1d0>
 8000b26:	e103      	b.n	8000d30 <__aeabi_dadd+0x3d8>
 8000b28:	1e7a      	subs	r2, r7, #1
 8000b2a:	2f01      	cmp	r7, #1
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x1d8>
 8000b2e:	e193      	b.n	8000e58 <__aeabi_dadd+0x500>
 8000b30:	4c64      	ldr	r4, [pc, #400]	; (8000cc4 <__aeabi_dadd+0x36c>)
 8000b32:	42a7      	cmp	r7, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x1e0>
 8000b36:	e18a      	b.n	8000e4e <__aeabi_dadd+0x4f6>
 8000b38:	0017      	movs	r7, r2
 8000b3a:	e73b      	b.n	80009b4 <__aeabi_dadd+0x5c>
 8000b3c:	4c63      	ldr	r4, [pc, #396]	; (8000ccc <__aeabi_dadd+0x374>)
 8000b3e:	1c72      	adds	r2, r6, #1
 8000b40:	4222      	tst	r2, r4
 8000b42:	d000      	beq.n	8000b46 <__aeabi_dadd+0x1ee>
 8000b44:	e0e0      	b.n	8000d08 <__aeabi_dadd+0x3b0>
 8000b46:	000a      	movs	r2, r1
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x1f8>
 8000b4e:	e174      	b.n	8000e3a <__aeabi_dadd+0x4e2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x1fe>
 8000b54:	e1d0      	b.n	8000ef8 <__aeabi_dadd+0x5a0>
 8000b56:	464a      	mov	r2, r9
 8000b58:	4302      	orrs	r2, r0
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_dadd+0x206>
 8000b5c:	e1e3      	b.n	8000f26 <__aeabi_dadd+0x5ce>
 8000b5e:	074a      	lsls	r2, r1, #29
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	08c9      	lsrs	r1, r1, #3
 8000b66:	e029      	b.n	8000bbc <__aeabi_dadd+0x264>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	4302      	orrs	r2, r0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_dadd+0x218>
 8000b6e:	e17d      	b.n	8000e6c <__aeabi_dadd+0x514>
 8000b70:	1e7a      	subs	r2, r7, #1
 8000b72:	2f01      	cmp	r7, #1
 8000b74:	d100      	bne.n	8000b78 <__aeabi_dadd+0x220>
 8000b76:	e0e0      	b.n	8000d3a <__aeabi_dadd+0x3e2>
 8000b78:	4c52      	ldr	r4, [pc, #328]	; (8000cc4 <__aeabi_dadd+0x36c>)
 8000b7a:	42a7      	cmp	r7, r4
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dadd+0x228>
 8000b7e:	e166      	b.n	8000e4e <__aeabi_dadd+0x4f6>
 8000b80:	0017      	movs	r7, r2
 8000b82:	e7b2      	b.n	8000aea <__aeabi_dadd+0x192>
 8000b84:	0010      	movs	r0, r2
 8000b86:	3b1f      	subs	r3, #31
 8000b88:	40d8      	lsrs	r0, r3
 8000b8a:	2920      	cmp	r1, #32
 8000b8c:	d003      	beq.n	8000b96 <__aeabi_dadd+0x23e>
 8000b8e:	2340      	movs	r3, #64	; 0x40
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	409a      	lsls	r2, r3
 8000b94:	4314      	orrs	r4, r2
 8000b96:	1e63      	subs	r3, r4, #1
 8000b98:	419c      	sbcs	r4, r3
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2600      	movs	r6, #0
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	4304      	orrs	r4, r0
 8000ba2:	0763      	lsls	r3, r4, #29
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_dadd+0x250>
 8000ba6:	e755      	b.n	8000a54 <__aeabi_dadd+0xfc>
 8000ba8:	4652      	mov	r2, sl
 8000baa:	08e3      	lsrs	r3, r4, #3
 8000bac:	0752      	lsls	r2, r2, #29
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	4652      	mov	r2, sl
 8000bb2:	0037      	movs	r7, r6
 8000bb4:	08d1      	lsrs	r1, r2, #3
 8000bb6:	4a43      	ldr	r2, [pc, #268]	; (8000cc4 <__aeabi_dadd+0x36c>)
 8000bb8:	4297      	cmp	r7, r2
 8000bba:	d01f      	beq.n	8000bfc <__aeabi_dadd+0x2a4>
 8000bbc:	0309      	lsls	r1, r1, #12
 8000bbe:	057a      	lsls	r2, r7, #21
 8000bc0:	0b0c      	lsrs	r4, r1, #12
 8000bc2:	0d52      	lsrs	r2, r2, #21
 8000bc4:	e764      	b.n	8000a90 <__aeabi_dadd+0x138>
 8000bc6:	4642      	mov	r2, r8
 8000bc8:	464c      	mov	r4, r9
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	1e62      	subs	r2, r4, #1
 8000bce:	4194      	sbcs	r4, r2
 8000bd0:	18e4      	adds	r4, r4, r3
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	4192      	sbcs	r2, r2
 8000bd6:	4252      	negs	r2, r2
 8000bd8:	4692      	mov	sl, r2
 8000bda:	448a      	add	sl, r1
 8000bdc:	4653      	mov	r3, sl
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	d5df      	bpl.n	8000ba2 <__aeabi_dadd+0x24a>
 8000be2:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <__aeabi_dadd+0x36c>)
 8000be4:	3601      	adds	r6, #1
 8000be6:	429e      	cmp	r6, r3
 8000be8:	d000      	beq.n	8000bec <__aeabi_dadd+0x294>
 8000bea:	e0b3      	b.n	8000d54 <__aeabi_dadd+0x3fc>
 8000bec:	0032      	movs	r2, r6
 8000bee:	2400      	movs	r4, #0
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e74d      	b.n	8000a90 <__aeabi_dadd+0x138>
 8000bf4:	074a      	lsls	r2, r1, #29
 8000bf6:	08db      	lsrs	r3, r3, #3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	08c9      	lsrs	r1, r1, #3
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dadd+0x2ac>
 8000c02:	e200      	b.n	8001006 <__aeabi_dadd+0x6ae>
 8000c04:	2480      	movs	r4, #128	; 0x80
 8000c06:	0324      	lsls	r4, r4, #12
 8000c08:	430c      	orrs	r4, r1
 8000c0a:	0324      	lsls	r4, r4, #12
 8000c0c:	4a2d      	ldr	r2, [pc, #180]	; (8000cc4 <__aeabi_dadd+0x36c>)
 8000c0e:	0b24      	lsrs	r4, r4, #12
 8000c10:	e73e      	b.n	8000a90 <__aeabi_dadd+0x138>
 8000c12:	0020      	movs	r0, r4
 8000c14:	f001 fdb6 	bl	8002784 <__clzsi2>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	3318      	adds	r3, #24
 8000c1c:	2b1f      	cmp	r3, #31
 8000c1e:	dc00      	bgt.n	8000c22 <__aeabi_dadd+0x2ca>
 8000c20:	e6f7      	b.n	8000a12 <__aeabi_dadd+0xba>
 8000c22:	0022      	movs	r2, r4
 8000c24:	3808      	subs	r0, #8
 8000c26:	4082      	lsls	r2, r0
 8000c28:	2400      	movs	r4, #0
 8000c2a:	42b3      	cmp	r3, r6
 8000c2c:	db00      	blt.n	8000c30 <__aeabi_dadd+0x2d8>
 8000c2e:	e6fc      	b.n	8000a2a <__aeabi_dadd+0xd2>
 8000c30:	1af6      	subs	r6, r6, r3
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <__aeabi_dadd+0x370>)
 8000c34:	401a      	ands	r2, r3
 8000c36:	4692      	mov	sl, r2
 8000c38:	e70a      	b.n	8000a50 <__aeabi_dadd+0xf8>
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	d02b      	beq.n	8000c96 <__aeabi_dadd+0x33e>
 8000c3e:	1b97      	subs	r7, r2, r6
 8000c40:	2e00      	cmp	r6, #0
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x2ee>
 8000c44:	e0b8      	b.n	8000db8 <__aeabi_dadd+0x460>
 8000c46:	4c1f      	ldr	r4, [pc, #124]	; (8000cc4 <__aeabi_dadd+0x36c>)
 8000c48:	42a2      	cmp	r2, r4
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dadd+0x2f6>
 8000c4c:	e11c      	b.n	8000e88 <__aeabi_dadd+0x530>
 8000c4e:	2480      	movs	r4, #128	; 0x80
 8000c50:	0424      	lsls	r4, r4, #16
 8000c52:	4321      	orrs	r1, r4
 8000c54:	2f38      	cmp	r7, #56	; 0x38
 8000c56:	dd00      	ble.n	8000c5a <__aeabi_dadd+0x302>
 8000c58:	e11e      	b.n	8000e98 <__aeabi_dadd+0x540>
 8000c5a:	2f1f      	cmp	r7, #31
 8000c5c:	dd00      	ble.n	8000c60 <__aeabi_dadd+0x308>
 8000c5e:	e19e      	b.n	8000f9e <__aeabi_dadd+0x646>
 8000c60:	2620      	movs	r6, #32
 8000c62:	000c      	movs	r4, r1
 8000c64:	1bf6      	subs	r6, r6, r7
 8000c66:	0018      	movs	r0, r3
 8000c68:	40b3      	lsls	r3, r6
 8000c6a:	40b4      	lsls	r4, r6
 8000c6c:	40f8      	lsrs	r0, r7
 8000c6e:	1e5e      	subs	r6, r3, #1
 8000c70:	41b3      	sbcs	r3, r6
 8000c72:	40f9      	lsrs	r1, r7
 8000c74:	4304      	orrs	r4, r0
 8000c76:	431c      	orrs	r4, r3
 8000c78:	4489      	add	r9, r1
 8000c7a:	4444      	add	r4, r8
 8000c7c:	4544      	cmp	r4, r8
 8000c7e:	419b      	sbcs	r3, r3
 8000c80:	425b      	negs	r3, r3
 8000c82:	444b      	add	r3, r9
 8000c84:	469a      	mov	sl, r3
 8000c86:	0016      	movs	r6, r2
 8000c88:	e7a8      	b.n	8000bdc <__aeabi_dadd+0x284>
 8000c8a:	4642      	mov	r2, r8
 8000c8c:	464c      	mov	r4, r9
 8000c8e:	4314      	orrs	r4, r2
 8000c90:	1e62      	subs	r2, r4, #1
 8000c92:	4194      	sbcs	r4, r2
 8000c94:	e6a6      	b.n	80009e4 <__aeabi_dadd+0x8c>
 8000c96:	4c0d      	ldr	r4, [pc, #52]	; (8000ccc <__aeabi_dadd+0x374>)
 8000c98:	1c72      	adds	r2, r6, #1
 8000c9a:	4222      	tst	r2, r4
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x348>
 8000c9e:	e0a8      	b.n	8000df2 <__aeabi_dadd+0x49a>
 8000ca0:	000a      	movs	r2, r1
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d000      	beq.n	8000caa <__aeabi_dadd+0x352>
 8000ca8:	e10a      	b.n	8000ec0 <__aeabi_dadd+0x568>
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x358>
 8000cae:	e15e      	b.n	8000f6e <__aeabi_dadd+0x616>
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	4302      	orrs	r2, r0
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_dadd+0x360>
 8000cb6:	e161      	b.n	8000f7c <__aeabi_dadd+0x624>
 8000cb8:	074a      	lsls	r2, r1, #29
 8000cba:	08db      	lsrs	r3, r3, #3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	08c9      	lsrs	r1, r1, #3
 8000cc0:	e77c      	b.n	8000bbc <__aeabi_dadd+0x264>
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	000007ff 	.word	0x000007ff
 8000cc8:	ff7fffff 	.word	0xff7fffff
 8000ccc:	000007fe 	.word	0x000007fe
 8000cd0:	4ccf      	ldr	r4, [pc, #828]	; (8001010 <__aeabi_dadd+0x6b8>)
 8000cd2:	42a2      	cmp	r2, r4
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dadd+0x380>
 8000cd6:	e0ce      	b.n	8000e76 <__aeabi_dadd+0x51e>
 8000cd8:	2480      	movs	r4, #128	; 0x80
 8000cda:	0424      	lsls	r4, r4, #16
 8000cdc:	4321      	orrs	r1, r4
 8000cde:	2f38      	cmp	r7, #56	; 0x38
 8000ce0:	dc5b      	bgt.n	8000d9a <__aeabi_dadd+0x442>
 8000ce2:	2f1f      	cmp	r7, #31
 8000ce4:	dd00      	ble.n	8000ce8 <__aeabi_dadd+0x390>
 8000ce6:	e0dc      	b.n	8000ea2 <__aeabi_dadd+0x54a>
 8000ce8:	2520      	movs	r5, #32
 8000cea:	000c      	movs	r4, r1
 8000cec:	1bed      	subs	r5, r5, r7
 8000cee:	001e      	movs	r6, r3
 8000cf0:	40ab      	lsls	r3, r5
 8000cf2:	40ac      	lsls	r4, r5
 8000cf4:	40fe      	lsrs	r6, r7
 8000cf6:	1e5d      	subs	r5, r3, #1
 8000cf8:	41ab      	sbcs	r3, r5
 8000cfa:	4334      	orrs	r4, r6
 8000cfc:	40f9      	lsrs	r1, r7
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	464b      	mov	r3, r9
 8000d02:	1a5b      	subs	r3, r3, r1
 8000d04:	4699      	mov	r9, r3
 8000d06:	e04c      	b.n	8000da2 <__aeabi_dadd+0x44a>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	1a1c      	subs	r4, r3, r0
 8000d0c:	1a88      	subs	r0, r1, r2
 8000d0e:	42a3      	cmp	r3, r4
 8000d10:	4192      	sbcs	r2, r2
 8000d12:	4252      	negs	r2, r2
 8000d14:	4692      	mov	sl, r2
 8000d16:	0002      	movs	r2, r0
 8000d18:	4650      	mov	r0, sl
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	4692      	mov	sl, r2
 8000d1e:	0212      	lsls	r2, r2, #8
 8000d20:	d478      	bmi.n	8000e14 <__aeabi_dadd+0x4bc>
 8000d22:	4653      	mov	r3, sl
 8000d24:	4323      	orrs	r3, r4
 8000d26:	d000      	beq.n	8000d2a <__aeabi_dadd+0x3d2>
 8000d28:	e66a      	b.n	8000a00 <__aeabi_dadd+0xa8>
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	e745      	b.n	8000bbc <__aeabi_dadd+0x264>
 8000d30:	074a      	lsls	r2, r1, #29
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	e73d      	b.n	8000bb6 <__aeabi_dadd+0x25e>
 8000d3a:	181c      	adds	r4, r3, r0
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	419b      	sbcs	r3, r3
 8000d40:	4449      	add	r1, r9
 8000d42:	468a      	mov	sl, r1
 8000d44:	425b      	negs	r3, r3
 8000d46:	449a      	add	sl, r3
 8000d48:	4653      	mov	r3, sl
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	d400      	bmi.n	8000d52 <__aeabi_dadd+0x3fa>
 8000d50:	e727      	b.n	8000ba2 <__aeabi_dadd+0x24a>
 8000d52:	2602      	movs	r6, #2
 8000d54:	4652      	mov	r2, sl
 8000d56:	4baf      	ldr	r3, [pc, #700]	; (8001014 <__aeabi_dadd+0x6bc>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	4021      	ands	r1, r4
 8000d60:	0862      	lsrs	r2, r4, #1
 8000d62:	430a      	orrs	r2, r1
 8000d64:	07dc      	lsls	r4, r3, #31
 8000d66:	085b      	lsrs	r3, r3, #1
 8000d68:	469a      	mov	sl, r3
 8000d6a:	4314      	orrs	r4, r2
 8000d6c:	e670      	b.n	8000a50 <__aeabi_dadd+0xf8>
 8000d6e:	003a      	movs	r2, r7
 8000d70:	464c      	mov	r4, r9
 8000d72:	3a20      	subs	r2, #32
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	46a4      	mov	ip, r4
 8000d78:	2f20      	cmp	r7, #32
 8000d7a:	d007      	beq.n	8000d8c <__aeabi_dadd+0x434>
 8000d7c:	2240      	movs	r2, #64	; 0x40
 8000d7e:	4648      	mov	r0, r9
 8000d80:	1bd2      	subs	r2, r2, r7
 8000d82:	4090      	lsls	r0, r2
 8000d84:	0002      	movs	r2, r0
 8000d86:	4640      	mov	r0, r8
 8000d88:	4310      	orrs	r0, r2
 8000d8a:	4680      	mov	r8, r0
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	1e42      	subs	r2, r0, #1
 8000d90:	4190      	sbcs	r0, r2
 8000d92:	4662      	mov	r2, ip
 8000d94:	0004      	movs	r4, r0
 8000d96:	4314      	orrs	r4, r2
 8000d98:	e624      	b.n	80009e4 <__aeabi_dadd+0x8c>
 8000d9a:	4319      	orrs	r1, r3
 8000d9c:	000c      	movs	r4, r1
 8000d9e:	1e63      	subs	r3, r4, #1
 8000da0:	419c      	sbcs	r4, r3
 8000da2:	4643      	mov	r3, r8
 8000da4:	1b1c      	subs	r4, r3, r4
 8000da6:	45a0      	cmp	r8, r4
 8000da8:	419b      	sbcs	r3, r3
 8000daa:	4649      	mov	r1, r9
 8000dac:	425b      	negs	r3, r3
 8000dae:	1acb      	subs	r3, r1, r3
 8000db0:	469a      	mov	sl, r3
 8000db2:	4665      	mov	r5, ip
 8000db4:	0016      	movs	r6, r2
 8000db6:	e61b      	b.n	80009f0 <__aeabi_dadd+0x98>
 8000db8:	000c      	movs	r4, r1
 8000dba:	431c      	orrs	r4, r3
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x468>
 8000dbe:	e0c7      	b.n	8000f50 <__aeabi_dadd+0x5f8>
 8000dc0:	1e7c      	subs	r4, r7, #1
 8000dc2:	2f01      	cmp	r7, #1
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_dadd+0x470>
 8000dc6:	e0f9      	b.n	8000fbc <__aeabi_dadd+0x664>
 8000dc8:	4e91      	ldr	r6, [pc, #580]	; (8001010 <__aeabi_dadd+0x6b8>)
 8000dca:	42b7      	cmp	r7, r6
 8000dcc:	d05c      	beq.n	8000e88 <__aeabi_dadd+0x530>
 8000dce:	0027      	movs	r7, r4
 8000dd0:	e740      	b.n	8000c54 <__aeabi_dadd+0x2fc>
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	464c      	mov	r4, r9
 8000dd6:	4640      	mov	r0, r8
 8000dd8:	1bd2      	subs	r2, r2, r7
 8000dda:	4094      	lsls	r4, r2
 8000ddc:	40f8      	lsrs	r0, r7
 8000dde:	4304      	orrs	r4, r0
 8000de0:	4640      	mov	r0, r8
 8000de2:	4090      	lsls	r0, r2
 8000de4:	1e42      	subs	r2, r0, #1
 8000de6:	4190      	sbcs	r0, r2
 8000de8:	464a      	mov	r2, r9
 8000dea:	40fa      	lsrs	r2, r7
 8000dec:	4304      	orrs	r4, r0
 8000dee:	1889      	adds	r1, r1, r2
 8000df0:	e6ee      	b.n	8000bd0 <__aeabi_dadd+0x278>
 8000df2:	4c87      	ldr	r4, [pc, #540]	; (8001010 <__aeabi_dadd+0x6b8>)
 8000df4:	42a2      	cmp	r2, r4
 8000df6:	d100      	bne.n	8000dfa <__aeabi_dadd+0x4a2>
 8000df8:	e6f9      	b.n	8000bee <__aeabi_dadd+0x296>
 8000dfa:	1818      	adds	r0, r3, r0
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	419b      	sbcs	r3, r3
 8000e00:	4449      	add	r1, r9
 8000e02:	425b      	negs	r3, r3
 8000e04:	18cb      	adds	r3, r1, r3
 8000e06:	07dc      	lsls	r4, r3, #31
 8000e08:	0840      	lsrs	r0, r0, #1
 8000e0a:	085b      	lsrs	r3, r3, #1
 8000e0c:	469a      	mov	sl, r3
 8000e0e:	0016      	movs	r6, r2
 8000e10:	4304      	orrs	r4, r0
 8000e12:	e6c6      	b.n	8000ba2 <__aeabi_dadd+0x24a>
 8000e14:	4642      	mov	r2, r8
 8000e16:	1ad4      	subs	r4, r2, r3
 8000e18:	45a0      	cmp	r8, r4
 8000e1a:	4180      	sbcs	r0, r0
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	4240      	negs	r0, r0
 8000e20:	1a59      	subs	r1, r3, r1
 8000e22:	1a0b      	subs	r3, r1, r0
 8000e24:	469a      	mov	sl, r3
 8000e26:	4665      	mov	r5, ip
 8000e28:	e5ea      	b.n	8000a00 <__aeabi_dadd+0xa8>
 8000e2a:	464b      	mov	r3, r9
 8000e2c:	464a      	mov	r2, r9
 8000e2e:	08c0      	lsrs	r0, r0, #3
 8000e30:	075b      	lsls	r3, r3, #29
 8000e32:	4665      	mov	r5, ip
 8000e34:	4303      	orrs	r3, r0
 8000e36:	08d1      	lsrs	r1, r2, #3
 8000e38:	e6bd      	b.n	8000bb6 <__aeabi_dadd+0x25e>
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_dadd+0x4e8>
 8000e3e:	e08e      	b.n	8000f5e <__aeabi_dadd+0x606>
 8000e40:	464b      	mov	r3, r9
 8000e42:	4303      	orrs	r3, r0
 8000e44:	d117      	bne.n	8000e76 <__aeabi_dadd+0x51e>
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	2500      	movs	r5, #0
 8000e4a:	0309      	lsls	r1, r1, #12
 8000e4c:	e6da      	b.n	8000c04 <__aeabi_dadd+0x2ac>
 8000e4e:	074a      	lsls	r2, r1, #29
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	08c9      	lsrs	r1, r1, #3
 8000e56:	e6d1      	b.n	8000bfc <__aeabi_dadd+0x2a4>
 8000e58:	1a1c      	subs	r4, r3, r0
 8000e5a:	464a      	mov	r2, r9
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	419b      	sbcs	r3, r3
 8000e60:	1a89      	subs	r1, r1, r2
 8000e62:	425b      	negs	r3, r3
 8000e64:	1acb      	subs	r3, r1, r3
 8000e66:	469a      	mov	sl, r3
 8000e68:	2601      	movs	r6, #1
 8000e6a:	e5c1      	b.n	80009f0 <__aeabi_dadd+0x98>
 8000e6c:	074a      	lsls	r2, r1, #29
 8000e6e:	08db      	lsrs	r3, r3, #3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	08c9      	lsrs	r1, r1, #3
 8000e74:	e69f      	b.n	8000bb6 <__aeabi_dadd+0x25e>
 8000e76:	4643      	mov	r3, r8
 8000e78:	08d8      	lsrs	r0, r3, #3
 8000e7a:	464b      	mov	r3, r9
 8000e7c:	464a      	mov	r2, r9
 8000e7e:	075b      	lsls	r3, r3, #29
 8000e80:	4665      	mov	r5, ip
 8000e82:	4303      	orrs	r3, r0
 8000e84:	08d1      	lsrs	r1, r2, #3
 8000e86:	e6b9      	b.n	8000bfc <__aeabi_dadd+0x2a4>
 8000e88:	4643      	mov	r3, r8
 8000e8a:	08d8      	lsrs	r0, r3, #3
 8000e8c:	464b      	mov	r3, r9
 8000e8e:	464a      	mov	r2, r9
 8000e90:	075b      	lsls	r3, r3, #29
 8000e92:	4303      	orrs	r3, r0
 8000e94:	08d1      	lsrs	r1, r2, #3
 8000e96:	e6b1      	b.n	8000bfc <__aeabi_dadd+0x2a4>
 8000e98:	4319      	orrs	r1, r3
 8000e9a:	000c      	movs	r4, r1
 8000e9c:	1e63      	subs	r3, r4, #1
 8000e9e:	419c      	sbcs	r4, r3
 8000ea0:	e6eb      	b.n	8000c7a <__aeabi_dadd+0x322>
 8000ea2:	003c      	movs	r4, r7
 8000ea4:	000d      	movs	r5, r1
 8000ea6:	3c20      	subs	r4, #32
 8000ea8:	40e5      	lsrs	r5, r4
 8000eaa:	2f20      	cmp	r7, #32
 8000eac:	d003      	beq.n	8000eb6 <__aeabi_dadd+0x55e>
 8000eae:	2440      	movs	r4, #64	; 0x40
 8000eb0:	1be4      	subs	r4, r4, r7
 8000eb2:	40a1      	lsls	r1, r4
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	001c      	movs	r4, r3
 8000eb8:	1e63      	subs	r3, r4, #1
 8000eba:	419c      	sbcs	r4, r3
 8000ebc:	432c      	orrs	r4, r5
 8000ebe:	e770      	b.n	8000da2 <__aeabi_dadd+0x44a>
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	d0e1      	beq.n	8000e88 <__aeabi_dadd+0x530>
 8000ec4:	464a      	mov	r2, r9
 8000ec6:	4302      	orrs	r2, r0
 8000ec8:	d0c1      	beq.n	8000e4e <__aeabi_dadd+0x4f6>
 8000eca:	074a      	lsls	r2, r1, #29
 8000ecc:	08db      	lsrs	r3, r3, #3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	08c9      	lsrs	r1, r1, #3
 8000ed4:	0312      	lsls	r2, r2, #12
 8000ed6:	4211      	tst	r1, r2
 8000ed8:	d008      	beq.n	8000eec <__aeabi_dadd+0x594>
 8000eda:	4648      	mov	r0, r9
 8000edc:	08c4      	lsrs	r4, r0, #3
 8000ede:	4214      	tst	r4, r2
 8000ee0:	d104      	bne.n	8000eec <__aeabi_dadd+0x594>
 8000ee2:	4643      	mov	r3, r8
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	08db      	lsrs	r3, r3, #3
 8000ee8:	0742      	lsls	r2, r0, #29
 8000eea:	4313      	orrs	r3, r2
 8000eec:	0f5a      	lsrs	r2, r3, #29
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	0752      	lsls	r2, r2, #29
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	e681      	b.n	8000bfc <__aeabi_dadd+0x2a4>
 8000ef8:	464b      	mov	r3, r9
 8000efa:	4303      	orrs	r3, r0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x5a8>
 8000efe:	e714      	b.n	8000d2a <__aeabi_dadd+0x3d2>
 8000f00:	464b      	mov	r3, r9
 8000f02:	464a      	mov	r2, r9
 8000f04:	08c0      	lsrs	r0, r0, #3
 8000f06:	075b      	lsls	r3, r3, #29
 8000f08:	4665      	mov	r5, ip
 8000f0a:	4303      	orrs	r3, r0
 8000f0c:	08d1      	lsrs	r1, r2, #3
 8000f0e:	e655      	b.n	8000bbc <__aeabi_dadd+0x264>
 8000f10:	1ac4      	subs	r4, r0, r3
 8000f12:	45a0      	cmp	r8, r4
 8000f14:	4180      	sbcs	r0, r0
 8000f16:	464b      	mov	r3, r9
 8000f18:	4240      	negs	r0, r0
 8000f1a:	1a59      	subs	r1, r3, r1
 8000f1c:	1a0b      	subs	r3, r1, r0
 8000f1e:	469a      	mov	sl, r3
 8000f20:	4665      	mov	r5, ip
 8000f22:	2601      	movs	r6, #1
 8000f24:	e564      	b.n	80009f0 <__aeabi_dadd+0x98>
 8000f26:	1a1c      	subs	r4, r3, r0
 8000f28:	464a      	mov	r2, r9
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	4180      	sbcs	r0, r0
 8000f2e:	1a8a      	subs	r2, r1, r2
 8000f30:	4240      	negs	r0, r0
 8000f32:	1a12      	subs	r2, r2, r0
 8000f34:	4692      	mov	sl, r2
 8000f36:	0212      	lsls	r2, r2, #8
 8000f38:	d549      	bpl.n	8000fce <__aeabi_dadd+0x676>
 8000f3a:	4642      	mov	r2, r8
 8000f3c:	1ad4      	subs	r4, r2, r3
 8000f3e:	45a0      	cmp	r8, r4
 8000f40:	4180      	sbcs	r0, r0
 8000f42:	464b      	mov	r3, r9
 8000f44:	4240      	negs	r0, r0
 8000f46:	1a59      	subs	r1, r3, r1
 8000f48:	1a0b      	subs	r3, r1, r0
 8000f4a:	469a      	mov	sl, r3
 8000f4c:	4665      	mov	r5, ip
 8000f4e:	e57f      	b.n	8000a50 <__aeabi_dadd+0xf8>
 8000f50:	464b      	mov	r3, r9
 8000f52:	464a      	mov	r2, r9
 8000f54:	08c0      	lsrs	r0, r0, #3
 8000f56:	075b      	lsls	r3, r3, #29
 8000f58:	4303      	orrs	r3, r0
 8000f5a:	08d1      	lsrs	r1, r2, #3
 8000f5c:	e62b      	b.n	8000bb6 <__aeabi_dadd+0x25e>
 8000f5e:	464a      	mov	r2, r9
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	4302      	orrs	r2, r0
 8000f64:	d138      	bne.n	8000fd8 <__aeabi_dadd+0x680>
 8000f66:	074a      	lsls	r2, r1, #29
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	08c9      	lsrs	r1, r1, #3
 8000f6c:	e646      	b.n	8000bfc <__aeabi_dadd+0x2a4>
 8000f6e:	464b      	mov	r3, r9
 8000f70:	464a      	mov	r2, r9
 8000f72:	08c0      	lsrs	r0, r0, #3
 8000f74:	075b      	lsls	r3, r3, #29
 8000f76:	4303      	orrs	r3, r0
 8000f78:	08d1      	lsrs	r1, r2, #3
 8000f7a:	e61f      	b.n	8000bbc <__aeabi_dadd+0x264>
 8000f7c:	181c      	adds	r4, r3, r0
 8000f7e:	429c      	cmp	r4, r3
 8000f80:	419b      	sbcs	r3, r3
 8000f82:	4449      	add	r1, r9
 8000f84:	468a      	mov	sl, r1
 8000f86:	425b      	negs	r3, r3
 8000f88:	449a      	add	sl, r3
 8000f8a:	4653      	mov	r3, sl
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	d400      	bmi.n	8000f92 <__aeabi_dadd+0x63a>
 8000f90:	e607      	b.n	8000ba2 <__aeabi_dadd+0x24a>
 8000f92:	4652      	mov	r2, sl
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <__aeabi_dadd+0x6bc>)
 8000f96:	2601      	movs	r6, #1
 8000f98:	401a      	ands	r2, r3
 8000f9a:	4692      	mov	sl, r2
 8000f9c:	e601      	b.n	8000ba2 <__aeabi_dadd+0x24a>
 8000f9e:	003c      	movs	r4, r7
 8000fa0:	000e      	movs	r6, r1
 8000fa2:	3c20      	subs	r4, #32
 8000fa4:	40e6      	lsrs	r6, r4
 8000fa6:	2f20      	cmp	r7, #32
 8000fa8:	d003      	beq.n	8000fb2 <__aeabi_dadd+0x65a>
 8000faa:	2440      	movs	r4, #64	; 0x40
 8000fac:	1be4      	subs	r4, r4, r7
 8000fae:	40a1      	lsls	r1, r4
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	001c      	movs	r4, r3
 8000fb4:	1e63      	subs	r3, r4, #1
 8000fb6:	419c      	sbcs	r4, r3
 8000fb8:	4334      	orrs	r4, r6
 8000fba:	e65e      	b.n	8000c7a <__aeabi_dadd+0x322>
 8000fbc:	4443      	add	r3, r8
 8000fbe:	4283      	cmp	r3, r0
 8000fc0:	4180      	sbcs	r0, r0
 8000fc2:	4449      	add	r1, r9
 8000fc4:	468a      	mov	sl, r1
 8000fc6:	4240      	negs	r0, r0
 8000fc8:	001c      	movs	r4, r3
 8000fca:	4482      	add	sl, r0
 8000fcc:	e6bc      	b.n	8000d48 <__aeabi_dadd+0x3f0>
 8000fce:	4653      	mov	r3, sl
 8000fd0:	4323      	orrs	r3, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_dadd+0x67e>
 8000fd4:	e6a9      	b.n	8000d2a <__aeabi_dadd+0x3d2>
 8000fd6:	e5e4      	b.n	8000ba2 <__aeabi_dadd+0x24a>
 8000fd8:	074a      	lsls	r2, r1, #29
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	08c9      	lsrs	r1, r1, #3
 8000fe0:	0312      	lsls	r2, r2, #12
 8000fe2:	4211      	tst	r1, r2
 8000fe4:	d009      	beq.n	8000ffa <__aeabi_dadd+0x6a2>
 8000fe6:	4648      	mov	r0, r9
 8000fe8:	08c4      	lsrs	r4, r0, #3
 8000fea:	4214      	tst	r4, r2
 8000fec:	d105      	bne.n	8000ffa <__aeabi_dadd+0x6a2>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	4665      	mov	r5, ip
 8000ff2:	0021      	movs	r1, r4
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	0742      	lsls	r2, r0, #29
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	0f5a      	lsrs	r2, r3, #29
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	0752      	lsls	r2, r2, #29
 8001002:	4313      	orrs	r3, r2
 8001004:	e5fa      	b.n	8000bfc <__aeabi_dadd+0x2a4>
 8001006:	2300      	movs	r3, #0
 8001008:	4a01      	ldr	r2, [pc, #4]	; (8001010 <__aeabi_dadd+0x6b8>)
 800100a:	001c      	movs	r4, r3
 800100c:	e540      	b.n	8000a90 <__aeabi_dadd+0x138>
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	000007ff 	.word	0x000007ff
 8001014:	ff7fffff 	.word	0xff7fffff

08001018 <__aeabi_ddiv>:
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	4657      	mov	r7, sl
 800101c:	464e      	mov	r6, r9
 800101e:	4645      	mov	r5, r8
 8001020:	46de      	mov	lr, fp
 8001022:	b5e0      	push	{r5, r6, r7, lr}
 8001024:	030c      	lsls	r4, r1, #12
 8001026:	001f      	movs	r7, r3
 8001028:	004b      	lsls	r3, r1, #1
 800102a:	4681      	mov	r9, r0
 800102c:	4692      	mov	sl, r2
 800102e:	0005      	movs	r5, r0
 8001030:	b085      	sub	sp, #20
 8001032:	0b24      	lsrs	r4, r4, #12
 8001034:	0d5b      	lsrs	r3, r3, #21
 8001036:	0fce      	lsrs	r6, r1, #31
 8001038:	2b00      	cmp	r3, #0
 800103a:	d100      	bne.n	800103e <__aeabi_ddiv+0x26>
 800103c:	e152      	b.n	80012e4 <__aeabi_ddiv+0x2cc>
 800103e:	4ad2      	ldr	r2, [pc, #840]	; (8001388 <__aeabi_ddiv+0x370>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x2e>
 8001044:	e16e      	b.n	8001324 <__aeabi_ddiv+0x30c>
 8001046:	0f42      	lsrs	r2, r0, #29
 8001048:	00e4      	lsls	r4, r4, #3
 800104a:	4314      	orrs	r4, r2
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	0412      	lsls	r2, r2, #16
 8001050:	4322      	orrs	r2, r4
 8001052:	4690      	mov	r8, r2
 8001054:	4acd      	ldr	r2, [pc, #820]	; (800138c <__aeabi_ddiv+0x374>)
 8001056:	00c5      	lsls	r5, r0, #3
 8001058:	4693      	mov	fp, r2
 800105a:	449b      	add	fp, r3
 800105c:	2300      	movs	r3, #0
 800105e:	4699      	mov	r9, r3
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	033c      	lsls	r4, r7, #12
 8001064:	007b      	lsls	r3, r7, #1
 8001066:	4650      	mov	r0, sl
 8001068:	0b24      	lsrs	r4, r4, #12
 800106a:	0d5b      	lsrs	r3, r3, #21
 800106c:	0fff      	lsrs	r7, r7, #31
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_ddiv+0x5c>
 8001072:	e11a      	b.n	80012aa <__aeabi_ddiv+0x292>
 8001074:	4ac4      	ldr	r2, [pc, #784]	; (8001388 <__aeabi_ddiv+0x370>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d100      	bne.n	800107c <__aeabi_ddiv+0x64>
 800107a:	e15e      	b.n	800133a <__aeabi_ddiv+0x322>
 800107c:	0f42      	lsrs	r2, r0, #29
 800107e:	00e4      	lsls	r4, r4, #3
 8001080:	4322      	orrs	r2, r4
 8001082:	2480      	movs	r4, #128	; 0x80
 8001084:	0424      	lsls	r4, r4, #16
 8001086:	4314      	orrs	r4, r2
 8001088:	4ac0      	ldr	r2, [pc, #768]	; (800138c <__aeabi_ddiv+0x374>)
 800108a:	00c1      	lsls	r1, r0, #3
 800108c:	4694      	mov	ip, r2
 800108e:	465a      	mov	r2, fp
 8001090:	4463      	add	r3, ip
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	469b      	mov	fp, r3
 8001096:	2000      	movs	r0, #0
 8001098:	0033      	movs	r3, r6
 800109a:	407b      	eors	r3, r7
 800109c:	469a      	mov	sl, r3
 800109e:	464b      	mov	r3, r9
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d827      	bhi.n	80010f4 <__aeabi_ddiv+0xdc>
 80010a4:	4aba      	ldr	r2, [pc, #744]	; (8001390 <__aeabi_ddiv+0x378>)
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	58d3      	ldr	r3, [r2, r3]
 80010aa:	469f      	mov	pc, r3
 80010ac:	46b2      	mov	sl, r6
 80010ae:	9b00      	ldr	r3, [sp, #0]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d016      	beq.n	80010e2 <__aeabi_ddiv+0xca>
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0xa2>
 80010b8:	e287      	b.n	80015ca <__aeabi_ddiv+0x5b2>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d000      	beq.n	80010c0 <__aeabi_ddiv+0xa8>
 80010be:	e0d5      	b.n	800126c <__aeabi_ddiv+0x254>
 80010c0:	2300      	movs	r3, #0
 80010c2:	2200      	movs	r2, #0
 80010c4:	2500      	movs	r5, #0
 80010c6:	051b      	lsls	r3, r3, #20
 80010c8:	4313      	orrs	r3, r2
 80010ca:	4652      	mov	r2, sl
 80010cc:	07d2      	lsls	r2, r2, #31
 80010ce:	4313      	orrs	r3, r2
 80010d0:	0028      	movs	r0, r5
 80010d2:	0019      	movs	r1, r3
 80010d4:	b005      	add	sp, #20
 80010d6:	bcf0      	pop	{r4, r5, r6, r7}
 80010d8:	46bb      	mov	fp, r7
 80010da:	46b2      	mov	sl, r6
 80010dc:	46a9      	mov	r9, r5
 80010de:	46a0      	mov	r8, r4
 80010e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e2:	2200      	movs	r2, #0
 80010e4:	2500      	movs	r5, #0
 80010e6:	4ba8      	ldr	r3, [pc, #672]	; (8001388 <__aeabi_ddiv+0x370>)
 80010e8:	e7ed      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80010ea:	46ba      	mov	sl, r7
 80010ec:	46a0      	mov	r8, r4
 80010ee:	000d      	movs	r5, r1
 80010f0:	9000      	str	r0, [sp, #0]
 80010f2:	e7dc      	b.n	80010ae <__aeabi_ddiv+0x96>
 80010f4:	4544      	cmp	r4, r8
 80010f6:	d200      	bcs.n	80010fa <__aeabi_ddiv+0xe2>
 80010f8:	e1c4      	b.n	8001484 <__aeabi_ddiv+0x46c>
 80010fa:	d100      	bne.n	80010fe <__aeabi_ddiv+0xe6>
 80010fc:	e1bf      	b.n	800147e <__aeabi_ddiv+0x466>
 80010fe:	2301      	movs	r3, #1
 8001100:	425b      	negs	r3, r3
 8001102:	469c      	mov	ip, r3
 8001104:	002e      	movs	r6, r5
 8001106:	4640      	mov	r0, r8
 8001108:	2500      	movs	r5, #0
 800110a:	44e3      	add	fp, ip
 800110c:	0223      	lsls	r3, r4, #8
 800110e:	0e0c      	lsrs	r4, r1, #24
 8001110:	431c      	orrs	r4, r3
 8001112:	0c1b      	lsrs	r3, r3, #16
 8001114:	4699      	mov	r9, r3
 8001116:	0423      	lsls	r3, r4, #16
 8001118:	020a      	lsls	r2, r1, #8
 800111a:	0c1f      	lsrs	r7, r3, #16
 800111c:	4649      	mov	r1, r9
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	9701      	str	r7, [sp, #4]
 8001122:	f7ff f875 	bl	8000210 <__aeabi_uidivmod>
 8001126:	0002      	movs	r2, r0
 8001128:	437a      	muls	r2, r7
 800112a:	040b      	lsls	r3, r1, #16
 800112c:	0c31      	lsrs	r1, r6, #16
 800112e:	4680      	mov	r8, r0
 8001130:	4319      	orrs	r1, r3
 8001132:	428a      	cmp	r2, r1
 8001134:	d907      	bls.n	8001146 <__aeabi_ddiv+0x12e>
 8001136:	2301      	movs	r3, #1
 8001138:	425b      	negs	r3, r3
 800113a:	469c      	mov	ip, r3
 800113c:	1909      	adds	r1, r1, r4
 800113e:	44e0      	add	r8, ip
 8001140:	428c      	cmp	r4, r1
 8001142:	d800      	bhi.n	8001146 <__aeabi_ddiv+0x12e>
 8001144:	e201      	b.n	800154a <__aeabi_ddiv+0x532>
 8001146:	1a88      	subs	r0, r1, r2
 8001148:	4649      	mov	r1, r9
 800114a:	f7ff f861 	bl	8000210 <__aeabi_uidivmod>
 800114e:	9a01      	ldr	r2, [sp, #4]
 8001150:	0436      	lsls	r6, r6, #16
 8001152:	4342      	muls	r2, r0
 8001154:	0409      	lsls	r1, r1, #16
 8001156:	0c36      	lsrs	r6, r6, #16
 8001158:	0003      	movs	r3, r0
 800115a:	430e      	orrs	r6, r1
 800115c:	42b2      	cmp	r2, r6
 800115e:	d904      	bls.n	800116a <__aeabi_ddiv+0x152>
 8001160:	1936      	adds	r6, r6, r4
 8001162:	3b01      	subs	r3, #1
 8001164:	42b4      	cmp	r4, r6
 8001166:	d800      	bhi.n	800116a <__aeabi_ddiv+0x152>
 8001168:	e1e9      	b.n	800153e <__aeabi_ddiv+0x526>
 800116a:	1ab0      	subs	r0, r6, r2
 800116c:	4642      	mov	r2, r8
 800116e:	9e00      	ldr	r6, [sp, #0]
 8001170:	0412      	lsls	r2, r2, #16
 8001172:	431a      	orrs	r2, r3
 8001174:	0c33      	lsrs	r3, r6, #16
 8001176:	001f      	movs	r7, r3
 8001178:	0c11      	lsrs	r1, r2, #16
 800117a:	4690      	mov	r8, r2
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	0413      	lsls	r3, r2, #16
 8001180:	0432      	lsls	r2, r6, #16
 8001182:	0c16      	lsrs	r6, r2, #16
 8001184:	0032      	movs	r2, r6
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	435a      	muls	r2, r3
 800118a:	9603      	str	r6, [sp, #12]
 800118c:	437b      	muls	r3, r7
 800118e:	434e      	muls	r6, r1
 8001190:	4379      	muls	r1, r7
 8001192:	0c17      	lsrs	r7, r2, #16
 8001194:	46bc      	mov	ip, r7
 8001196:	199b      	adds	r3, r3, r6
 8001198:	4463      	add	r3, ip
 800119a:	429e      	cmp	r6, r3
 800119c:	d903      	bls.n	80011a6 <__aeabi_ddiv+0x18e>
 800119e:	2680      	movs	r6, #128	; 0x80
 80011a0:	0276      	lsls	r6, r6, #9
 80011a2:	46b4      	mov	ip, r6
 80011a4:	4461      	add	r1, ip
 80011a6:	0c1e      	lsrs	r6, r3, #16
 80011a8:	1871      	adds	r1, r6, r1
 80011aa:	0416      	lsls	r6, r2, #16
 80011ac:	041b      	lsls	r3, r3, #16
 80011ae:	0c36      	lsrs	r6, r6, #16
 80011b0:	199e      	adds	r6, r3, r6
 80011b2:	4288      	cmp	r0, r1
 80011b4:	d302      	bcc.n	80011bc <__aeabi_ddiv+0x1a4>
 80011b6:	d112      	bne.n	80011de <__aeabi_ddiv+0x1c6>
 80011b8:	42b5      	cmp	r5, r6
 80011ba:	d210      	bcs.n	80011de <__aeabi_ddiv+0x1c6>
 80011bc:	4643      	mov	r3, r8
 80011be:	1e5a      	subs	r2, r3, #1
 80011c0:	9b00      	ldr	r3, [sp, #0]
 80011c2:	469c      	mov	ip, r3
 80011c4:	4465      	add	r5, ip
 80011c6:	001f      	movs	r7, r3
 80011c8:	429d      	cmp	r5, r3
 80011ca:	419b      	sbcs	r3, r3
 80011cc:	425b      	negs	r3, r3
 80011ce:	191b      	adds	r3, r3, r4
 80011d0:	18c0      	adds	r0, r0, r3
 80011d2:	4284      	cmp	r4, r0
 80011d4:	d200      	bcs.n	80011d8 <__aeabi_ddiv+0x1c0>
 80011d6:	e19e      	b.n	8001516 <__aeabi_ddiv+0x4fe>
 80011d8:	d100      	bne.n	80011dc <__aeabi_ddiv+0x1c4>
 80011da:	e199      	b.n	8001510 <__aeabi_ddiv+0x4f8>
 80011dc:	4690      	mov	r8, r2
 80011de:	1bae      	subs	r6, r5, r6
 80011e0:	42b5      	cmp	r5, r6
 80011e2:	41ad      	sbcs	r5, r5
 80011e4:	1a40      	subs	r0, r0, r1
 80011e6:	426d      	negs	r5, r5
 80011e8:	1b40      	subs	r0, r0, r5
 80011ea:	4284      	cmp	r4, r0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x1d8>
 80011ee:	e1d2      	b.n	8001596 <__aeabi_ddiv+0x57e>
 80011f0:	4649      	mov	r1, r9
 80011f2:	f7ff f80d 	bl	8000210 <__aeabi_uidivmod>
 80011f6:	9a01      	ldr	r2, [sp, #4]
 80011f8:	040b      	lsls	r3, r1, #16
 80011fa:	4342      	muls	r2, r0
 80011fc:	0c31      	lsrs	r1, r6, #16
 80011fe:	0005      	movs	r5, r0
 8001200:	4319      	orrs	r1, r3
 8001202:	428a      	cmp	r2, r1
 8001204:	d900      	bls.n	8001208 <__aeabi_ddiv+0x1f0>
 8001206:	e16c      	b.n	80014e2 <__aeabi_ddiv+0x4ca>
 8001208:	1a88      	subs	r0, r1, r2
 800120a:	4649      	mov	r1, r9
 800120c:	f7ff f800 	bl	8000210 <__aeabi_uidivmod>
 8001210:	9a01      	ldr	r2, [sp, #4]
 8001212:	0436      	lsls	r6, r6, #16
 8001214:	4342      	muls	r2, r0
 8001216:	0409      	lsls	r1, r1, #16
 8001218:	0c36      	lsrs	r6, r6, #16
 800121a:	0003      	movs	r3, r0
 800121c:	430e      	orrs	r6, r1
 800121e:	42b2      	cmp	r2, r6
 8001220:	d900      	bls.n	8001224 <__aeabi_ddiv+0x20c>
 8001222:	e153      	b.n	80014cc <__aeabi_ddiv+0x4b4>
 8001224:	9803      	ldr	r0, [sp, #12]
 8001226:	1ab6      	subs	r6, r6, r2
 8001228:	0002      	movs	r2, r0
 800122a:	042d      	lsls	r5, r5, #16
 800122c:	431d      	orrs	r5, r3
 800122e:	9f02      	ldr	r7, [sp, #8]
 8001230:	042b      	lsls	r3, r5, #16
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	435a      	muls	r2, r3
 8001236:	437b      	muls	r3, r7
 8001238:	469c      	mov	ip, r3
 800123a:	0c29      	lsrs	r1, r5, #16
 800123c:	4348      	muls	r0, r1
 800123e:	0c13      	lsrs	r3, r2, #16
 8001240:	4484      	add	ip, r0
 8001242:	4463      	add	r3, ip
 8001244:	4379      	muls	r1, r7
 8001246:	4298      	cmp	r0, r3
 8001248:	d903      	bls.n	8001252 <__aeabi_ddiv+0x23a>
 800124a:	2080      	movs	r0, #128	; 0x80
 800124c:	0240      	lsls	r0, r0, #9
 800124e:	4684      	mov	ip, r0
 8001250:	4461      	add	r1, ip
 8001252:	0c18      	lsrs	r0, r3, #16
 8001254:	0412      	lsls	r2, r2, #16
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	0c12      	lsrs	r2, r2, #16
 800125a:	1840      	adds	r0, r0, r1
 800125c:	189b      	adds	r3, r3, r2
 800125e:	4286      	cmp	r6, r0
 8001260:	d200      	bcs.n	8001264 <__aeabi_ddiv+0x24c>
 8001262:	e100      	b.n	8001466 <__aeabi_ddiv+0x44e>
 8001264:	d100      	bne.n	8001268 <__aeabi_ddiv+0x250>
 8001266:	e0fb      	b.n	8001460 <__aeabi_ddiv+0x448>
 8001268:	2301      	movs	r3, #1
 800126a:	431d      	orrs	r5, r3
 800126c:	4b49      	ldr	r3, [pc, #292]	; (8001394 <__aeabi_ddiv+0x37c>)
 800126e:	445b      	add	r3, fp
 8001270:	2b00      	cmp	r3, #0
 8001272:	dc00      	bgt.n	8001276 <__aeabi_ddiv+0x25e>
 8001274:	e0aa      	b.n	80013cc <__aeabi_ddiv+0x3b4>
 8001276:	076a      	lsls	r2, r5, #29
 8001278:	d000      	beq.n	800127c <__aeabi_ddiv+0x264>
 800127a:	e13d      	b.n	80014f8 <__aeabi_ddiv+0x4e0>
 800127c:	08e9      	lsrs	r1, r5, #3
 800127e:	4642      	mov	r2, r8
 8001280:	01d2      	lsls	r2, r2, #7
 8001282:	d506      	bpl.n	8001292 <__aeabi_ddiv+0x27a>
 8001284:	4642      	mov	r2, r8
 8001286:	4b44      	ldr	r3, [pc, #272]	; (8001398 <__aeabi_ddiv+0x380>)
 8001288:	401a      	ands	r2, r3
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	4690      	mov	r8, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	445b      	add	r3, fp
 8001292:	4a42      	ldr	r2, [pc, #264]	; (800139c <__aeabi_ddiv+0x384>)
 8001294:	4293      	cmp	r3, r2
 8001296:	dd00      	ble.n	800129a <__aeabi_ddiv+0x282>
 8001298:	e723      	b.n	80010e2 <__aeabi_ddiv+0xca>
 800129a:	4642      	mov	r2, r8
 800129c:	055b      	lsls	r3, r3, #21
 800129e:	0755      	lsls	r5, r2, #29
 80012a0:	0252      	lsls	r2, r2, #9
 80012a2:	430d      	orrs	r5, r1
 80012a4:	0b12      	lsrs	r2, r2, #12
 80012a6:	0d5b      	lsrs	r3, r3, #21
 80012a8:	e70d      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80012aa:	4651      	mov	r1, sl
 80012ac:	4321      	orrs	r1, r4
 80012ae:	d100      	bne.n	80012b2 <__aeabi_ddiv+0x29a>
 80012b0:	e07c      	b.n	80013ac <__aeabi_ddiv+0x394>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d100      	bne.n	80012b8 <__aeabi_ddiv+0x2a0>
 80012b6:	e0fb      	b.n	80014b0 <__aeabi_ddiv+0x498>
 80012b8:	0020      	movs	r0, r4
 80012ba:	f001 fa63 	bl	8002784 <__clzsi2>
 80012be:	0002      	movs	r2, r0
 80012c0:	3a0b      	subs	r2, #11
 80012c2:	231d      	movs	r3, #29
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	4652      	mov	r2, sl
 80012c8:	0001      	movs	r1, r0
 80012ca:	40da      	lsrs	r2, r3
 80012cc:	4653      	mov	r3, sl
 80012ce:	3908      	subs	r1, #8
 80012d0:	408b      	lsls	r3, r1
 80012d2:	408c      	lsls	r4, r1
 80012d4:	0019      	movs	r1, r3
 80012d6:	4314      	orrs	r4, r2
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <__aeabi_ddiv+0x388>)
 80012da:	4458      	add	r0, fp
 80012dc:	469b      	mov	fp, r3
 80012de:	4483      	add	fp, r0
 80012e0:	2000      	movs	r0, #0
 80012e2:	e6d9      	b.n	8001098 <__aeabi_ddiv+0x80>
 80012e4:	0003      	movs	r3, r0
 80012e6:	4323      	orrs	r3, r4
 80012e8:	4698      	mov	r8, r3
 80012ea:	d044      	beq.n	8001376 <__aeabi_ddiv+0x35e>
 80012ec:	2c00      	cmp	r4, #0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_ddiv+0x2da>
 80012f0:	e0cf      	b.n	8001492 <__aeabi_ddiv+0x47a>
 80012f2:	0020      	movs	r0, r4
 80012f4:	f001 fa46 	bl	8002784 <__clzsi2>
 80012f8:	0001      	movs	r1, r0
 80012fa:	0002      	movs	r2, r0
 80012fc:	390b      	subs	r1, #11
 80012fe:	231d      	movs	r3, #29
 8001300:	1a5b      	subs	r3, r3, r1
 8001302:	4649      	mov	r1, r9
 8001304:	0010      	movs	r0, r2
 8001306:	40d9      	lsrs	r1, r3
 8001308:	3808      	subs	r0, #8
 800130a:	4084      	lsls	r4, r0
 800130c:	000b      	movs	r3, r1
 800130e:	464d      	mov	r5, r9
 8001310:	4323      	orrs	r3, r4
 8001312:	4698      	mov	r8, r3
 8001314:	4085      	lsls	r5, r0
 8001316:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <__aeabi_ddiv+0x38c>)
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	469b      	mov	fp, r3
 800131c:	2300      	movs	r3, #0
 800131e:	4699      	mov	r9, r3
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	e69e      	b.n	8001062 <__aeabi_ddiv+0x4a>
 8001324:	0002      	movs	r2, r0
 8001326:	4322      	orrs	r2, r4
 8001328:	4690      	mov	r8, r2
 800132a:	d11d      	bne.n	8001368 <__aeabi_ddiv+0x350>
 800132c:	2208      	movs	r2, #8
 800132e:	469b      	mov	fp, r3
 8001330:	2302      	movs	r3, #2
 8001332:	2500      	movs	r5, #0
 8001334:	4691      	mov	r9, r2
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	e693      	b.n	8001062 <__aeabi_ddiv+0x4a>
 800133a:	4651      	mov	r1, sl
 800133c:	4321      	orrs	r1, r4
 800133e:	d109      	bne.n	8001354 <__aeabi_ddiv+0x33c>
 8001340:	2302      	movs	r3, #2
 8001342:	464a      	mov	r2, r9
 8001344:	431a      	orrs	r2, r3
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <__aeabi_ddiv+0x390>)
 8001348:	4691      	mov	r9, r2
 800134a:	469c      	mov	ip, r3
 800134c:	2400      	movs	r4, #0
 800134e:	2002      	movs	r0, #2
 8001350:	44e3      	add	fp, ip
 8001352:	e6a1      	b.n	8001098 <__aeabi_ddiv+0x80>
 8001354:	2303      	movs	r3, #3
 8001356:	464a      	mov	r2, r9
 8001358:	431a      	orrs	r2, r3
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <__aeabi_ddiv+0x390>)
 800135c:	4691      	mov	r9, r2
 800135e:	469c      	mov	ip, r3
 8001360:	4651      	mov	r1, sl
 8001362:	2003      	movs	r0, #3
 8001364:	44e3      	add	fp, ip
 8001366:	e697      	b.n	8001098 <__aeabi_ddiv+0x80>
 8001368:	220c      	movs	r2, #12
 800136a:	469b      	mov	fp, r3
 800136c:	2303      	movs	r3, #3
 800136e:	46a0      	mov	r8, r4
 8001370:	4691      	mov	r9, r2
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	e675      	b.n	8001062 <__aeabi_ddiv+0x4a>
 8001376:	2304      	movs	r3, #4
 8001378:	4699      	mov	r9, r3
 800137a:	2300      	movs	r3, #0
 800137c:	469b      	mov	fp, r3
 800137e:	3301      	adds	r3, #1
 8001380:	2500      	movs	r5, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	e66d      	b.n	8001062 <__aeabi_ddiv+0x4a>
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	000007ff 	.word	0x000007ff
 800138c:	fffffc01 	.word	0xfffffc01
 8001390:	080072bc 	.word	0x080072bc
 8001394:	000003ff 	.word	0x000003ff
 8001398:	feffffff 	.word	0xfeffffff
 800139c:	000007fe 	.word	0x000007fe
 80013a0:	000003f3 	.word	0x000003f3
 80013a4:	fffffc0d 	.word	0xfffffc0d
 80013a8:	fffff801 	.word	0xfffff801
 80013ac:	464a      	mov	r2, r9
 80013ae:	2301      	movs	r3, #1
 80013b0:	431a      	orrs	r2, r3
 80013b2:	4691      	mov	r9, r2
 80013b4:	2400      	movs	r4, #0
 80013b6:	2001      	movs	r0, #1
 80013b8:	e66e      	b.n	8001098 <__aeabi_ddiv+0x80>
 80013ba:	2300      	movs	r3, #0
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	469a      	mov	sl, r3
 80013c0:	2500      	movs	r5, #0
 80013c2:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <__aeabi_ddiv+0x5cc>)
 80013c4:	0312      	lsls	r2, r2, #12
 80013c6:	e67e      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80013c8:	2501      	movs	r5, #1
 80013ca:	426d      	negs	r5, r5
 80013cc:	2201      	movs	r2, #1
 80013ce:	1ad2      	subs	r2, r2, r3
 80013d0:	2a38      	cmp	r2, #56	; 0x38
 80013d2:	dd00      	ble.n	80013d6 <__aeabi_ddiv+0x3be>
 80013d4:	e674      	b.n	80010c0 <__aeabi_ddiv+0xa8>
 80013d6:	2a1f      	cmp	r2, #31
 80013d8:	dc00      	bgt.n	80013dc <__aeabi_ddiv+0x3c4>
 80013da:	e0bd      	b.n	8001558 <__aeabi_ddiv+0x540>
 80013dc:	211f      	movs	r1, #31
 80013de:	4249      	negs	r1, r1
 80013e0:	1acb      	subs	r3, r1, r3
 80013e2:	4641      	mov	r1, r8
 80013e4:	40d9      	lsrs	r1, r3
 80013e6:	000b      	movs	r3, r1
 80013e8:	2a20      	cmp	r2, #32
 80013ea:	d004      	beq.n	80013f6 <__aeabi_ddiv+0x3de>
 80013ec:	4641      	mov	r1, r8
 80013ee:	4a7e      	ldr	r2, [pc, #504]	; (80015e8 <__aeabi_ddiv+0x5d0>)
 80013f0:	445a      	add	r2, fp
 80013f2:	4091      	lsls	r1, r2
 80013f4:	430d      	orrs	r5, r1
 80013f6:	0029      	movs	r1, r5
 80013f8:	1e4a      	subs	r2, r1, #1
 80013fa:	4191      	sbcs	r1, r2
 80013fc:	4319      	orrs	r1, r3
 80013fe:	2307      	movs	r3, #7
 8001400:	001d      	movs	r5, r3
 8001402:	2200      	movs	r2, #0
 8001404:	400d      	ands	r5, r1
 8001406:	420b      	tst	r3, r1
 8001408:	d100      	bne.n	800140c <__aeabi_ddiv+0x3f4>
 800140a:	e0d0      	b.n	80015ae <__aeabi_ddiv+0x596>
 800140c:	220f      	movs	r2, #15
 800140e:	2300      	movs	r3, #0
 8001410:	400a      	ands	r2, r1
 8001412:	2a04      	cmp	r2, #4
 8001414:	d100      	bne.n	8001418 <__aeabi_ddiv+0x400>
 8001416:	e0c7      	b.n	80015a8 <__aeabi_ddiv+0x590>
 8001418:	1d0a      	adds	r2, r1, #4
 800141a:	428a      	cmp	r2, r1
 800141c:	4189      	sbcs	r1, r1
 800141e:	4249      	negs	r1, r1
 8001420:	185b      	adds	r3, r3, r1
 8001422:	0011      	movs	r1, r2
 8001424:	021a      	lsls	r2, r3, #8
 8001426:	d400      	bmi.n	800142a <__aeabi_ddiv+0x412>
 8001428:	e0be      	b.n	80015a8 <__aeabi_ddiv+0x590>
 800142a:	2301      	movs	r3, #1
 800142c:	2200      	movs	r2, #0
 800142e:	2500      	movs	r5, #0
 8001430:	e649      	b.n	80010c6 <__aeabi_ddiv+0xae>
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	4643      	mov	r3, r8
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	4213      	tst	r3, r2
 800143a:	d008      	beq.n	800144e <__aeabi_ddiv+0x436>
 800143c:	4214      	tst	r4, r2
 800143e:	d106      	bne.n	800144e <__aeabi_ddiv+0x436>
 8001440:	4322      	orrs	r2, r4
 8001442:	0312      	lsls	r2, r2, #12
 8001444:	46ba      	mov	sl, r7
 8001446:	000d      	movs	r5, r1
 8001448:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <__aeabi_ddiv+0x5cc>)
 800144a:	0b12      	lsrs	r2, r2, #12
 800144c:	e63b      	b.n	80010c6 <__aeabi_ddiv+0xae>
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	4643      	mov	r3, r8
 8001452:	0312      	lsls	r2, r2, #12
 8001454:	431a      	orrs	r2, r3
 8001456:	0312      	lsls	r2, r2, #12
 8001458:	46b2      	mov	sl, r6
 800145a:	4b62      	ldr	r3, [pc, #392]	; (80015e4 <__aeabi_ddiv+0x5cc>)
 800145c:	0b12      	lsrs	r2, r2, #12
 800145e:	e632      	b.n	80010c6 <__aeabi_ddiv+0xae>
 8001460:	2b00      	cmp	r3, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_ddiv+0x44e>
 8001464:	e702      	b.n	800126c <__aeabi_ddiv+0x254>
 8001466:	19a6      	adds	r6, r4, r6
 8001468:	1e6a      	subs	r2, r5, #1
 800146a:	42a6      	cmp	r6, r4
 800146c:	d200      	bcs.n	8001470 <__aeabi_ddiv+0x458>
 800146e:	e089      	b.n	8001584 <__aeabi_ddiv+0x56c>
 8001470:	4286      	cmp	r6, r0
 8001472:	d200      	bcs.n	8001476 <__aeabi_ddiv+0x45e>
 8001474:	e09f      	b.n	80015b6 <__aeabi_ddiv+0x59e>
 8001476:	d100      	bne.n	800147a <__aeabi_ddiv+0x462>
 8001478:	e0af      	b.n	80015da <__aeabi_ddiv+0x5c2>
 800147a:	0015      	movs	r5, r2
 800147c:	e6f4      	b.n	8001268 <__aeabi_ddiv+0x250>
 800147e:	42a9      	cmp	r1, r5
 8001480:	d900      	bls.n	8001484 <__aeabi_ddiv+0x46c>
 8001482:	e63c      	b.n	80010fe <__aeabi_ddiv+0xe6>
 8001484:	4643      	mov	r3, r8
 8001486:	07de      	lsls	r6, r3, #31
 8001488:	0858      	lsrs	r0, r3, #1
 800148a:	086b      	lsrs	r3, r5, #1
 800148c:	431e      	orrs	r6, r3
 800148e:	07ed      	lsls	r5, r5, #31
 8001490:	e63c      	b.n	800110c <__aeabi_ddiv+0xf4>
 8001492:	f001 f977 	bl	8002784 <__clzsi2>
 8001496:	0001      	movs	r1, r0
 8001498:	0002      	movs	r2, r0
 800149a:	3115      	adds	r1, #21
 800149c:	3220      	adds	r2, #32
 800149e:	291c      	cmp	r1, #28
 80014a0:	dc00      	bgt.n	80014a4 <__aeabi_ddiv+0x48c>
 80014a2:	e72c      	b.n	80012fe <__aeabi_ddiv+0x2e6>
 80014a4:	464b      	mov	r3, r9
 80014a6:	3808      	subs	r0, #8
 80014a8:	4083      	lsls	r3, r0
 80014aa:	2500      	movs	r5, #0
 80014ac:	4698      	mov	r8, r3
 80014ae:	e732      	b.n	8001316 <__aeabi_ddiv+0x2fe>
 80014b0:	f001 f968 	bl	8002784 <__clzsi2>
 80014b4:	0003      	movs	r3, r0
 80014b6:	001a      	movs	r2, r3
 80014b8:	3215      	adds	r2, #21
 80014ba:	3020      	adds	r0, #32
 80014bc:	2a1c      	cmp	r2, #28
 80014be:	dc00      	bgt.n	80014c2 <__aeabi_ddiv+0x4aa>
 80014c0:	e6ff      	b.n	80012c2 <__aeabi_ddiv+0x2aa>
 80014c2:	4654      	mov	r4, sl
 80014c4:	3b08      	subs	r3, #8
 80014c6:	2100      	movs	r1, #0
 80014c8:	409c      	lsls	r4, r3
 80014ca:	e705      	b.n	80012d8 <__aeabi_ddiv+0x2c0>
 80014cc:	1936      	adds	r6, r6, r4
 80014ce:	3b01      	subs	r3, #1
 80014d0:	42b4      	cmp	r4, r6
 80014d2:	d900      	bls.n	80014d6 <__aeabi_ddiv+0x4be>
 80014d4:	e6a6      	b.n	8001224 <__aeabi_ddiv+0x20c>
 80014d6:	42b2      	cmp	r2, r6
 80014d8:	d800      	bhi.n	80014dc <__aeabi_ddiv+0x4c4>
 80014da:	e6a3      	b.n	8001224 <__aeabi_ddiv+0x20c>
 80014dc:	1e83      	subs	r3, r0, #2
 80014de:	1936      	adds	r6, r6, r4
 80014e0:	e6a0      	b.n	8001224 <__aeabi_ddiv+0x20c>
 80014e2:	1909      	adds	r1, r1, r4
 80014e4:	3d01      	subs	r5, #1
 80014e6:	428c      	cmp	r4, r1
 80014e8:	d900      	bls.n	80014ec <__aeabi_ddiv+0x4d4>
 80014ea:	e68d      	b.n	8001208 <__aeabi_ddiv+0x1f0>
 80014ec:	428a      	cmp	r2, r1
 80014ee:	d800      	bhi.n	80014f2 <__aeabi_ddiv+0x4da>
 80014f0:	e68a      	b.n	8001208 <__aeabi_ddiv+0x1f0>
 80014f2:	1e85      	subs	r5, r0, #2
 80014f4:	1909      	adds	r1, r1, r4
 80014f6:	e687      	b.n	8001208 <__aeabi_ddiv+0x1f0>
 80014f8:	220f      	movs	r2, #15
 80014fa:	402a      	ands	r2, r5
 80014fc:	2a04      	cmp	r2, #4
 80014fe:	d100      	bne.n	8001502 <__aeabi_ddiv+0x4ea>
 8001500:	e6bc      	b.n	800127c <__aeabi_ddiv+0x264>
 8001502:	1d29      	adds	r1, r5, #4
 8001504:	42a9      	cmp	r1, r5
 8001506:	41ad      	sbcs	r5, r5
 8001508:	426d      	negs	r5, r5
 800150a:	08c9      	lsrs	r1, r1, #3
 800150c:	44a8      	add	r8, r5
 800150e:	e6b6      	b.n	800127e <__aeabi_ddiv+0x266>
 8001510:	42af      	cmp	r7, r5
 8001512:	d900      	bls.n	8001516 <__aeabi_ddiv+0x4fe>
 8001514:	e662      	b.n	80011dc <__aeabi_ddiv+0x1c4>
 8001516:	4281      	cmp	r1, r0
 8001518:	d804      	bhi.n	8001524 <__aeabi_ddiv+0x50c>
 800151a:	d000      	beq.n	800151e <__aeabi_ddiv+0x506>
 800151c:	e65e      	b.n	80011dc <__aeabi_ddiv+0x1c4>
 800151e:	42ae      	cmp	r6, r5
 8001520:	d800      	bhi.n	8001524 <__aeabi_ddiv+0x50c>
 8001522:	e65b      	b.n	80011dc <__aeabi_ddiv+0x1c4>
 8001524:	2302      	movs	r3, #2
 8001526:	425b      	negs	r3, r3
 8001528:	469c      	mov	ip, r3
 800152a:	9b00      	ldr	r3, [sp, #0]
 800152c:	44e0      	add	r8, ip
 800152e:	469c      	mov	ip, r3
 8001530:	4465      	add	r5, ip
 8001532:	429d      	cmp	r5, r3
 8001534:	419b      	sbcs	r3, r3
 8001536:	425b      	negs	r3, r3
 8001538:	191b      	adds	r3, r3, r4
 800153a:	18c0      	adds	r0, r0, r3
 800153c:	e64f      	b.n	80011de <__aeabi_ddiv+0x1c6>
 800153e:	42b2      	cmp	r2, r6
 8001540:	d800      	bhi.n	8001544 <__aeabi_ddiv+0x52c>
 8001542:	e612      	b.n	800116a <__aeabi_ddiv+0x152>
 8001544:	1e83      	subs	r3, r0, #2
 8001546:	1936      	adds	r6, r6, r4
 8001548:	e60f      	b.n	800116a <__aeabi_ddiv+0x152>
 800154a:	428a      	cmp	r2, r1
 800154c:	d800      	bhi.n	8001550 <__aeabi_ddiv+0x538>
 800154e:	e5fa      	b.n	8001146 <__aeabi_ddiv+0x12e>
 8001550:	1e83      	subs	r3, r0, #2
 8001552:	4698      	mov	r8, r3
 8001554:	1909      	adds	r1, r1, r4
 8001556:	e5f6      	b.n	8001146 <__aeabi_ddiv+0x12e>
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <__aeabi_ddiv+0x5d4>)
 800155a:	0028      	movs	r0, r5
 800155c:	445b      	add	r3, fp
 800155e:	4641      	mov	r1, r8
 8001560:	409d      	lsls	r5, r3
 8001562:	4099      	lsls	r1, r3
 8001564:	40d0      	lsrs	r0, r2
 8001566:	1e6b      	subs	r3, r5, #1
 8001568:	419d      	sbcs	r5, r3
 800156a:	4643      	mov	r3, r8
 800156c:	4301      	orrs	r1, r0
 800156e:	4329      	orrs	r1, r5
 8001570:	40d3      	lsrs	r3, r2
 8001572:	074a      	lsls	r2, r1, #29
 8001574:	d100      	bne.n	8001578 <__aeabi_ddiv+0x560>
 8001576:	e755      	b.n	8001424 <__aeabi_ddiv+0x40c>
 8001578:	220f      	movs	r2, #15
 800157a:	400a      	ands	r2, r1
 800157c:	2a04      	cmp	r2, #4
 800157e:	d000      	beq.n	8001582 <__aeabi_ddiv+0x56a>
 8001580:	e74a      	b.n	8001418 <__aeabi_ddiv+0x400>
 8001582:	e74f      	b.n	8001424 <__aeabi_ddiv+0x40c>
 8001584:	0015      	movs	r5, r2
 8001586:	4286      	cmp	r6, r0
 8001588:	d000      	beq.n	800158c <__aeabi_ddiv+0x574>
 800158a:	e66d      	b.n	8001268 <__aeabi_ddiv+0x250>
 800158c:	9a00      	ldr	r2, [sp, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d000      	beq.n	8001594 <__aeabi_ddiv+0x57c>
 8001592:	e669      	b.n	8001268 <__aeabi_ddiv+0x250>
 8001594:	e66a      	b.n	800126c <__aeabi_ddiv+0x254>
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <__aeabi_ddiv+0x5d8>)
 8001598:	445b      	add	r3, fp
 800159a:	2b00      	cmp	r3, #0
 800159c:	dc00      	bgt.n	80015a0 <__aeabi_ddiv+0x588>
 800159e:	e713      	b.n	80013c8 <__aeabi_ddiv+0x3b0>
 80015a0:	2501      	movs	r5, #1
 80015a2:	2100      	movs	r1, #0
 80015a4:	44a8      	add	r8, r5
 80015a6:	e66a      	b.n	800127e <__aeabi_ddiv+0x266>
 80015a8:	075d      	lsls	r5, r3, #29
 80015aa:	025b      	lsls	r3, r3, #9
 80015ac:	0b1a      	lsrs	r2, r3, #12
 80015ae:	08c9      	lsrs	r1, r1, #3
 80015b0:	2300      	movs	r3, #0
 80015b2:	430d      	orrs	r5, r1
 80015b4:	e587      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80015b6:	9900      	ldr	r1, [sp, #0]
 80015b8:	3d02      	subs	r5, #2
 80015ba:	004a      	lsls	r2, r1, #1
 80015bc:	428a      	cmp	r2, r1
 80015be:	41bf      	sbcs	r7, r7
 80015c0:	427f      	negs	r7, r7
 80015c2:	193f      	adds	r7, r7, r4
 80015c4:	19f6      	adds	r6, r6, r7
 80015c6:	9200      	str	r2, [sp, #0]
 80015c8:	e7dd      	b.n	8001586 <__aeabi_ddiv+0x56e>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	4643      	mov	r3, r8
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	431a      	orrs	r2, r3
 80015d2:	0312      	lsls	r2, r2, #12
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <__aeabi_ddiv+0x5cc>)
 80015d6:	0b12      	lsrs	r2, r2, #12
 80015d8:	e575      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80015da:	9900      	ldr	r1, [sp, #0]
 80015dc:	4299      	cmp	r1, r3
 80015de:	d3ea      	bcc.n	80015b6 <__aeabi_ddiv+0x59e>
 80015e0:	0015      	movs	r5, r2
 80015e2:	e7d3      	b.n	800158c <__aeabi_ddiv+0x574>
 80015e4:	000007ff 	.word	0x000007ff
 80015e8:	0000043e 	.word	0x0000043e
 80015ec:	0000041e 	.word	0x0000041e
 80015f0:	000003ff 	.word	0x000003ff

080015f4 <__eqdf2>:
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	464e      	mov	r6, r9
 80015f8:	4645      	mov	r5, r8
 80015fa:	46de      	mov	lr, fp
 80015fc:	4657      	mov	r7, sl
 80015fe:	4690      	mov	r8, r2
 8001600:	b5e0      	push	{r5, r6, r7, lr}
 8001602:	0017      	movs	r7, r2
 8001604:	031a      	lsls	r2, r3, #12
 8001606:	0b12      	lsrs	r2, r2, #12
 8001608:	0005      	movs	r5, r0
 800160a:	4684      	mov	ip, r0
 800160c:	4819      	ldr	r0, [pc, #100]	; (8001674 <__eqdf2+0x80>)
 800160e:	030e      	lsls	r6, r1, #12
 8001610:	004c      	lsls	r4, r1, #1
 8001612:	4691      	mov	r9, r2
 8001614:	005a      	lsls	r2, r3, #1
 8001616:	0fdb      	lsrs	r3, r3, #31
 8001618:	469b      	mov	fp, r3
 800161a:	0b36      	lsrs	r6, r6, #12
 800161c:	0d64      	lsrs	r4, r4, #21
 800161e:	0fc9      	lsrs	r1, r1, #31
 8001620:	0d52      	lsrs	r2, r2, #21
 8001622:	4284      	cmp	r4, r0
 8001624:	d019      	beq.n	800165a <__eqdf2+0x66>
 8001626:	4282      	cmp	r2, r0
 8001628:	d010      	beq.n	800164c <__eqdf2+0x58>
 800162a:	2001      	movs	r0, #1
 800162c:	4294      	cmp	r4, r2
 800162e:	d10e      	bne.n	800164e <__eqdf2+0x5a>
 8001630:	454e      	cmp	r6, r9
 8001632:	d10c      	bne.n	800164e <__eqdf2+0x5a>
 8001634:	2001      	movs	r0, #1
 8001636:	45c4      	cmp	ip, r8
 8001638:	d109      	bne.n	800164e <__eqdf2+0x5a>
 800163a:	4559      	cmp	r1, fp
 800163c:	d017      	beq.n	800166e <__eqdf2+0x7a>
 800163e:	2c00      	cmp	r4, #0
 8001640:	d105      	bne.n	800164e <__eqdf2+0x5a>
 8001642:	0030      	movs	r0, r6
 8001644:	4328      	orrs	r0, r5
 8001646:	1e43      	subs	r3, r0, #1
 8001648:	4198      	sbcs	r0, r3
 800164a:	e000      	b.n	800164e <__eqdf2+0x5a>
 800164c:	2001      	movs	r0, #1
 800164e:	bcf0      	pop	{r4, r5, r6, r7}
 8001650:	46bb      	mov	fp, r7
 8001652:	46b2      	mov	sl, r6
 8001654:	46a9      	mov	r9, r5
 8001656:	46a0      	mov	r8, r4
 8001658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165a:	0033      	movs	r3, r6
 800165c:	2001      	movs	r0, #1
 800165e:	432b      	orrs	r3, r5
 8001660:	d1f5      	bne.n	800164e <__eqdf2+0x5a>
 8001662:	42a2      	cmp	r2, r4
 8001664:	d1f3      	bne.n	800164e <__eqdf2+0x5a>
 8001666:	464b      	mov	r3, r9
 8001668:	433b      	orrs	r3, r7
 800166a:	d1f0      	bne.n	800164e <__eqdf2+0x5a>
 800166c:	e7e2      	b.n	8001634 <__eqdf2+0x40>
 800166e:	2000      	movs	r0, #0
 8001670:	e7ed      	b.n	800164e <__eqdf2+0x5a>
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	000007ff 	.word	0x000007ff

08001678 <__gedf2>:
 8001678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167a:	4647      	mov	r7, r8
 800167c:	46ce      	mov	lr, r9
 800167e:	0004      	movs	r4, r0
 8001680:	0018      	movs	r0, r3
 8001682:	0016      	movs	r6, r2
 8001684:	031b      	lsls	r3, r3, #12
 8001686:	0b1b      	lsrs	r3, r3, #12
 8001688:	4d2d      	ldr	r5, [pc, #180]	; (8001740 <__gedf2+0xc8>)
 800168a:	004a      	lsls	r2, r1, #1
 800168c:	4699      	mov	r9, r3
 800168e:	b580      	push	{r7, lr}
 8001690:	0043      	lsls	r3, r0, #1
 8001692:	030f      	lsls	r7, r1, #12
 8001694:	46a4      	mov	ip, r4
 8001696:	46b0      	mov	r8, r6
 8001698:	0b3f      	lsrs	r7, r7, #12
 800169a:	0d52      	lsrs	r2, r2, #21
 800169c:	0fc9      	lsrs	r1, r1, #31
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	0fc0      	lsrs	r0, r0, #31
 80016a2:	42aa      	cmp	r2, r5
 80016a4:	d021      	beq.n	80016ea <__gedf2+0x72>
 80016a6:	42ab      	cmp	r3, r5
 80016a8:	d013      	beq.n	80016d2 <__gedf2+0x5a>
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	d122      	bne.n	80016f4 <__gedf2+0x7c>
 80016ae:	433c      	orrs	r4, r7
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <__gedf2+0x42>
 80016b4:	464d      	mov	r5, r9
 80016b6:	432e      	orrs	r6, r5
 80016b8:	d022      	beq.n	8001700 <__gedf2+0x88>
 80016ba:	2c00      	cmp	r4, #0
 80016bc:	d010      	beq.n	80016e0 <__gedf2+0x68>
 80016be:	4281      	cmp	r1, r0
 80016c0:	d022      	beq.n	8001708 <__gedf2+0x90>
 80016c2:	2002      	movs	r0, #2
 80016c4:	3901      	subs	r1, #1
 80016c6:	4008      	ands	r0, r1
 80016c8:	3801      	subs	r0, #1
 80016ca:	bcc0      	pop	{r6, r7}
 80016cc:	46b9      	mov	r9, r7
 80016ce:	46b0      	mov	r8, r6
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d2:	464d      	mov	r5, r9
 80016d4:	432e      	orrs	r6, r5
 80016d6:	d129      	bne.n	800172c <__gedf2+0xb4>
 80016d8:	2a00      	cmp	r2, #0
 80016da:	d1f0      	bne.n	80016be <__gedf2+0x46>
 80016dc:	433c      	orrs	r4, r7
 80016de:	d1ee      	bne.n	80016be <__gedf2+0x46>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d1f2      	bne.n	80016ca <__gedf2+0x52>
 80016e4:	2001      	movs	r0, #1
 80016e6:	4240      	negs	r0, r0
 80016e8:	e7ef      	b.n	80016ca <__gedf2+0x52>
 80016ea:	003d      	movs	r5, r7
 80016ec:	4325      	orrs	r5, r4
 80016ee:	d11d      	bne.n	800172c <__gedf2+0xb4>
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d0ee      	beq.n	80016d2 <__gedf2+0x5a>
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e2      	bne.n	80016be <__gedf2+0x46>
 80016f8:	464c      	mov	r4, r9
 80016fa:	4326      	orrs	r6, r4
 80016fc:	d1df      	bne.n	80016be <__gedf2+0x46>
 80016fe:	e7e0      	b.n	80016c2 <__gedf2+0x4a>
 8001700:	2000      	movs	r0, #0
 8001702:	2c00      	cmp	r4, #0
 8001704:	d0e1      	beq.n	80016ca <__gedf2+0x52>
 8001706:	e7dc      	b.n	80016c2 <__gedf2+0x4a>
 8001708:	429a      	cmp	r2, r3
 800170a:	dc0a      	bgt.n	8001722 <__gedf2+0xaa>
 800170c:	dbe8      	blt.n	80016e0 <__gedf2+0x68>
 800170e:	454f      	cmp	r7, r9
 8001710:	d8d7      	bhi.n	80016c2 <__gedf2+0x4a>
 8001712:	d00e      	beq.n	8001732 <__gedf2+0xba>
 8001714:	2000      	movs	r0, #0
 8001716:	454f      	cmp	r7, r9
 8001718:	d2d7      	bcs.n	80016ca <__gedf2+0x52>
 800171a:	2900      	cmp	r1, #0
 800171c:	d0e2      	beq.n	80016e4 <__gedf2+0x6c>
 800171e:	0008      	movs	r0, r1
 8001720:	e7d3      	b.n	80016ca <__gedf2+0x52>
 8001722:	4243      	negs	r3, r0
 8001724:	4158      	adcs	r0, r3
 8001726:	0040      	lsls	r0, r0, #1
 8001728:	3801      	subs	r0, #1
 800172a:	e7ce      	b.n	80016ca <__gedf2+0x52>
 800172c:	2002      	movs	r0, #2
 800172e:	4240      	negs	r0, r0
 8001730:	e7cb      	b.n	80016ca <__gedf2+0x52>
 8001732:	45c4      	cmp	ip, r8
 8001734:	d8c5      	bhi.n	80016c2 <__gedf2+0x4a>
 8001736:	2000      	movs	r0, #0
 8001738:	45c4      	cmp	ip, r8
 800173a:	d2c6      	bcs.n	80016ca <__gedf2+0x52>
 800173c:	e7ed      	b.n	800171a <__gedf2+0xa2>
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	000007ff 	.word	0x000007ff

08001744 <__ledf2>:
 8001744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001746:	4647      	mov	r7, r8
 8001748:	46ce      	mov	lr, r9
 800174a:	0004      	movs	r4, r0
 800174c:	0018      	movs	r0, r3
 800174e:	0016      	movs	r6, r2
 8001750:	031b      	lsls	r3, r3, #12
 8001752:	0b1b      	lsrs	r3, r3, #12
 8001754:	4d2c      	ldr	r5, [pc, #176]	; (8001808 <__ledf2+0xc4>)
 8001756:	004a      	lsls	r2, r1, #1
 8001758:	4699      	mov	r9, r3
 800175a:	b580      	push	{r7, lr}
 800175c:	0043      	lsls	r3, r0, #1
 800175e:	030f      	lsls	r7, r1, #12
 8001760:	46a4      	mov	ip, r4
 8001762:	46b0      	mov	r8, r6
 8001764:	0b3f      	lsrs	r7, r7, #12
 8001766:	0d52      	lsrs	r2, r2, #21
 8001768:	0fc9      	lsrs	r1, r1, #31
 800176a:	0d5b      	lsrs	r3, r3, #21
 800176c:	0fc0      	lsrs	r0, r0, #31
 800176e:	42aa      	cmp	r2, r5
 8001770:	d00d      	beq.n	800178e <__ledf2+0x4a>
 8001772:	42ab      	cmp	r3, r5
 8001774:	d010      	beq.n	8001798 <__ledf2+0x54>
 8001776:	2a00      	cmp	r2, #0
 8001778:	d127      	bne.n	80017ca <__ledf2+0x86>
 800177a:	433c      	orrs	r4, r7
 800177c:	2b00      	cmp	r3, #0
 800177e:	d111      	bne.n	80017a4 <__ledf2+0x60>
 8001780:	464d      	mov	r5, r9
 8001782:	432e      	orrs	r6, r5
 8001784:	d10e      	bne.n	80017a4 <__ledf2+0x60>
 8001786:	2000      	movs	r0, #0
 8001788:	2c00      	cmp	r4, #0
 800178a:	d015      	beq.n	80017b8 <__ledf2+0x74>
 800178c:	e00e      	b.n	80017ac <__ledf2+0x68>
 800178e:	003d      	movs	r5, r7
 8001790:	4325      	orrs	r5, r4
 8001792:	d110      	bne.n	80017b6 <__ledf2+0x72>
 8001794:	4293      	cmp	r3, r2
 8001796:	d118      	bne.n	80017ca <__ledf2+0x86>
 8001798:	464d      	mov	r5, r9
 800179a:	432e      	orrs	r6, r5
 800179c:	d10b      	bne.n	80017b6 <__ledf2+0x72>
 800179e:	2a00      	cmp	r2, #0
 80017a0:	d102      	bne.n	80017a8 <__ledf2+0x64>
 80017a2:	433c      	orrs	r4, r7
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d00b      	beq.n	80017c0 <__ledf2+0x7c>
 80017a8:	4281      	cmp	r1, r0
 80017aa:	d014      	beq.n	80017d6 <__ledf2+0x92>
 80017ac:	2002      	movs	r0, #2
 80017ae:	3901      	subs	r1, #1
 80017b0:	4008      	ands	r0, r1
 80017b2:	3801      	subs	r0, #1
 80017b4:	e000      	b.n	80017b8 <__ledf2+0x74>
 80017b6:	2002      	movs	r0, #2
 80017b8:	bcc0      	pop	{r6, r7}
 80017ba:	46b9      	mov	r9, r7
 80017bc:	46b0      	mov	r8, r6
 80017be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d1f9      	bne.n	80017b8 <__ledf2+0x74>
 80017c4:	2001      	movs	r0, #1
 80017c6:	4240      	negs	r0, r0
 80017c8:	e7f6      	b.n	80017b8 <__ledf2+0x74>
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ec      	bne.n	80017a8 <__ledf2+0x64>
 80017ce:	464c      	mov	r4, r9
 80017d0:	4326      	orrs	r6, r4
 80017d2:	d1e9      	bne.n	80017a8 <__ledf2+0x64>
 80017d4:	e7ea      	b.n	80017ac <__ledf2+0x68>
 80017d6:	429a      	cmp	r2, r3
 80017d8:	dd04      	ble.n	80017e4 <__ledf2+0xa0>
 80017da:	4243      	negs	r3, r0
 80017dc:	4158      	adcs	r0, r3
 80017de:	0040      	lsls	r0, r0, #1
 80017e0:	3801      	subs	r0, #1
 80017e2:	e7e9      	b.n	80017b8 <__ledf2+0x74>
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbeb      	blt.n	80017c0 <__ledf2+0x7c>
 80017e8:	454f      	cmp	r7, r9
 80017ea:	d8df      	bhi.n	80017ac <__ledf2+0x68>
 80017ec:	d006      	beq.n	80017fc <__ledf2+0xb8>
 80017ee:	2000      	movs	r0, #0
 80017f0:	454f      	cmp	r7, r9
 80017f2:	d2e1      	bcs.n	80017b8 <__ledf2+0x74>
 80017f4:	2900      	cmp	r1, #0
 80017f6:	d0e5      	beq.n	80017c4 <__ledf2+0x80>
 80017f8:	0008      	movs	r0, r1
 80017fa:	e7dd      	b.n	80017b8 <__ledf2+0x74>
 80017fc:	45c4      	cmp	ip, r8
 80017fe:	d8d5      	bhi.n	80017ac <__ledf2+0x68>
 8001800:	2000      	movs	r0, #0
 8001802:	45c4      	cmp	ip, r8
 8001804:	d2d8      	bcs.n	80017b8 <__ledf2+0x74>
 8001806:	e7f5      	b.n	80017f4 <__ledf2+0xb0>
 8001808:	000007ff 	.word	0x000007ff

0800180c <__aeabi_dmul>:
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	4645      	mov	r5, r8
 8001810:	46de      	mov	lr, fp
 8001812:	4657      	mov	r7, sl
 8001814:	464e      	mov	r6, r9
 8001816:	b5e0      	push	{r5, r6, r7, lr}
 8001818:	001f      	movs	r7, r3
 800181a:	030b      	lsls	r3, r1, #12
 800181c:	0b1b      	lsrs	r3, r3, #12
 800181e:	469b      	mov	fp, r3
 8001820:	004d      	lsls	r5, r1, #1
 8001822:	0fcb      	lsrs	r3, r1, #31
 8001824:	0004      	movs	r4, r0
 8001826:	4691      	mov	r9, r2
 8001828:	4698      	mov	r8, r3
 800182a:	b087      	sub	sp, #28
 800182c:	0d6d      	lsrs	r5, r5, #21
 800182e:	d100      	bne.n	8001832 <__aeabi_dmul+0x26>
 8001830:	e1cd      	b.n	8001bce <__aeabi_dmul+0x3c2>
 8001832:	4bce      	ldr	r3, [pc, #824]	; (8001b6c <__aeabi_dmul+0x360>)
 8001834:	429d      	cmp	r5, r3
 8001836:	d100      	bne.n	800183a <__aeabi_dmul+0x2e>
 8001838:	e1e9      	b.n	8001c0e <__aeabi_dmul+0x402>
 800183a:	465a      	mov	r2, fp
 800183c:	0f43      	lsrs	r3, r0, #29
 800183e:	00d2      	lsls	r2, r2, #3
 8001840:	4313      	orrs	r3, r2
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	0412      	lsls	r2, r2, #16
 8001846:	431a      	orrs	r2, r3
 8001848:	00c3      	lsls	r3, r0, #3
 800184a:	469a      	mov	sl, r3
 800184c:	4bc8      	ldr	r3, [pc, #800]	; (8001b70 <__aeabi_dmul+0x364>)
 800184e:	4693      	mov	fp, r2
 8001850:	469c      	mov	ip, r3
 8001852:	2300      	movs	r3, #0
 8001854:	2600      	movs	r6, #0
 8001856:	4465      	add	r5, ip
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	033c      	lsls	r4, r7, #12
 800185c:	007b      	lsls	r3, r7, #1
 800185e:	4648      	mov	r0, r9
 8001860:	0b24      	lsrs	r4, r4, #12
 8001862:	0d5b      	lsrs	r3, r3, #21
 8001864:	0fff      	lsrs	r7, r7, #31
 8001866:	2b00      	cmp	r3, #0
 8001868:	d100      	bne.n	800186c <__aeabi_dmul+0x60>
 800186a:	e189      	b.n	8001b80 <__aeabi_dmul+0x374>
 800186c:	4abf      	ldr	r2, [pc, #764]	; (8001b6c <__aeabi_dmul+0x360>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d019      	beq.n	80018a6 <__aeabi_dmul+0x9a>
 8001872:	0f42      	lsrs	r2, r0, #29
 8001874:	00e4      	lsls	r4, r4, #3
 8001876:	4322      	orrs	r2, r4
 8001878:	2480      	movs	r4, #128	; 0x80
 800187a:	0424      	lsls	r4, r4, #16
 800187c:	4314      	orrs	r4, r2
 800187e:	4abc      	ldr	r2, [pc, #752]	; (8001b70 <__aeabi_dmul+0x364>)
 8001880:	2100      	movs	r1, #0
 8001882:	4694      	mov	ip, r2
 8001884:	4642      	mov	r2, r8
 8001886:	4463      	add	r3, ip
 8001888:	195b      	adds	r3, r3, r5
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	9b01      	ldr	r3, [sp, #4]
 800188e:	407a      	eors	r2, r7
 8001890:	3301      	adds	r3, #1
 8001892:	00c0      	lsls	r0, r0, #3
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	2e0a      	cmp	r6, #10
 800189a:	dd1c      	ble.n	80018d6 <__aeabi_dmul+0xca>
 800189c:	003a      	movs	r2, r7
 800189e:	2e0b      	cmp	r6, #11
 80018a0:	d05e      	beq.n	8001960 <__aeabi_dmul+0x154>
 80018a2:	4647      	mov	r7, r8
 80018a4:	e056      	b.n	8001954 <__aeabi_dmul+0x148>
 80018a6:	4649      	mov	r1, r9
 80018a8:	4bb0      	ldr	r3, [pc, #704]	; (8001b6c <__aeabi_dmul+0x360>)
 80018aa:	4321      	orrs	r1, r4
 80018ac:	18eb      	adds	r3, r5, r3
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2900      	cmp	r1, #0
 80018b2:	d12a      	bne.n	800190a <__aeabi_dmul+0xfe>
 80018b4:	2080      	movs	r0, #128	; 0x80
 80018b6:	2202      	movs	r2, #2
 80018b8:	0100      	lsls	r0, r0, #4
 80018ba:	002b      	movs	r3, r5
 80018bc:	4684      	mov	ip, r0
 80018be:	4316      	orrs	r6, r2
 80018c0:	4642      	mov	r2, r8
 80018c2:	4463      	add	r3, ip
 80018c4:	407a      	eors	r2, r7
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	2e0a      	cmp	r6, #10
 80018cc:	dd00      	ble.n	80018d0 <__aeabi_dmul+0xc4>
 80018ce:	e231      	b.n	8001d34 <__aeabi_dmul+0x528>
 80018d0:	2000      	movs	r0, #0
 80018d2:	2400      	movs	r4, #0
 80018d4:	2102      	movs	r1, #2
 80018d6:	2e02      	cmp	r6, #2
 80018d8:	dc26      	bgt.n	8001928 <__aeabi_dmul+0x11c>
 80018da:	3e01      	subs	r6, #1
 80018dc:	2e01      	cmp	r6, #1
 80018de:	d852      	bhi.n	8001986 <__aeabi_dmul+0x17a>
 80018e0:	2902      	cmp	r1, #2
 80018e2:	d04c      	beq.n	800197e <__aeabi_dmul+0x172>
 80018e4:	2901      	cmp	r1, #1
 80018e6:	d000      	beq.n	80018ea <__aeabi_dmul+0xde>
 80018e8:	e118      	b.n	8001b1c <__aeabi_dmul+0x310>
 80018ea:	2300      	movs	r3, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	2500      	movs	r5, #0
 80018f0:	051b      	lsls	r3, r3, #20
 80018f2:	4323      	orrs	r3, r4
 80018f4:	07d2      	lsls	r2, r2, #31
 80018f6:	4313      	orrs	r3, r2
 80018f8:	0028      	movs	r0, r5
 80018fa:	0019      	movs	r1, r3
 80018fc:	b007      	add	sp, #28
 80018fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001900:	46bb      	mov	fp, r7
 8001902:	46b2      	mov	sl, r6
 8001904:	46a9      	mov	r9, r5
 8001906:	46a0      	mov	r8, r4
 8001908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	2203      	movs	r2, #3
 800190e:	0109      	lsls	r1, r1, #4
 8001910:	002b      	movs	r3, r5
 8001912:	468c      	mov	ip, r1
 8001914:	4316      	orrs	r6, r2
 8001916:	4642      	mov	r2, r8
 8001918:	4463      	add	r3, ip
 800191a:	407a      	eors	r2, r7
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2e0a      	cmp	r6, #10
 8001922:	dd00      	ble.n	8001926 <__aeabi_dmul+0x11a>
 8001924:	e228      	b.n	8001d78 <__aeabi_dmul+0x56c>
 8001926:	2103      	movs	r1, #3
 8001928:	2501      	movs	r5, #1
 800192a:	40b5      	lsls	r5, r6
 800192c:	46ac      	mov	ip, r5
 800192e:	26a6      	movs	r6, #166	; 0xa6
 8001930:	4663      	mov	r3, ip
 8001932:	00f6      	lsls	r6, r6, #3
 8001934:	4035      	ands	r5, r6
 8001936:	4233      	tst	r3, r6
 8001938:	d10b      	bne.n	8001952 <__aeabi_dmul+0x146>
 800193a:	2690      	movs	r6, #144	; 0x90
 800193c:	00b6      	lsls	r6, r6, #2
 800193e:	4233      	tst	r3, r6
 8001940:	d118      	bne.n	8001974 <__aeabi_dmul+0x168>
 8001942:	3eb9      	subs	r6, #185	; 0xb9
 8001944:	3eff      	subs	r6, #255	; 0xff
 8001946:	421e      	tst	r6, r3
 8001948:	d01d      	beq.n	8001986 <__aeabi_dmul+0x17a>
 800194a:	46a3      	mov	fp, r4
 800194c:	4682      	mov	sl, r0
 800194e:	9100      	str	r1, [sp, #0]
 8001950:	e000      	b.n	8001954 <__aeabi_dmul+0x148>
 8001952:	0017      	movs	r7, r2
 8001954:	9900      	ldr	r1, [sp, #0]
 8001956:	003a      	movs	r2, r7
 8001958:	2902      	cmp	r1, #2
 800195a:	d010      	beq.n	800197e <__aeabi_dmul+0x172>
 800195c:	465c      	mov	r4, fp
 800195e:	4650      	mov	r0, sl
 8001960:	2903      	cmp	r1, #3
 8001962:	d1bf      	bne.n	80018e4 <__aeabi_dmul+0xd8>
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	031b      	lsls	r3, r3, #12
 8001968:	431c      	orrs	r4, r3
 800196a:	0324      	lsls	r4, r4, #12
 800196c:	0005      	movs	r5, r0
 800196e:	4b7f      	ldr	r3, [pc, #508]	; (8001b6c <__aeabi_dmul+0x360>)
 8001970:	0b24      	lsrs	r4, r4, #12
 8001972:	e7bd      	b.n	80018f0 <__aeabi_dmul+0xe4>
 8001974:	2480      	movs	r4, #128	; 0x80
 8001976:	2200      	movs	r2, #0
 8001978:	4b7c      	ldr	r3, [pc, #496]	; (8001b6c <__aeabi_dmul+0x360>)
 800197a:	0324      	lsls	r4, r4, #12
 800197c:	e7b8      	b.n	80018f0 <__aeabi_dmul+0xe4>
 800197e:	2400      	movs	r4, #0
 8001980:	2500      	movs	r5, #0
 8001982:	4b7a      	ldr	r3, [pc, #488]	; (8001b6c <__aeabi_dmul+0x360>)
 8001984:	e7b4      	b.n	80018f0 <__aeabi_dmul+0xe4>
 8001986:	4653      	mov	r3, sl
 8001988:	041e      	lsls	r6, r3, #16
 800198a:	0c36      	lsrs	r6, r6, #16
 800198c:	0c1f      	lsrs	r7, r3, #16
 800198e:	0033      	movs	r3, r6
 8001990:	0c01      	lsrs	r1, r0, #16
 8001992:	0400      	lsls	r0, r0, #16
 8001994:	0c00      	lsrs	r0, r0, #16
 8001996:	4343      	muls	r3, r0
 8001998:	4698      	mov	r8, r3
 800199a:	0003      	movs	r3, r0
 800199c:	437b      	muls	r3, r7
 800199e:	4699      	mov	r9, r3
 80019a0:	0033      	movs	r3, r6
 80019a2:	434b      	muls	r3, r1
 80019a4:	469c      	mov	ip, r3
 80019a6:	4643      	mov	r3, r8
 80019a8:	000d      	movs	r5, r1
 80019aa:	0c1b      	lsrs	r3, r3, #16
 80019ac:	469a      	mov	sl, r3
 80019ae:	437d      	muls	r5, r7
 80019b0:	44cc      	add	ip, r9
 80019b2:	44d4      	add	ip, sl
 80019b4:	9500      	str	r5, [sp, #0]
 80019b6:	45e1      	cmp	r9, ip
 80019b8:	d904      	bls.n	80019c4 <__aeabi_dmul+0x1b8>
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	4699      	mov	r9, r3
 80019c0:	444d      	add	r5, r9
 80019c2:	9500      	str	r5, [sp, #0]
 80019c4:	4663      	mov	r3, ip
 80019c6:	0c1b      	lsrs	r3, r3, #16
 80019c8:	001d      	movs	r5, r3
 80019ca:	4663      	mov	r3, ip
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	469c      	mov	ip, r3
 80019d0:	4643      	mov	r3, r8
 80019d2:	041b      	lsls	r3, r3, #16
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	4698      	mov	r8, r3
 80019d8:	4663      	mov	r3, ip
 80019da:	4443      	add	r3, r8
 80019dc:	9303      	str	r3, [sp, #12]
 80019de:	0c23      	lsrs	r3, r4, #16
 80019e0:	4698      	mov	r8, r3
 80019e2:	0033      	movs	r3, r6
 80019e4:	0424      	lsls	r4, r4, #16
 80019e6:	0c24      	lsrs	r4, r4, #16
 80019e8:	4363      	muls	r3, r4
 80019ea:	469c      	mov	ip, r3
 80019ec:	0023      	movs	r3, r4
 80019ee:	437b      	muls	r3, r7
 80019f0:	4699      	mov	r9, r3
 80019f2:	4643      	mov	r3, r8
 80019f4:	435e      	muls	r6, r3
 80019f6:	435f      	muls	r7, r3
 80019f8:	444e      	add	r6, r9
 80019fa:	4663      	mov	r3, ip
 80019fc:	46b2      	mov	sl, r6
 80019fe:	0c1e      	lsrs	r6, r3, #16
 8001a00:	4456      	add	r6, sl
 8001a02:	45b1      	cmp	r9, r6
 8001a04:	d903      	bls.n	8001a0e <__aeabi_dmul+0x202>
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	025b      	lsls	r3, r3, #9
 8001a0a:	4699      	mov	r9, r3
 8001a0c:	444f      	add	r7, r9
 8001a0e:	0c33      	lsrs	r3, r6, #16
 8001a10:	4699      	mov	r9, r3
 8001a12:	003b      	movs	r3, r7
 8001a14:	444b      	add	r3, r9
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	4663      	mov	r3, ip
 8001a1a:	46ac      	mov	ip, r5
 8001a1c:	041f      	lsls	r7, r3, #16
 8001a1e:	0c3f      	lsrs	r7, r7, #16
 8001a20:	0436      	lsls	r6, r6, #16
 8001a22:	19f6      	adds	r6, r6, r7
 8001a24:	44b4      	add	ip, r6
 8001a26:	4663      	mov	r3, ip
 8001a28:	9304      	str	r3, [sp, #16]
 8001a2a:	465b      	mov	r3, fp
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	469c      	mov	ip, r3
 8001a30:	465b      	mov	r3, fp
 8001a32:	041f      	lsls	r7, r3, #16
 8001a34:	0c3f      	lsrs	r7, r7, #16
 8001a36:	003b      	movs	r3, r7
 8001a38:	4343      	muls	r3, r0
 8001a3a:	4699      	mov	r9, r3
 8001a3c:	4663      	mov	r3, ip
 8001a3e:	4343      	muls	r3, r0
 8001a40:	469a      	mov	sl, r3
 8001a42:	464b      	mov	r3, r9
 8001a44:	4660      	mov	r0, ip
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	469b      	mov	fp, r3
 8001a4a:	4348      	muls	r0, r1
 8001a4c:	4379      	muls	r1, r7
 8001a4e:	4451      	add	r1, sl
 8001a50:	4459      	add	r1, fp
 8001a52:	458a      	cmp	sl, r1
 8001a54:	d903      	bls.n	8001a5e <__aeabi_dmul+0x252>
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	025b      	lsls	r3, r3, #9
 8001a5a:	469a      	mov	sl, r3
 8001a5c:	4450      	add	r0, sl
 8001a5e:	0c0b      	lsrs	r3, r1, #16
 8001a60:	469a      	mov	sl, r3
 8001a62:	464b      	mov	r3, r9
 8001a64:	041b      	lsls	r3, r3, #16
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	4699      	mov	r9, r3
 8001a6a:	003b      	movs	r3, r7
 8001a6c:	4363      	muls	r3, r4
 8001a6e:	0409      	lsls	r1, r1, #16
 8001a70:	4645      	mov	r5, r8
 8001a72:	4449      	add	r1, r9
 8001a74:	4699      	mov	r9, r3
 8001a76:	4663      	mov	r3, ip
 8001a78:	435c      	muls	r4, r3
 8001a7a:	436b      	muls	r3, r5
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	464b      	mov	r3, r9
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	4698      	mov	r8, r3
 8001a84:	436f      	muls	r7, r5
 8001a86:	193f      	adds	r7, r7, r4
 8001a88:	4447      	add	r7, r8
 8001a8a:	4450      	add	r0, sl
 8001a8c:	42bc      	cmp	r4, r7
 8001a8e:	d903      	bls.n	8001a98 <__aeabi_dmul+0x28c>
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	025b      	lsls	r3, r3, #9
 8001a94:	4698      	mov	r8, r3
 8001a96:	44c4      	add	ip, r8
 8001a98:	9b04      	ldr	r3, [sp, #16]
 8001a9a:	9d00      	ldr	r5, [sp, #0]
 8001a9c:	4698      	mov	r8, r3
 8001a9e:	4445      	add	r5, r8
 8001aa0:	42b5      	cmp	r5, r6
 8001aa2:	41b6      	sbcs	r6, r6
 8001aa4:	4273      	negs	r3, r6
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	464b      	mov	r3, r9
 8001aaa:	041e      	lsls	r6, r3, #16
 8001aac:	9b05      	ldr	r3, [sp, #20]
 8001aae:	043c      	lsls	r4, r7, #16
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	0c36      	lsrs	r6, r6, #16
 8001ab4:	19a4      	adds	r4, r4, r6
 8001ab6:	444c      	add	r4, r9
 8001ab8:	46a1      	mov	r9, r4
 8001aba:	4683      	mov	fp, r0
 8001abc:	186e      	adds	r6, r5, r1
 8001abe:	44c1      	add	r9, r8
 8001ac0:	428e      	cmp	r6, r1
 8001ac2:	4189      	sbcs	r1, r1
 8001ac4:	44cb      	add	fp, r9
 8001ac6:	465d      	mov	r5, fp
 8001ac8:	4249      	negs	r1, r1
 8001aca:	186d      	adds	r5, r5, r1
 8001acc:	429c      	cmp	r4, r3
 8001ace:	41a4      	sbcs	r4, r4
 8001ad0:	45c1      	cmp	r9, r8
 8001ad2:	419b      	sbcs	r3, r3
 8001ad4:	4583      	cmp	fp, r0
 8001ad6:	4180      	sbcs	r0, r0
 8001ad8:	428d      	cmp	r5, r1
 8001ada:	4189      	sbcs	r1, r1
 8001adc:	425b      	negs	r3, r3
 8001ade:	4264      	negs	r4, r4
 8001ae0:	431c      	orrs	r4, r3
 8001ae2:	4240      	negs	r0, r0
 8001ae4:	9b03      	ldr	r3, [sp, #12]
 8001ae6:	4249      	negs	r1, r1
 8001ae8:	4301      	orrs	r1, r0
 8001aea:	0270      	lsls	r0, r6, #9
 8001aec:	0c3f      	lsrs	r7, r7, #16
 8001aee:	4318      	orrs	r0, r3
 8001af0:	19e4      	adds	r4, r4, r7
 8001af2:	1e47      	subs	r7, r0, #1
 8001af4:	41b8      	sbcs	r0, r7
 8001af6:	1864      	adds	r4, r4, r1
 8001af8:	4464      	add	r4, ip
 8001afa:	0df6      	lsrs	r6, r6, #23
 8001afc:	0261      	lsls	r1, r4, #9
 8001afe:	4330      	orrs	r0, r6
 8001b00:	0dec      	lsrs	r4, r5, #23
 8001b02:	026e      	lsls	r6, r5, #9
 8001b04:	430c      	orrs	r4, r1
 8001b06:	4330      	orrs	r0, r6
 8001b08:	01c9      	lsls	r1, r1, #7
 8001b0a:	d400      	bmi.n	8001b0e <__aeabi_dmul+0x302>
 8001b0c:	e0f1      	b.n	8001cf2 <__aeabi_dmul+0x4e6>
 8001b0e:	2101      	movs	r1, #1
 8001b10:	0843      	lsrs	r3, r0, #1
 8001b12:	4001      	ands	r1, r0
 8001b14:	430b      	orrs	r3, r1
 8001b16:	07e0      	lsls	r0, r4, #31
 8001b18:	4318      	orrs	r0, r3
 8001b1a:	0864      	lsrs	r4, r4, #1
 8001b1c:	4915      	ldr	r1, [pc, #84]	; (8001b74 <__aeabi_dmul+0x368>)
 8001b1e:	9b02      	ldr	r3, [sp, #8]
 8001b20:	468c      	mov	ip, r1
 8001b22:	4463      	add	r3, ip
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dmul+0x31e>
 8001b28:	e097      	b.n	8001c5a <__aeabi_dmul+0x44e>
 8001b2a:	0741      	lsls	r1, r0, #29
 8001b2c:	d009      	beq.n	8001b42 <__aeabi_dmul+0x336>
 8001b2e:	210f      	movs	r1, #15
 8001b30:	4001      	ands	r1, r0
 8001b32:	2904      	cmp	r1, #4
 8001b34:	d005      	beq.n	8001b42 <__aeabi_dmul+0x336>
 8001b36:	1d01      	adds	r1, r0, #4
 8001b38:	4281      	cmp	r1, r0
 8001b3a:	4180      	sbcs	r0, r0
 8001b3c:	4240      	negs	r0, r0
 8001b3e:	1824      	adds	r4, r4, r0
 8001b40:	0008      	movs	r0, r1
 8001b42:	01e1      	lsls	r1, r4, #7
 8001b44:	d506      	bpl.n	8001b54 <__aeabi_dmul+0x348>
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	00c9      	lsls	r1, r1, #3
 8001b4a:	468c      	mov	ip, r1
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <__aeabi_dmul+0x36c>)
 8001b4e:	401c      	ands	r4, r3
 8001b50:	9b02      	ldr	r3, [sp, #8]
 8001b52:	4463      	add	r3, ip
 8001b54:	4909      	ldr	r1, [pc, #36]	; (8001b7c <__aeabi_dmul+0x370>)
 8001b56:	428b      	cmp	r3, r1
 8001b58:	dd00      	ble.n	8001b5c <__aeabi_dmul+0x350>
 8001b5a:	e710      	b.n	800197e <__aeabi_dmul+0x172>
 8001b5c:	0761      	lsls	r1, r4, #29
 8001b5e:	08c5      	lsrs	r5, r0, #3
 8001b60:	0264      	lsls	r4, r4, #9
 8001b62:	055b      	lsls	r3, r3, #21
 8001b64:	430d      	orrs	r5, r1
 8001b66:	0b24      	lsrs	r4, r4, #12
 8001b68:	0d5b      	lsrs	r3, r3, #21
 8001b6a:	e6c1      	b.n	80018f0 <__aeabi_dmul+0xe4>
 8001b6c:	000007ff 	.word	0x000007ff
 8001b70:	fffffc01 	.word	0xfffffc01
 8001b74:	000003ff 	.word	0x000003ff
 8001b78:	feffffff 	.word	0xfeffffff
 8001b7c:	000007fe 	.word	0x000007fe
 8001b80:	464b      	mov	r3, r9
 8001b82:	4323      	orrs	r3, r4
 8001b84:	d059      	beq.n	8001c3a <__aeabi_dmul+0x42e>
 8001b86:	2c00      	cmp	r4, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dmul+0x380>
 8001b8a:	e0a3      	b.n	8001cd4 <__aeabi_dmul+0x4c8>
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	f000 fdf9 	bl	8002784 <__clzsi2>
 8001b92:	0001      	movs	r1, r0
 8001b94:	0003      	movs	r3, r0
 8001b96:	390b      	subs	r1, #11
 8001b98:	221d      	movs	r2, #29
 8001b9a:	1a52      	subs	r2, r2, r1
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	40d1      	lsrs	r1, r2
 8001ba2:	464a      	mov	r2, r9
 8001ba4:	3808      	subs	r0, #8
 8001ba6:	4082      	lsls	r2, r0
 8001ba8:	4084      	lsls	r4, r0
 8001baa:	0010      	movs	r0, r2
 8001bac:	430c      	orrs	r4, r1
 8001bae:	4a74      	ldr	r2, [pc, #464]	; (8001d80 <__aeabi_dmul+0x574>)
 8001bb0:	1aeb      	subs	r3, r5, r3
 8001bb2:	4694      	mov	ip, r2
 8001bb4:	4642      	mov	r2, r8
 8001bb6:	4463      	add	r3, ip
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	407a      	eors	r2, r7
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	2e0a      	cmp	r6, #10
 8001bc8:	dd00      	ble.n	8001bcc <__aeabi_dmul+0x3c0>
 8001bca:	e667      	b.n	800189c <__aeabi_dmul+0x90>
 8001bcc:	e683      	b.n	80018d6 <__aeabi_dmul+0xca>
 8001bce:	465b      	mov	r3, fp
 8001bd0:	4303      	orrs	r3, r0
 8001bd2:	469a      	mov	sl, r3
 8001bd4:	d02a      	beq.n	8001c2c <__aeabi_dmul+0x420>
 8001bd6:	465b      	mov	r3, fp
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d06d      	beq.n	8001cb8 <__aeabi_dmul+0x4ac>
 8001bdc:	4658      	mov	r0, fp
 8001bde:	f000 fdd1 	bl	8002784 <__clzsi2>
 8001be2:	0001      	movs	r1, r0
 8001be4:	0003      	movs	r3, r0
 8001be6:	390b      	subs	r1, #11
 8001be8:	221d      	movs	r2, #29
 8001bea:	1a52      	subs	r2, r2, r1
 8001bec:	0021      	movs	r1, r4
 8001bee:	0018      	movs	r0, r3
 8001bf0:	465d      	mov	r5, fp
 8001bf2:	40d1      	lsrs	r1, r2
 8001bf4:	3808      	subs	r0, #8
 8001bf6:	4085      	lsls	r5, r0
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	4084      	lsls	r4, r0
 8001bfc:	432a      	orrs	r2, r5
 8001bfe:	4693      	mov	fp, r2
 8001c00:	46a2      	mov	sl, r4
 8001c02:	4d5f      	ldr	r5, [pc, #380]	; (8001d80 <__aeabi_dmul+0x574>)
 8001c04:	2600      	movs	r6, #0
 8001c06:	1aed      	subs	r5, r5, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	e625      	b.n	800185a <__aeabi_dmul+0x4e>
 8001c0e:	465b      	mov	r3, fp
 8001c10:	4303      	orrs	r3, r0
 8001c12:	469a      	mov	sl, r3
 8001c14:	d105      	bne.n	8001c22 <__aeabi_dmul+0x416>
 8001c16:	2300      	movs	r3, #0
 8001c18:	469b      	mov	fp, r3
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	2608      	movs	r6, #8
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	e61b      	b.n	800185a <__aeabi_dmul+0x4e>
 8001c22:	2303      	movs	r3, #3
 8001c24:	4682      	mov	sl, r0
 8001c26:	260c      	movs	r6, #12
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	e616      	b.n	800185a <__aeabi_dmul+0x4e>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	469b      	mov	fp, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	2604      	movs	r6, #4
 8001c34:	2500      	movs	r5, #0
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	e60f      	b.n	800185a <__aeabi_dmul+0x4e>
 8001c3a:	4642      	mov	r2, r8
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	9501      	str	r5, [sp, #4]
 8001c40:	431e      	orrs	r6, r3
 8001c42:	9b01      	ldr	r3, [sp, #4]
 8001c44:	407a      	eors	r2, r7
 8001c46:	3301      	adds	r3, #1
 8001c48:	2400      	movs	r4, #0
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	2e0a      	cmp	r6, #10
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dmul+0x44c>
 8001c56:	e621      	b.n	800189c <__aeabi_dmul+0x90>
 8001c58:	e63d      	b.n	80018d6 <__aeabi_dmul+0xca>
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	1ac9      	subs	r1, r1, r3
 8001c5e:	2938      	cmp	r1, #56	; 0x38
 8001c60:	dd00      	ble.n	8001c64 <__aeabi_dmul+0x458>
 8001c62:	e642      	b.n	80018ea <__aeabi_dmul+0xde>
 8001c64:	291f      	cmp	r1, #31
 8001c66:	dd47      	ble.n	8001cf8 <__aeabi_dmul+0x4ec>
 8001c68:	261f      	movs	r6, #31
 8001c6a:	0025      	movs	r5, r4
 8001c6c:	4276      	negs	r6, r6
 8001c6e:	1af3      	subs	r3, r6, r3
 8001c70:	40dd      	lsrs	r5, r3
 8001c72:	002b      	movs	r3, r5
 8001c74:	2920      	cmp	r1, #32
 8001c76:	d005      	beq.n	8001c84 <__aeabi_dmul+0x478>
 8001c78:	4942      	ldr	r1, [pc, #264]	; (8001d84 <__aeabi_dmul+0x578>)
 8001c7a:	9d02      	ldr	r5, [sp, #8]
 8001c7c:	468c      	mov	ip, r1
 8001c7e:	4465      	add	r5, ip
 8001c80:	40ac      	lsls	r4, r5
 8001c82:	4320      	orrs	r0, r4
 8001c84:	1e41      	subs	r1, r0, #1
 8001c86:	4188      	sbcs	r0, r1
 8001c88:	4318      	orrs	r0, r3
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	001d      	movs	r5, r3
 8001c8e:	2400      	movs	r4, #0
 8001c90:	4005      	ands	r5, r0
 8001c92:	4203      	tst	r3, r0
 8001c94:	d04a      	beq.n	8001d2c <__aeabi_dmul+0x520>
 8001c96:	230f      	movs	r3, #15
 8001c98:	2400      	movs	r4, #0
 8001c9a:	4003      	ands	r3, r0
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d042      	beq.n	8001d26 <__aeabi_dmul+0x51a>
 8001ca0:	1d03      	adds	r3, r0, #4
 8001ca2:	4283      	cmp	r3, r0
 8001ca4:	4180      	sbcs	r0, r0
 8001ca6:	4240      	negs	r0, r0
 8001ca8:	1824      	adds	r4, r4, r0
 8001caa:	0018      	movs	r0, r3
 8001cac:	0223      	lsls	r3, r4, #8
 8001cae:	d53a      	bpl.n	8001d26 <__aeabi_dmul+0x51a>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	2500      	movs	r5, #0
 8001cb6:	e61b      	b.n	80018f0 <__aeabi_dmul+0xe4>
 8001cb8:	f000 fd64 	bl	8002784 <__clzsi2>
 8001cbc:	0001      	movs	r1, r0
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	3115      	adds	r1, #21
 8001cc2:	3320      	adds	r3, #32
 8001cc4:	291c      	cmp	r1, #28
 8001cc6:	dd8f      	ble.n	8001be8 <__aeabi_dmul+0x3dc>
 8001cc8:	3808      	subs	r0, #8
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4084      	lsls	r4, r0
 8001cce:	4692      	mov	sl, r2
 8001cd0:	46a3      	mov	fp, r4
 8001cd2:	e796      	b.n	8001c02 <__aeabi_dmul+0x3f6>
 8001cd4:	f000 fd56 	bl	8002784 <__clzsi2>
 8001cd8:	0001      	movs	r1, r0
 8001cda:	0003      	movs	r3, r0
 8001cdc:	3115      	adds	r1, #21
 8001cde:	3320      	adds	r3, #32
 8001ce0:	291c      	cmp	r1, #28
 8001ce2:	dc00      	bgt.n	8001ce6 <__aeabi_dmul+0x4da>
 8001ce4:	e758      	b.n	8001b98 <__aeabi_dmul+0x38c>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	464c      	mov	r4, r9
 8001cea:	3a08      	subs	r2, #8
 8001cec:	2000      	movs	r0, #0
 8001cee:	4094      	lsls	r4, r2
 8001cf0:	e75d      	b.n	8001bae <__aeabi_dmul+0x3a2>
 8001cf2:	9b01      	ldr	r3, [sp, #4]
 8001cf4:	9302      	str	r3, [sp, #8]
 8001cf6:	e711      	b.n	8001b1c <__aeabi_dmul+0x310>
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <__aeabi_dmul+0x57c>)
 8001cfa:	0026      	movs	r6, r4
 8001cfc:	469c      	mov	ip, r3
 8001cfe:	0003      	movs	r3, r0
 8001d00:	9d02      	ldr	r5, [sp, #8]
 8001d02:	40cb      	lsrs	r3, r1
 8001d04:	4465      	add	r5, ip
 8001d06:	40ae      	lsls	r6, r5
 8001d08:	431e      	orrs	r6, r3
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	40ab      	lsls	r3, r5
 8001d0e:	1e58      	subs	r0, r3, #1
 8001d10:	4183      	sbcs	r3, r0
 8001d12:	0030      	movs	r0, r6
 8001d14:	4318      	orrs	r0, r3
 8001d16:	40cc      	lsrs	r4, r1
 8001d18:	0743      	lsls	r3, r0, #29
 8001d1a:	d0c7      	beq.n	8001cac <__aeabi_dmul+0x4a0>
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	4003      	ands	r3, r0
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d1bd      	bne.n	8001ca0 <__aeabi_dmul+0x494>
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dmul+0x4a0>
 8001d26:	0765      	lsls	r5, r4, #29
 8001d28:	0264      	lsls	r4, r4, #9
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	08c0      	lsrs	r0, r0, #3
 8001d2e:	2300      	movs	r3, #0
 8001d30:	4305      	orrs	r5, r0
 8001d32:	e5dd      	b.n	80018f0 <__aeabi_dmul+0xe4>
 8001d34:	2500      	movs	r5, #0
 8001d36:	2302      	movs	r3, #2
 8001d38:	2e0f      	cmp	r6, #15
 8001d3a:	d10c      	bne.n	8001d56 <__aeabi_dmul+0x54a>
 8001d3c:	2480      	movs	r4, #128	; 0x80
 8001d3e:	465b      	mov	r3, fp
 8001d40:	0324      	lsls	r4, r4, #12
 8001d42:	4223      	tst	r3, r4
 8001d44:	d00e      	beq.n	8001d64 <__aeabi_dmul+0x558>
 8001d46:	4221      	tst	r1, r4
 8001d48:	d10c      	bne.n	8001d64 <__aeabi_dmul+0x558>
 8001d4a:	430c      	orrs	r4, r1
 8001d4c:	0324      	lsls	r4, r4, #12
 8001d4e:	003a      	movs	r2, r7
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <__aeabi_dmul+0x580>)
 8001d52:	0b24      	lsrs	r4, r4, #12
 8001d54:	e5cc      	b.n	80018f0 <__aeabi_dmul+0xe4>
 8001d56:	2e0b      	cmp	r6, #11
 8001d58:	d000      	beq.n	8001d5c <__aeabi_dmul+0x550>
 8001d5a:	e5a2      	b.n	80018a2 <__aeabi_dmul+0x96>
 8001d5c:	468b      	mov	fp, r1
 8001d5e:	46aa      	mov	sl, r5
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	e5f7      	b.n	8001954 <__aeabi_dmul+0x148>
 8001d64:	2480      	movs	r4, #128	; 0x80
 8001d66:	465b      	mov	r3, fp
 8001d68:	0324      	lsls	r4, r4, #12
 8001d6a:	431c      	orrs	r4, r3
 8001d6c:	0324      	lsls	r4, r4, #12
 8001d6e:	4642      	mov	r2, r8
 8001d70:	4655      	mov	r5, sl
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <__aeabi_dmul+0x580>)
 8001d74:	0b24      	lsrs	r4, r4, #12
 8001d76:	e5bb      	b.n	80018f0 <__aeabi_dmul+0xe4>
 8001d78:	464d      	mov	r5, r9
 8001d7a:	0021      	movs	r1, r4
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e7db      	b.n	8001d38 <__aeabi_dmul+0x52c>
 8001d80:	fffffc0d 	.word	0xfffffc0d
 8001d84:	0000043e 	.word	0x0000043e
 8001d88:	0000041e 	.word	0x0000041e
 8001d8c:	000007ff 	.word	0x000007ff

08001d90 <__aeabi_dsub>:
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	4657      	mov	r7, sl
 8001d94:	464e      	mov	r6, r9
 8001d96:	4645      	mov	r5, r8
 8001d98:	46de      	mov	lr, fp
 8001d9a:	b5e0      	push	{r5, r6, r7, lr}
 8001d9c:	000d      	movs	r5, r1
 8001d9e:	0004      	movs	r4, r0
 8001da0:	0019      	movs	r1, r3
 8001da2:	0010      	movs	r0, r2
 8001da4:	032b      	lsls	r3, r5, #12
 8001da6:	0a5b      	lsrs	r3, r3, #9
 8001da8:	0f62      	lsrs	r2, r4, #29
 8001daa:	431a      	orrs	r2, r3
 8001dac:	00e3      	lsls	r3, r4, #3
 8001dae:	030c      	lsls	r4, r1, #12
 8001db0:	0a64      	lsrs	r4, r4, #9
 8001db2:	0f47      	lsrs	r7, r0, #29
 8001db4:	4327      	orrs	r7, r4
 8001db6:	4cd0      	ldr	r4, [pc, #832]	; (80020f8 <__aeabi_dsub+0x368>)
 8001db8:	006e      	lsls	r6, r5, #1
 8001dba:	4691      	mov	r9, r2
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	004a      	lsls	r2, r1, #1
 8001dc0:	00c0      	lsls	r0, r0, #3
 8001dc2:	4698      	mov	r8, r3
 8001dc4:	46a2      	mov	sl, r4
 8001dc6:	0d76      	lsrs	r6, r6, #21
 8001dc8:	0fed      	lsrs	r5, r5, #31
 8001dca:	0d52      	lsrs	r2, r2, #21
 8001dcc:	0fc9      	lsrs	r1, r1, #31
 8001dce:	9001      	str	r0, [sp, #4]
 8001dd0:	42a2      	cmp	r2, r4
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x46>
 8001dd4:	e0b9      	b.n	8001f4a <__aeabi_dsub+0x1ba>
 8001dd6:	2401      	movs	r4, #1
 8001dd8:	4061      	eors	r1, r4
 8001dda:	468b      	mov	fp, r1
 8001ddc:	428d      	cmp	r5, r1
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x52>
 8001de0:	e08d      	b.n	8001efe <__aeabi_dsub+0x16e>
 8001de2:	1ab4      	subs	r4, r6, r2
 8001de4:	46a4      	mov	ip, r4
 8001de6:	2c00      	cmp	r4, #0
 8001de8:	dc00      	bgt.n	8001dec <__aeabi_dsub+0x5c>
 8001dea:	e0b7      	b.n	8001f5c <__aeabi_dsub+0x1cc>
 8001dec:	2a00      	cmp	r2, #0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x62>
 8001df0:	e0cb      	b.n	8001f8a <__aeabi_dsub+0x1fa>
 8001df2:	4ac1      	ldr	r2, [pc, #772]	; (80020f8 <__aeabi_dsub+0x368>)
 8001df4:	4296      	cmp	r6, r2
 8001df6:	d100      	bne.n	8001dfa <__aeabi_dsub+0x6a>
 8001df8:	e186      	b.n	8002108 <__aeabi_dsub+0x378>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	0412      	lsls	r2, r2, #16
 8001dfe:	4317      	orrs	r7, r2
 8001e00:	4662      	mov	r2, ip
 8001e02:	2a38      	cmp	r2, #56	; 0x38
 8001e04:	dd00      	ble.n	8001e08 <__aeabi_dsub+0x78>
 8001e06:	e1a4      	b.n	8002152 <__aeabi_dsub+0x3c2>
 8001e08:	2a1f      	cmp	r2, #31
 8001e0a:	dd00      	ble.n	8001e0e <__aeabi_dsub+0x7e>
 8001e0c:	e21d      	b.n	800224a <__aeabi_dsub+0x4ba>
 8001e0e:	4661      	mov	r1, ip
 8001e10:	2220      	movs	r2, #32
 8001e12:	003c      	movs	r4, r7
 8001e14:	1a52      	subs	r2, r2, r1
 8001e16:	0001      	movs	r1, r0
 8001e18:	4090      	lsls	r0, r2
 8001e1a:	4094      	lsls	r4, r2
 8001e1c:	1e42      	subs	r2, r0, #1
 8001e1e:	4190      	sbcs	r0, r2
 8001e20:	4662      	mov	r2, ip
 8001e22:	46a0      	mov	r8, r4
 8001e24:	4664      	mov	r4, ip
 8001e26:	40d7      	lsrs	r7, r2
 8001e28:	464a      	mov	r2, r9
 8001e2a:	40e1      	lsrs	r1, r4
 8001e2c:	4644      	mov	r4, r8
 8001e2e:	1bd2      	subs	r2, r2, r7
 8001e30:	4691      	mov	r9, r2
 8001e32:	430c      	orrs	r4, r1
 8001e34:	4304      	orrs	r4, r0
 8001e36:	1b1c      	subs	r4, r3, r4
 8001e38:	42a3      	cmp	r3, r4
 8001e3a:	4192      	sbcs	r2, r2
 8001e3c:	464b      	mov	r3, r9
 8001e3e:	4252      	negs	r2, r2
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	469a      	mov	sl, r3
 8001e44:	4653      	mov	r3, sl
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	d400      	bmi.n	8001e4c <__aeabi_dsub+0xbc>
 8001e4a:	e12b      	b.n	80020a4 <__aeabi_dsub+0x314>
 8001e4c:	4653      	mov	r3, sl
 8001e4e:	025a      	lsls	r2, r3, #9
 8001e50:	0a53      	lsrs	r3, r2, #9
 8001e52:	469a      	mov	sl, r3
 8001e54:	4653      	mov	r3, sl
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0xcc>
 8001e5a:	e166      	b.n	800212a <__aeabi_dsub+0x39a>
 8001e5c:	4650      	mov	r0, sl
 8001e5e:	f000 fc91 	bl	8002784 <__clzsi2>
 8001e62:	0003      	movs	r3, r0
 8001e64:	3b08      	subs	r3, #8
 8001e66:	2220      	movs	r2, #32
 8001e68:	0020      	movs	r0, r4
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	4651      	mov	r1, sl
 8001e6e:	40d0      	lsrs	r0, r2
 8001e70:	4099      	lsls	r1, r3
 8001e72:	0002      	movs	r2, r0
 8001e74:	409c      	lsls	r4, r3
 8001e76:	430a      	orrs	r2, r1
 8001e78:	429e      	cmp	r6, r3
 8001e7a:	dd00      	ble.n	8001e7e <__aeabi_dsub+0xee>
 8001e7c:	e164      	b.n	8002148 <__aeabi_dsub+0x3b8>
 8001e7e:	1b9b      	subs	r3, r3, r6
 8001e80:	1c59      	adds	r1, r3, #1
 8001e82:	291f      	cmp	r1, #31
 8001e84:	dd00      	ble.n	8001e88 <__aeabi_dsub+0xf8>
 8001e86:	e0fe      	b.n	8002086 <__aeabi_dsub+0x2f6>
 8001e88:	2320      	movs	r3, #32
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	0026      	movs	r6, r4
 8001e8e:	1a5b      	subs	r3, r3, r1
 8001e90:	409c      	lsls	r4, r3
 8001e92:	4098      	lsls	r0, r3
 8001e94:	40ce      	lsrs	r6, r1
 8001e96:	40ca      	lsrs	r2, r1
 8001e98:	1e63      	subs	r3, r4, #1
 8001e9a:	419c      	sbcs	r4, r3
 8001e9c:	4330      	orrs	r0, r6
 8001e9e:	4692      	mov	sl, r2
 8001ea0:	2600      	movs	r6, #0
 8001ea2:	4304      	orrs	r4, r0
 8001ea4:	0763      	lsls	r3, r4, #29
 8001ea6:	d009      	beq.n	8001ebc <__aeabi_dsub+0x12c>
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	4023      	ands	r3, r4
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d005      	beq.n	8001ebc <__aeabi_dsub+0x12c>
 8001eb0:	1d23      	adds	r3, r4, #4
 8001eb2:	42a3      	cmp	r3, r4
 8001eb4:	41a4      	sbcs	r4, r4
 8001eb6:	4264      	negs	r4, r4
 8001eb8:	44a2      	add	sl, r4
 8001eba:	001c      	movs	r4, r3
 8001ebc:	4653      	mov	r3, sl
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	d400      	bmi.n	8001ec4 <__aeabi_dsub+0x134>
 8001ec2:	e0f2      	b.n	80020aa <__aeabi_dsub+0x31a>
 8001ec4:	4b8c      	ldr	r3, [pc, #560]	; (80020f8 <__aeabi_dsub+0x368>)
 8001ec6:	3601      	adds	r6, #1
 8001ec8:	429e      	cmp	r6, r3
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x13e>
 8001ecc:	e10f      	b.n	80020ee <__aeabi_dsub+0x35e>
 8001ece:	4653      	mov	r3, sl
 8001ed0:	498a      	ldr	r1, [pc, #552]	; (80020fc <__aeabi_dsub+0x36c>)
 8001ed2:	08e4      	lsrs	r4, r4, #3
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	075b      	lsls	r3, r3, #29
 8001eda:	4323      	orrs	r3, r4
 8001edc:	0572      	lsls	r2, r6, #21
 8001ede:	024c      	lsls	r4, r1, #9
 8001ee0:	0b24      	lsrs	r4, r4, #12
 8001ee2:	0d52      	lsrs	r2, r2, #21
 8001ee4:	0512      	lsls	r2, r2, #20
 8001ee6:	4322      	orrs	r2, r4
 8001ee8:	07ed      	lsls	r5, r5, #31
 8001eea:	432a      	orrs	r2, r5
 8001eec:	0018      	movs	r0, r3
 8001eee:	0011      	movs	r1, r2
 8001ef0:	b003      	add	sp, #12
 8001ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ef4:	46bb      	mov	fp, r7
 8001ef6:	46b2      	mov	sl, r6
 8001ef8:	46a9      	mov	r9, r5
 8001efa:	46a0      	mov	r8, r4
 8001efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efe:	1ab4      	subs	r4, r6, r2
 8001f00:	46a4      	mov	ip, r4
 8001f02:	2c00      	cmp	r4, #0
 8001f04:	dd59      	ble.n	8001fba <__aeabi_dsub+0x22a>
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x17c>
 8001f0a:	e0b0      	b.n	800206e <__aeabi_dsub+0x2de>
 8001f0c:	4556      	cmp	r6, sl
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_dsub+0x182>
 8001f10:	e0fa      	b.n	8002108 <__aeabi_dsub+0x378>
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	0412      	lsls	r2, r2, #16
 8001f16:	4317      	orrs	r7, r2
 8001f18:	4662      	mov	r2, ip
 8001f1a:	2a38      	cmp	r2, #56	; 0x38
 8001f1c:	dd00      	ble.n	8001f20 <__aeabi_dsub+0x190>
 8001f1e:	e0d4      	b.n	80020ca <__aeabi_dsub+0x33a>
 8001f20:	2a1f      	cmp	r2, #31
 8001f22:	dc00      	bgt.n	8001f26 <__aeabi_dsub+0x196>
 8001f24:	e1c0      	b.n	80022a8 <__aeabi_dsub+0x518>
 8001f26:	0039      	movs	r1, r7
 8001f28:	3a20      	subs	r2, #32
 8001f2a:	40d1      	lsrs	r1, r2
 8001f2c:	4662      	mov	r2, ip
 8001f2e:	2a20      	cmp	r2, #32
 8001f30:	d006      	beq.n	8001f40 <__aeabi_dsub+0x1b0>
 8001f32:	4664      	mov	r4, ip
 8001f34:	2240      	movs	r2, #64	; 0x40
 8001f36:	1b12      	subs	r2, r2, r4
 8001f38:	003c      	movs	r4, r7
 8001f3a:	4094      	lsls	r4, r2
 8001f3c:	4304      	orrs	r4, r0
 8001f3e:	9401      	str	r4, [sp, #4]
 8001f40:	9c01      	ldr	r4, [sp, #4]
 8001f42:	1e62      	subs	r2, r4, #1
 8001f44:	4194      	sbcs	r4, r2
 8001f46:	430c      	orrs	r4, r1
 8001f48:	e0c3      	b.n	80020d2 <__aeabi_dsub+0x342>
 8001f4a:	003c      	movs	r4, r7
 8001f4c:	4304      	orrs	r4, r0
 8001f4e:	d02b      	beq.n	8001fa8 <__aeabi_dsub+0x218>
 8001f50:	468b      	mov	fp, r1
 8001f52:	428d      	cmp	r5, r1
 8001f54:	d02e      	beq.n	8001fb4 <__aeabi_dsub+0x224>
 8001f56:	4c6a      	ldr	r4, [pc, #424]	; (8002100 <__aeabi_dsub+0x370>)
 8001f58:	46a4      	mov	ip, r4
 8001f5a:	44b4      	add	ip, r6
 8001f5c:	4664      	mov	r4, ip
 8001f5e:	2c00      	cmp	r4, #0
 8001f60:	d05f      	beq.n	8002022 <__aeabi_dsub+0x292>
 8001f62:	1b94      	subs	r4, r2, r6
 8001f64:	46a4      	mov	ip, r4
 8001f66:	2e00      	cmp	r6, #0
 8001f68:	d000      	beq.n	8001f6c <__aeabi_dsub+0x1dc>
 8001f6a:	e120      	b.n	80021ae <__aeabi_dsub+0x41e>
 8001f6c:	464c      	mov	r4, r9
 8001f6e:	431c      	orrs	r4, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x1e4>
 8001f72:	e1c7      	b.n	8002304 <__aeabi_dsub+0x574>
 8001f74:	4661      	mov	r1, ip
 8001f76:	1e4c      	subs	r4, r1, #1
 8001f78:	2901      	cmp	r1, #1
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x1ee>
 8001f7c:	e223      	b.n	80023c6 <__aeabi_dsub+0x636>
 8001f7e:	4d5e      	ldr	r5, [pc, #376]	; (80020f8 <__aeabi_dsub+0x368>)
 8001f80:	45ac      	cmp	ip, r5
 8001f82:	d100      	bne.n	8001f86 <__aeabi_dsub+0x1f6>
 8001f84:	e1d8      	b.n	8002338 <__aeabi_dsub+0x5a8>
 8001f86:	46a4      	mov	ip, r4
 8001f88:	e11a      	b.n	80021c0 <__aeabi_dsub+0x430>
 8001f8a:	003a      	movs	r2, r7
 8001f8c:	4302      	orrs	r2, r0
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dsub+0x202>
 8001f90:	e0e4      	b.n	800215c <__aeabi_dsub+0x3cc>
 8001f92:	0022      	movs	r2, r4
 8001f94:	3a01      	subs	r2, #1
 8001f96:	2c01      	cmp	r4, #1
 8001f98:	d100      	bne.n	8001f9c <__aeabi_dsub+0x20c>
 8001f9a:	e1c3      	b.n	8002324 <__aeabi_dsub+0x594>
 8001f9c:	4956      	ldr	r1, [pc, #344]	; (80020f8 <__aeabi_dsub+0x368>)
 8001f9e:	428c      	cmp	r4, r1
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x214>
 8001fa2:	e0b1      	b.n	8002108 <__aeabi_dsub+0x378>
 8001fa4:	4694      	mov	ip, r2
 8001fa6:	e72b      	b.n	8001e00 <__aeabi_dsub+0x70>
 8001fa8:	2401      	movs	r4, #1
 8001faa:	4061      	eors	r1, r4
 8001fac:	468b      	mov	fp, r1
 8001fae:	428d      	cmp	r5, r1
 8001fb0:	d000      	beq.n	8001fb4 <__aeabi_dsub+0x224>
 8001fb2:	e716      	b.n	8001de2 <__aeabi_dsub+0x52>
 8001fb4:	4952      	ldr	r1, [pc, #328]	; (8002100 <__aeabi_dsub+0x370>)
 8001fb6:	468c      	mov	ip, r1
 8001fb8:	44b4      	add	ip, r6
 8001fba:	4664      	mov	r4, ip
 8001fbc:	2c00      	cmp	r4, #0
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x232>
 8001fc0:	e0d3      	b.n	800216a <__aeabi_dsub+0x3da>
 8001fc2:	1b91      	subs	r1, r2, r6
 8001fc4:	468c      	mov	ip, r1
 8001fc6:	2e00      	cmp	r6, #0
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x23c>
 8001fca:	e15e      	b.n	800228a <__aeabi_dsub+0x4fa>
 8001fcc:	494a      	ldr	r1, [pc, #296]	; (80020f8 <__aeabi_dsub+0x368>)
 8001fce:	428a      	cmp	r2, r1
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dsub+0x244>
 8001fd2:	e1be      	b.n	8002352 <__aeabi_dsub+0x5c2>
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	464c      	mov	r4, r9
 8001fd8:	0409      	lsls	r1, r1, #16
 8001fda:	430c      	orrs	r4, r1
 8001fdc:	46a1      	mov	r9, r4
 8001fde:	4661      	mov	r1, ip
 8001fe0:	2938      	cmp	r1, #56	; 0x38
 8001fe2:	dd00      	ble.n	8001fe6 <__aeabi_dsub+0x256>
 8001fe4:	e1ba      	b.n	800235c <__aeabi_dsub+0x5cc>
 8001fe6:	291f      	cmp	r1, #31
 8001fe8:	dd00      	ble.n	8001fec <__aeabi_dsub+0x25c>
 8001fea:	e227      	b.n	800243c <__aeabi_dsub+0x6ac>
 8001fec:	2420      	movs	r4, #32
 8001fee:	1a64      	subs	r4, r4, r1
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	40a1      	lsls	r1, r4
 8001ff4:	001e      	movs	r6, r3
 8001ff6:	4688      	mov	r8, r1
 8001ff8:	4661      	mov	r1, ip
 8001ffa:	40a3      	lsls	r3, r4
 8001ffc:	40ce      	lsrs	r6, r1
 8001ffe:	4641      	mov	r1, r8
 8002000:	1e5c      	subs	r4, r3, #1
 8002002:	41a3      	sbcs	r3, r4
 8002004:	4331      	orrs	r1, r6
 8002006:	4319      	orrs	r1, r3
 8002008:	000c      	movs	r4, r1
 800200a:	4663      	mov	r3, ip
 800200c:	4649      	mov	r1, r9
 800200e:	40d9      	lsrs	r1, r3
 8002010:	187f      	adds	r7, r7, r1
 8002012:	1824      	adds	r4, r4, r0
 8002014:	4284      	cmp	r4, r0
 8002016:	419b      	sbcs	r3, r3
 8002018:	425b      	negs	r3, r3
 800201a:	469a      	mov	sl, r3
 800201c:	0016      	movs	r6, r2
 800201e:	44ba      	add	sl, r7
 8002020:	e05d      	b.n	80020de <__aeabi_dsub+0x34e>
 8002022:	4c38      	ldr	r4, [pc, #224]	; (8002104 <__aeabi_dsub+0x374>)
 8002024:	1c72      	adds	r2, r6, #1
 8002026:	4222      	tst	r2, r4
 8002028:	d000      	beq.n	800202c <__aeabi_dsub+0x29c>
 800202a:	e0df      	b.n	80021ec <__aeabi_dsub+0x45c>
 800202c:	464a      	mov	r2, r9
 800202e:	431a      	orrs	r2, r3
 8002030:	2e00      	cmp	r6, #0
 8002032:	d000      	beq.n	8002036 <__aeabi_dsub+0x2a6>
 8002034:	e15c      	b.n	80022f0 <__aeabi_dsub+0x560>
 8002036:	2a00      	cmp	r2, #0
 8002038:	d100      	bne.n	800203c <__aeabi_dsub+0x2ac>
 800203a:	e1cf      	b.n	80023dc <__aeabi_dsub+0x64c>
 800203c:	003a      	movs	r2, r7
 800203e:	4302      	orrs	r2, r0
 8002040:	d100      	bne.n	8002044 <__aeabi_dsub+0x2b4>
 8002042:	e17f      	b.n	8002344 <__aeabi_dsub+0x5b4>
 8002044:	1a1c      	subs	r4, r3, r0
 8002046:	464a      	mov	r2, r9
 8002048:	42a3      	cmp	r3, r4
 800204a:	4189      	sbcs	r1, r1
 800204c:	1bd2      	subs	r2, r2, r7
 800204e:	4249      	negs	r1, r1
 8002050:	1a52      	subs	r2, r2, r1
 8002052:	4692      	mov	sl, r2
 8002054:	0212      	lsls	r2, r2, #8
 8002056:	d400      	bmi.n	800205a <__aeabi_dsub+0x2ca>
 8002058:	e20a      	b.n	8002470 <__aeabi_dsub+0x6e0>
 800205a:	1ac4      	subs	r4, r0, r3
 800205c:	42a0      	cmp	r0, r4
 800205e:	4180      	sbcs	r0, r0
 8002060:	464b      	mov	r3, r9
 8002062:	4240      	negs	r0, r0
 8002064:	1aff      	subs	r7, r7, r3
 8002066:	1a3b      	subs	r3, r7, r0
 8002068:	469a      	mov	sl, r3
 800206a:	465d      	mov	r5, fp
 800206c:	e71a      	b.n	8001ea4 <__aeabi_dsub+0x114>
 800206e:	003a      	movs	r2, r7
 8002070:	4302      	orrs	r2, r0
 8002072:	d073      	beq.n	800215c <__aeabi_dsub+0x3cc>
 8002074:	0022      	movs	r2, r4
 8002076:	3a01      	subs	r2, #1
 8002078:	2c01      	cmp	r4, #1
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x2ee>
 800207c:	e0cb      	b.n	8002216 <__aeabi_dsub+0x486>
 800207e:	4554      	cmp	r4, sl
 8002080:	d042      	beq.n	8002108 <__aeabi_dsub+0x378>
 8002082:	4694      	mov	ip, r2
 8002084:	e748      	b.n	8001f18 <__aeabi_dsub+0x188>
 8002086:	0010      	movs	r0, r2
 8002088:	3b1f      	subs	r3, #31
 800208a:	40d8      	lsrs	r0, r3
 800208c:	2920      	cmp	r1, #32
 800208e:	d003      	beq.n	8002098 <__aeabi_dsub+0x308>
 8002090:	2340      	movs	r3, #64	; 0x40
 8002092:	1a5b      	subs	r3, r3, r1
 8002094:	409a      	lsls	r2, r3
 8002096:	4314      	orrs	r4, r2
 8002098:	1e63      	subs	r3, r4, #1
 800209a:	419c      	sbcs	r4, r3
 800209c:	2300      	movs	r3, #0
 800209e:	2600      	movs	r6, #0
 80020a0:	469a      	mov	sl, r3
 80020a2:	4304      	orrs	r4, r0
 80020a4:	0763      	lsls	r3, r4, #29
 80020a6:	d000      	beq.n	80020aa <__aeabi_dsub+0x31a>
 80020a8:	e6fe      	b.n	8001ea8 <__aeabi_dsub+0x118>
 80020aa:	4652      	mov	r2, sl
 80020ac:	08e3      	lsrs	r3, r4, #3
 80020ae:	0752      	lsls	r2, r2, #29
 80020b0:	4313      	orrs	r3, r2
 80020b2:	4652      	mov	r2, sl
 80020b4:	46b4      	mov	ip, r6
 80020b6:	08d2      	lsrs	r2, r2, #3
 80020b8:	490f      	ldr	r1, [pc, #60]	; (80020f8 <__aeabi_dsub+0x368>)
 80020ba:	458c      	cmp	ip, r1
 80020bc:	d02a      	beq.n	8002114 <__aeabi_dsub+0x384>
 80020be:	0312      	lsls	r2, r2, #12
 80020c0:	0b14      	lsrs	r4, r2, #12
 80020c2:	4662      	mov	r2, ip
 80020c4:	0552      	lsls	r2, r2, #21
 80020c6:	0d52      	lsrs	r2, r2, #21
 80020c8:	e70c      	b.n	8001ee4 <__aeabi_dsub+0x154>
 80020ca:	003c      	movs	r4, r7
 80020cc:	4304      	orrs	r4, r0
 80020ce:	1e62      	subs	r2, r4, #1
 80020d0:	4194      	sbcs	r4, r2
 80020d2:	18e4      	adds	r4, r4, r3
 80020d4:	429c      	cmp	r4, r3
 80020d6:	4192      	sbcs	r2, r2
 80020d8:	4252      	negs	r2, r2
 80020da:	444a      	add	r2, r9
 80020dc:	4692      	mov	sl, r2
 80020de:	4653      	mov	r3, sl
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	d5df      	bpl.n	80020a4 <__aeabi_dsub+0x314>
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <__aeabi_dsub+0x368>)
 80020e6:	3601      	adds	r6, #1
 80020e8:	429e      	cmp	r6, r3
 80020ea:	d000      	beq.n	80020ee <__aeabi_dsub+0x35e>
 80020ec:	e0a0      	b.n	8002230 <__aeabi_dsub+0x4a0>
 80020ee:	0032      	movs	r2, r6
 80020f0:	2400      	movs	r4, #0
 80020f2:	2300      	movs	r3, #0
 80020f4:	e6f6      	b.n	8001ee4 <__aeabi_dsub+0x154>
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	000007ff 	.word	0x000007ff
 80020fc:	ff7fffff 	.word	0xff7fffff
 8002100:	fffff801 	.word	0xfffff801
 8002104:	000007fe 	.word	0x000007fe
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	464a      	mov	r2, r9
 800210c:	0752      	lsls	r2, r2, #29
 800210e:	4313      	orrs	r3, r2
 8002110:	464a      	mov	r2, r9
 8002112:	08d2      	lsrs	r2, r2, #3
 8002114:	0019      	movs	r1, r3
 8002116:	4311      	orrs	r1, r2
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x38c>
 800211a:	e1b5      	b.n	8002488 <__aeabi_dsub+0x6f8>
 800211c:	2480      	movs	r4, #128	; 0x80
 800211e:	0324      	lsls	r4, r4, #12
 8002120:	4314      	orrs	r4, r2
 8002122:	0324      	lsls	r4, r4, #12
 8002124:	4ad5      	ldr	r2, [pc, #852]	; (800247c <__aeabi_dsub+0x6ec>)
 8002126:	0b24      	lsrs	r4, r4, #12
 8002128:	e6dc      	b.n	8001ee4 <__aeabi_dsub+0x154>
 800212a:	0020      	movs	r0, r4
 800212c:	f000 fb2a 	bl	8002784 <__clzsi2>
 8002130:	0003      	movs	r3, r0
 8002132:	3318      	adds	r3, #24
 8002134:	2b1f      	cmp	r3, #31
 8002136:	dc00      	bgt.n	800213a <__aeabi_dsub+0x3aa>
 8002138:	e695      	b.n	8001e66 <__aeabi_dsub+0xd6>
 800213a:	0022      	movs	r2, r4
 800213c:	3808      	subs	r0, #8
 800213e:	4082      	lsls	r2, r0
 8002140:	2400      	movs	r4, #0
 8002142:	429e      	cmp	r6, r3
 8002144:	dc00      	bgt.n	8002148 <__aeabi_dsub+0x3b8>
 8002146:	e69a      	b.n	8001e7e <__aeabi_dsub+0xee>
 8002148:	1af6      	subs	r6, r6, r3
 800214a:	4bcd      	ldr	r3, [pc, #820]	; (8002480 <__aeabi_dsub+0x6f0>)
 800214c:	401a      	ands	r2, r3
 800214e:	4692      	mov	sl, r2
 8002150:	e6a8      	b.n	8001ea4 <__aeabi_dsub+0x114>
 8002152:	003c      	movs	r4, r7
 8002154:	4304      	orrs	r4, r0
 8002156:	1e62      	subs	r2, r4, #1
 8002158:	4194      	sbcs	r4, r2
 800215a:	e66c      	b.n	8001e36 <__aeabi_dsub+0xa6>
 800215c:	464a      	mov	r2, r9
 800215e:	08db      	lsrs	r3, r3, #3
 8002160:	0752      	lsls	r2, r2, #29
 8002162:	4313      	orrs	r3, r2
 8002164:	464a      	mov	r2, r9
 8002166:	08d2      	lsrs	r2, r2, #3
 8002168:	e7a6      	b.n	80020b8 <__aeabi_dsub+0x328>
 800216a:	4cc6      	ldr	r4, [pc, #792]	; (8002484 <__aeabi_dsub+0x6f4>)
 800216c:	1c72      	adds	r2, r6, #1
 800216e:	4222      	tst	r2, r4
 8002170:	d000      	beq.n	8002174 <__aeabi_dsub+0x3e4>
 8002172:	e0ac      	b.n	80022ce <__aeabi_dsub+0x53e>
 8002174:	464a      	mov	r2, r9
 8002176:	431a      	orrs	r2, r3
 8002178:	2e00      	cmp	r6, #0
 800217a:	d000      	beq.n	800217e <__aeabi_dsub+0x3ee>
 800217c:	e105      	b.n	800238a <__aeabi_dsub+0x5fa>
 800217e:	2a00      	cmp	r2, #0
 8002180:	d100      	bne.n	8002184 <__aeabi_dsub+0x3f4>
 8002182:	e156      	b.n	8002432 <__aeabi_dsub+0x6a2>
 8002184:	003a      	movs	r2, r7
 8002186:	4302      	orrs	r2, r0
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x3fc>
 800218a:	e0db      	b.n	8002344 <__aeabi_dsub+0x5b4>
 800218c:	181c      	adds	r4, r3, r0
 800218e:	429c      	cmp	r4, r3
 8002190:	419b      	sbcs	r3, r3
 8002192:	444f      	add	r7, r9
 8002194:	46ba      	mov	sl, r7
 8002196:	425b      	negs	r3, r3
 8002198:	449a      	add	sl, r3
 800219a:	4653      	mov	r3, sl
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	d400      	bmi.n	80021a2 <__aeabi_dsub+0x412>
 80021a0:	e780      	b.n	80020a4 <__aeabi_dsub+0x314>
 80021a2:	4652      	mov	r2, sl
 80021a4:	4bb6      	ldr	r3, [pc, #728]	; (8002480 <__aeabi_dsub+0x6f0>)
 80021a6:	2601      	movs	r6, #1
 80021a8:	401a      	ands	r2, r3
 80021aa:	4692      	mov	sl, r2
 80021ac:	e77a      	b.n	80020a4 <__aeabi_dsub+0x314>
 80021ae:	4cb3      	ldr	r4, [pc, #716]	; (800247c <__aeabi_dsub+0x6ec>)
 80021b0:	42a2      	cmp	r2, r4
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x426>
 80021b4:	e0c0      	b.n	8002338 <__aeabi_dsub+0x5a8>
 80021b6:	2480      	movs	r4, #128	; 0x80
 80021b8:	464d      	mov	r5, r9
 80021ba:	0424      	lsls	r4, r4, #16
 80021bc:	4325      	orrs	r5, r4
 80021be:	46a9      	mov	r9, r5
 80021c0:	4664      	mov	r4, ip
 80021c2:	2c38      	cmp	r4, #56	; 0x38
 80021c4:	dc53      	bgt.n	800226e <__aeabi_dsub+0x4de>
 80021c6:	4661      	mov	r1, ip
 80021c8:	2c1f      	cmp	r4, #31
 80021ca:	dd00      	ble.n	80021ce <__aeabi_dsub+0x43e>
 80021cc:	e0cd      	b.n	800236a <__aeabi_dsub+0x5da>
 80021ce:	2520      	movs	r5, #32
 80021d0:	001e      	movs	r6, r3
 80021d2:	1b2d      	subs	r5, r5, r4
 80021d4:	464c      	mov	r4, r9
 80021d6:	40ab      	lsls	r3, r5
 80021d8:	40ac      	lsls	r4, r5
 80021da:	40ce      	lsrs	r6, r1
 80021dc:	1e5d      	subs	r5, r3, #1
 80021de:	41ab      	sbcs	r3, r5
 80021e0:	4334      	orrs	r4, r6
 80021e2:	4323      	orrs	r3, r4
 80021e4:	464c      	mov	r4, r9
 80021e6:	40cc      	lsrs	r4, r1
 80021e8:	1b3f      	subs	r7, r7, r4
 80021ea:	e045      	b.n	8002278 <__aeabi_dsub+0x4e8>
 80021ec:	464a      	mov	r2, r9
 80021ee:	1a1c      	subs	r4, r3, r0
 80021f0:	1bd1      	subs	r1, r2, r7
 80021f2:	42a3      	cmp	r3, r4
 80021f4:	4192      	sbcs	r2, r2
 80021f6:	4252      	negs	r2, r2
 80021f8:	4692      	mov	sl, r2
 80021fa:	000a      	movs	r2, r1
 80021fc:	4651      	mov	r1, sl
 80021fe:	1a52      	subs	r2, r2, r1
 8002200:	4692      	mov	sl, r2
 8002202:	0212      	lsls	r2, r2, #8
 8002204:	d500      	bpl.n	8002208 <__aeabi_dsub+0x478>
 8002206:	e083      	b.n	8002310 <__aeabi_dsub+0x580>
 8002208:	4653      	mov	r3, sl
 800220a:	4323      	orrs	r3, r4
 800220c:	d000      	beq.n	8002210 <__aeabi_dsub+0x480>
 800220e:	e621      	b.n	8001e54 <__aeabi_dsub+0xc4>
 8002210:	2200      	movs	r2, #0
 8002212:	2500      	movs	r5, #0
 8002214:	e753      	b.n	80020be <__aeabi_dsub+0x32e>
 8002216:	181c      	adds	r4, r3, r0
 8002218:	429c      	cmp	r4, r3
 800221a:	419b      	sbcs	r3, r3
 800221c:	444f      	add	r7, r9
 800221e:	46ba      	mov	sl, r7
 8002220:	425b      	negs	r3, r3
 8002222:	449a      	add	sl, r3
 8002224:	4653      	mov	r3, sl
 8002226:	2601      	movs	r6, #1
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	d400      	bmi.n	800222e <__aeabi_dsub+0x49e>
 800222c:	e73a      	b.n	80020a4 <__aeabi_dsub+0x314>
 800222e:	2602      	movs	r6, #2
 8002230:	4652      	mov	r2, sl
 8002232:	4b93      	ldr	r3, [pc, #588]	; (8002480 <__aeabi_dsub+0x6f0>)
 8002234:	2101      	movs	r1, #1
 8002236:	401a      	ands	r2, r3
 8002238:	0013      	movs	r3, r2
 800223a:	4021      	ands	r1, r4
 800223c:	0862      	lsrs	r2, r4, #1
 800223e:	430a      	orrs	r2, r1
 8002240:	07dc      	lsls	r4, r3, #31
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	469a      	mov	sl, r3
 8002246:	4314      	orrs	r4, r2
 8002248:	e62c      	b.n	8001ea4 <__aeabi_dsub+0x114>
 800224a:	0039      	movs	r1, r7
 800224c:	3a20      	subs	r2, #32
 800224e:	40d1      	lsrs	r1, r2
 8002250:	4662      	mov	r2, ip
 8002252:	2a20      	cmp	r2, #32
 8002254:	d006      	beq.n	8002264 <__aeabi_dsub+0x4d4>
 8002256:	4664      	mov	r4, ip
 8002258:	2240      	movs	r2, #64	; 0x40
 800225a:	1b12      	subs	r2, r2, r4
 800225c:	003c      	movs	r4, r7
 800225e:	4094      	lsls	r4, r2
 8002260:	4304      	orrs	r4, r0
 8002262:	9401      	str	r4, [sp, #4]
 8002264:	9c01      	ldr	r4, [sp, #4]
 8002266:	1e62      	subs	r2, r4, #1
 8002268:	4194      	sbcs	r4, r2
 800226a:	430c      	orrs	r4, r1
 800226c:	e5e3      	b.n	8001e36 <__aeabi_dsub+0xa6>
 800226e:	4649      	mov	r1, r9
 8002270:	4319      	orrs	r1, r3
 8002272:	000b      	movs	r3, r1
 8002274:	1e5c      	subs	r4, r3, #1
 8002276:	41a3      	sbcs	r3, r4
 8002278:	1ac4      	subs	r4, r0, r3
 800227a:	42a0      	cmp	r0, r4
 800227c:	419b      	sbcs	r3, r3
 800227e:	425b      	negs	r3, r3
 8002280:	1afb      	subs	r3, r7, r3
 8002282:	469a      	mov	sl, r3
 8002284:	465d      	mov	r5, fp
 8002286:	0016      	movs	r6, r2
 8002288:	e5dc      	b.n	8001e44 <__aeabi_dsub+0xb4>
 800228a:	4649      	mov	r1, r9
 800228c:	4319      	orrs	r1, r3
 800228e:	d100      	bne.n	8002292 <__aeabi_dsub+0x502>
 8002290:	e0ae      	b.n	80023f0 <__aeabi_dsub+0x660>
 8002292:	4661      	mov	r1, ip
 8002294:	4664      	mov	r4, ip
 8002296:	3901      	subs	r1, #1
 8002298:	2c01      	cmp	r4, #1
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x50e>
 800229c:	e0e0      	b.n	8002460 <__aeabi_dsub+0x6d0>
 800229e:	4c77      	ldr	r4, [pc, #476]	; (800247c <__aeabi_dsub+0x6ec>)
 80022a0:	45a4      	cmp	ip, r4
 80022a2:	d056      	beq.n	8002352 <__aeabi_dsub+0x5c2>
 80022a4:	468c      	mov	ip, r1
 80022a6:	e69a      	b.n	8001fde <__aeabi_dsub+0x24e>
 80022a8:	4661      	mov	r1, ip
 80022aa:	2220      	movs	r2, #32
 80022ac:	003c      	movs	r4, r7
 80022ae:	1a52      	subs	r2, r2, r1
 80022b0:	4094      	lsls	r4, r2
 80022b2:	0001      	movs	r1, r0
 80022b4:	4090      	lsls	r0, r2
 80022b6:	46a0      	mov	r8, r4
 80022b8:	4664      	mov	r4, ip
 80022ba:	1e42      	subs	r2, r0, #1
 80022bc:	4190      	sbcs	r0, r2
 80022be:	4662      	mov	r2, ip
 80022c0:	40e1      	lsrs	r1, r4
 80022c2:	4644      	mov	r4, r8
 80022c4:	40d7      	lsrs	r7, r2
 80022c6:	430c      	orrs	r4, r1
 80022c8:	4304      	orrs	r4, r0
 80022ca:	44b9      	add	r9, r7
 80022cc:	e701      	b.n	80020d2 <__aeabi_dsub+0x342>
 80022ce:	496b      	ldr	r1, [pc, #428]	; (800247c <__aeabi_dsub+0x6ec>)
 80022d0:	428a      	cmp	r2, r1
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dsub+0x546>
 80022d4:	e70c      	b.n	80020f0 <__aeabi_dsub+0x360>
 80022d6:	1818      	adds	r0, r3, r0
 80022d8:	4298      	cmp	r0, r3
 80022da:	419b      	sbcs	r3, r3
 80022dc:	444f      	add	r7, r9
 80022de:	425b      	negs	r3, r3
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	07dc      	lsls	r4, r3, #31
 80022e4:	0840      	lsrs	r0, r0, #1
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	469a      	mov	sl, r3
 80022ea:	0016      	movs	r6, r2
 80022ec:	4304      	orrs	r4, r0
 80022ee:	e6d9      	b.n	80020a4 <__aeabi_dsub+0x314>
 80022f0:	2a00      	cmp	r2, #0
 80022f2:	d000      	beq.n	80022f6 <__aeabi_dsub+0x566>
 80022f4:	e081      	b.n	80023fa <__aeabi_dsub+0x66a>
 80022f6:	003b      	movs	r3, r7
 80022f8:	4303      	orrs	r3, r0
 80022fa:	d11d      	bne.n	8002338 <__aeabi_dsub+0x5a8>
 80022fc:	2280      	movs	r2, #128	; 0x80
 80022fe:	2500      	movs	r5, #0
 8002300:	0312      	lsls	r2, r2, #12
 8002302:	e70b      	b.n	800211c <__aeabi_dsub+0x38c>
 8002304:	08c0      	lsrs	r0, r0, #3
 8002306:	077b      	lsls	r3, r7, #29
 8002308:	465d      	mov	r5, fp
 800230a:	4303      	orrs	r3, r0
 800230c:	08fa      	lsrs	r2, r7, #3
 800230e:	e6d3      	b.n	80020b8 <__aeabi_dsub+0x328>
 8002310:	1ac4      	subs	r4, r0, r3
 8002312:	42a0      	cmp	r0, r4
 8002314:	4180      	sbcs	r0, r0
 8002316:	464b      	mov	r3, r9
 8002318:	4240      	negs	r0, r0
 800231a:	1aff      	subs	r7, r7, r3
 800231c:	1a3b      	subs	r3, r7, r0
 800231e:	469a      	mov	sl, r3
 8002320:	465d      	mov	r5, fp
 8002322:	e597      	b.n	8001e54 <__aeabi_dsub+0xc4>
 8002324:	1a1c      	subs	r4, r3, r0
 8002326:	464a      	mov	r2, r9
 8002328:	42a3      	cmp	r3, r4
 800232a:	419b      	sbcs	r3, r3
 800232c:	1bd7      	subs	r7, r2, r7
 800232e:	425b      	negs	r3, r3
 8002330:	1afb      	subs	r3, r7, r3
 8002332:	469a      	mov	sl, r3
 8002334:	2601      	movs	r6, #1
 8002336:	e585      	b.n	8001e44 <__aeabi_dsub+0xb4>
 8002338:	08c0      	lsrs	r0, r0, #3
 800233a:	077b      	lsls	r3, r7, #29
 800233c:	465d      	mov	r5, fp
 800233e:	4303      	orrs	r3, r0
 8002340:	08fa      	lsrs	r2, r7, #3
 8002342:	e6e7      	b.n	8002114 <__aeabi_dsub+0x384>
 8002344:	464a      	mov	r2, r9
 8002346:	08db      	lsrs	r3, r3, #3
 8002348:	0752      	lsls	r2, r2, #29
 800234a:	4313      	orrs	r3, r2
 800234c:	464a      	mov	r2, r9
 800234e:	08d2      	lsrs	r2, r2, #3
 8002350:	e6b5      	b.n	80020be <__aeabi_dsub+0x32e>
 8002352:	08c0      	lsrs	r0, r0, #3
 8002354:	077b      	lsls	r3, r7, #29
 8002356:	4303      	orrs	r3, r0
 8002358:	08fa      	lsrs	r2, r7, #3
 800235a:	e6db      	b.n	8002114 <__aeabi_dsub+0x384>
 800235c:	4649      	mov	r1, r9
 800235e:	4319      	orrs	r1, r3
 8002360:	000b      	movs	r3, r1
 8002362:	1e59      	subs	r1, r3, #1
 8002364:	418b      	sbcs	r3, r1
 8002366:	001c      	movs	r4, r3
 8002368:	e653      	b.n	8002012 <__aeabi_dsub+0x282>
 800236a:	464d      	mov	r5, r9
 800236c:	3c20      	subs	r4, #32
 800236e:	40e5      	lsrs	r5, r4
 8002370:	2920      	cmp	r1, #32
 8002372:	d005      	beq.n	8002380 <__aeabi_dsub+0x5f0>
 8002374:	2440      	movs	r4, #64	; 0x40
 8002376:	1a64      	subs	r4, r4, r1
 8002378:	4649      	mov	r1, r9
 800237a:	40a1      	lsls	r1, r4
 800237c:	430b      	orrs	r3, r1
 800237e:	4698      	mov	r8, r3
 8002380:	4643      	mov	r3, r8
 8002382:	1e5c      	subs	r4, r3, #1
 8002384:	41a3      	sbcs	r3, r4
 8002386:	432b      	orrs	r3, r5
 8002388:	e776      	b.n	8002278 <__aeabi_dsub+0x4e8>
 800238a:	2a00      	cmp	r2, #0
 800238c:	d0e1      	beq.n	8002352 <__aeabi_dsub+0x5c2>
 800238e:	003a      	movs	r2, r7
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	4302      	orrs	r2, r0
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x608>
 8002396:	e6b8      	b.n	800210a <__aeabi_dsub+0x37a>
 8002398:	464a      	mov	r2, r9
 800239a:	0752      	lsls	r2, r2, #29
 800239c:	2480      	movs	r4, #128	; 0x80
 800239e:	4313      	orrs	r3, r2
 80023a0:	464a      	mov	r2, r9
 80023a2:	0324      	lsls	r4, r4, #12
 80023a4:	08d2      	lsrs	r2, r2, #3
 80023a6:	4222      	tst	r2, r4
 80023a8:	d007      	beq.n	80023ba <__aeabi_dsub+0x62a>
 80023aa:	08fe      	lsrs	r6, r7, #3
 80023ac:	4226      	tst	r6, r4
 80023ae:	d104      	bne.n	80023ba <__aeabi_dsub+0x62a>
 80023b0:	465d      	mov	r5, fp
 80023b2:	0032      	movs	r2, r6
 80023b4:	08c3      	lsrs	r3, r0, #3
 80023b6:	077f      	lsls	r7, r7, #29
 80023b8:	433b      	orrs	r3, r7
 80023ba:	0f59      	lsrs	r1, r3, #29
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	0749      	lsls	r1, r1, #29
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	430b      	orrs	r3, r1
 80023c4:	e6a6      	b.n	8002114 <__aeabi_dsub+0x384>
 80023c6:	1ac4      	subs	r4, r0, r3
 80023c8:	42a0      	cmp	r0, r4
 80023ca:	4180      	sbcs	r0, r0
 80023cc:	464b      	mov	r3, r9
 80023ce:	4240      	negs	r0, r0
 80023d0:	1aff      	subs	r7, r7, r3
 80023d2:	1a3b      	subs	r3, r7, r0
 80023d4:	469a      	mov	sl, r3
 80023d6:	465d      	mov	r5, fp
 80023d8:	2601      	movs	r6, #1
 80023da:	e533      	b.n	8001e44 <__aeabi_dsub+0xb4>
 80023dc:	003b      	movs	r3, r7
 80023de:	4303      	orrs	r3, r0
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x654>
 80023e2:	e715      	b.n	8002210 <__aeabi_dsub+0x480>
 80023e4:	08c0      	lsrs	r0, r0, #3
 80023e6:	077b      	lsls	r3, r7, #29
 80023e8:	465d      	mov	r5, fp
 80023ea:	4303      	orrs	r3, r0
 80023ec:	08fa      	lsrs	r2, r7, #3
 80023ee:	e666      	b.n	80020be <__aeabi_dsub+0x32e>
 80023f0:	08c0      	lsrs	r0, r0, #3
 80023f2:	077b      	lsls	r3, r7, #29
 80023f4:	4303      	orrs	r3, r0
 80023f6:	08fa      	lsrs	r2, r7, #3
 80023f8:	e65e      	b.n	80020b8 <__aeabi_dsub+0x328>
 80023fa:	003a      	movs	r2, r7
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	4302      	orrs	r2, r0
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x674>
 8002402:	e682      	b.n	800210a <__aeabi_dsub+0x37a>
 8002404:	464a      	mov	r2, r9
 8002406:	0752      	lsls	r2, r2, #29
 8002408:	2480      	movs	r4, #128	; 0x80
 800240a:	4313      	orrs	r3, r2
 800240c:	464a      	mov	r2, r9
 800240e:	0324      	lsls	r4, r4, #12
 8002410:	08d2      	lsrs	r2, r2, #3
 8002412:	4222      	tst	r2, r4
 8002414:	d007      	beq.n	8002426 <__aeabi_dsub+0x696>
 8002416:	08fe      	lsrs	r6, r7, #3
 8002418:	4226      	tst	r6, r4
 800241a:	d104      	bne.n	8002426 <__aeabi_dsub+0x696>
 800241c:	465d      	mov	r5, fp
 800241e:	0032      	movs	r2, r6
 8002420:	08c3      	lsrs	r3, r0, #3
 8002422:	077f      	lsls	r7, r7, #29
 8002424:	433b      	orrs	r3, r7
 8002426:	0f59      	lsrs	r1, r3, #29
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	0749      	lsls	r1, r1, #29
 800242e:	430b      	orrs	r3, r1
 8002430:	e670      	b.n	8002114 <__aeabi_dsub+0x384>
 8002432:	08c0      	lsrs	r0, r0, #3
 8002434:	077b      	lsls	r3, r7, #29
 8002436:	4303      	orrs	r3, r0
 8002438:	08fa      	lsrs	r2, r7, #3
 800243a:	e640      	b.n	80020be <__aeabi_dsub+0x32e>
 800243c:	464c      	mov	r4, r9
 800243e:	3920      	subs	r1, #32
 8002440:	40cc      	lsrs	r4, r1
 8002442:	4661      	mov	r1, ip
 8002444:	2920      	cmp	r1, #32
 8002446:	d006      	beq.n	8002456 <__aeabi_dsub+0x6c6>
 8002448:	4666      	mov	r6, ip
 800244a:	2140      	movs	r1, #64	; 0x40
 800244c:	1b89      	subs	r1, r1, r6
 800244e:	464e      	mov	r6, r9
 8002450:	408e      	lsls	r6, r1
 8002452:	4333      	orrs	r3, r6
 8002454:	4698      	mov	r8, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1e59      	subs	r1, r3, #1
 800245a:	418b      	sbcs	r3, r1
 800245c:	431c      	orrs	r4, r3
 800245e:	e5d8      	b.n	8002012 <__aeabi_dsub+0x282>
 8002460:	181c      	adds	r4, r3, r0
 8002462:	4284      	cmp	r4, r0
 8002464:	4180      	sbcs	r0, r0
 8002466:	444f      	add	r7, r9
 8002468:	46ba      	mov	sl, r7
 800246a:	4240      	negs	r0, r0
 800246c:	4482      	add	sl, r0
 800246e:	e6d9      	b.n	8002224 <__aeabi_dsub+0x494>
 8002470:	4653      	mov	r3, sl
 8002472:	4323      	orrs	r3, r4
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x6e8>
 8002476:	e6cb      	b.n	8002210 <__aeabi_dsub+0x480>
 8002478:	e614      	b.n	80020a4 <__aeabi_dsub+0x314>
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	000007ff 	.word	0x000007ff
 8002480:	ff7fffff 	.word	0xff7fffff
 8002484:	000007fe 	.word	0x000007fe
 8002488:	2300      	movs	r3, #0
 800248a:	4a01      	ldr	r2, [pc, #4]	; (8002490 <__aeabi_dsub+0x700>)
 800248c:	001c      	movs	r4, r3
 800248e:	e529      	b.n	8001ee4 <__aeabi_dsub+0x154>
 8002490:	000007ff 	.word	0x000007ff

08002494 <__aeabi_dcmpun>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	0005      	movs	r5, r0
 8002498:	480c      	ldr	r0, [pc, #48]	; (80024cc <__aeabi_dcmpun+0x38>)
 800249a:	031c      	lsls	r4, r3, #12
 800249c:	0016      	movs	r6, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	030a      	lsls	r2, r1, #12
 80024a2:	0049      	lsls	r1, r1, #1
 80024a4:	0b12      	lsrs	r2, r2, #12
 80024a6:	0d49      	lsrs	r1, r1, #21
 80024a8:	0b24      	lsrs	r4, r4, #12
 80024aa:	0d5b      	lsrs	r3, r3, #21
 80024ac:	4281      	cmp	r1, r0
 80024ae:	d008      	beq.n	80024c2 <__aeabi_dcmpun+0x2e>
 80024b0:	4a06      	ldr	r2, [pc, #24]	; (80024cc <__aeabi_dcmpun+0x38>)
 80024b2:	2000      	movs	r0, #0
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d103      	bne.n	80024c0 <__aeabi_dcmpun+0x2c>
 80024b8:	0020      	movs	r0, r4
 80024ba:	4330      	orrs	r0, r6
 80024bc:	1e43      	subs	r3, r0, #1
 80024be:	4198      	sbcs	r0, r3
 80024c0:	bd70      	pop	{r4, r5, r6, pc}
 80024c2:	2001      	movs	r0, #1
 80024c4:	432a      	orrs	r2, r5
 80024c6:	d1fb      	bne.n	80024c0 <__aeabi_dcmpun+0x2c>
 80024c8:	e7f2      	b.n	80024b0 <__aeabi_dcmpun+0x1c>
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	000007ff 	.word	0x000007ff

080024d0 <__aeabi_d2iz>:
 80024d0:	000a      	movs	r2, r1
 80024d2:	b530      	push	{r4, r5, lr}
 80024d4:	4c13      	ldr	r4, [pc, #76]	; (8002524 <__aeabi_d2iz+0x54>)
 80024d6:	0053      	lsls	r3, r2, #1
 80024d8:	0309      	lsls	r1, r1, #12
 80024da:	0005      	movs	r5, r0
 80024dc:	0b09      	lsrs	r1, r1, #12
 80024de:	2000      	movs	r0, #0
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	0fd2      	lsrs	r2, r2, #31
 80024e4:	42a3      	cmp	r3, r4
 80024e6:	dd04      	ble.n	80024f2 <__aeabi_d2iz+0x22>
 80024e8:	480f      	ldr	r0, [pc, #60]	; (8002528 <__aeabi_d2iz+0x58>)
 80024ea:	4283      	cmp	r3, r0
 80024ec:	dd02      	ble.n	80024f4 <__aeabi_d2iz+0x24>
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <__aeabi_d2iz+0x5c>)
 80024f0:	18d0      	adds	r0, r2, r3
 80024f2:	bd30      	pop	{r4, r5, pc}
 80024f4:	2080      	movs	r0, #128	; 0x80
 80024f6:	0340      	lsls	r0, r0, #13
 80024f8:	4301      	orrs	r1, r0
 80024fa:	480d      	ldr	r0, [pc, #52]	; (8002530 <__aeabi_d2iz+0x60>)
 80024fc:	1ac0      	subs	r0, r0, r3
 80024fe:	281f      	cmp	r0, #31
 8002500:	dd08      	ble.n	8002514 <__aeabi_d2iz+0x44>
 8002502:	480c      	ldr	r0, [pc, #48]	; (8002534 <__aeabi_d2iz+0x64>)
 8002504:	1ac3      	subs	r3, r0, r3
 8002506:	40d9      	lsrs	r1, r3
 8002508:	000b      	movs	r3, r1
 800250a:	4258      	negs	r0, r3
 800250c:	2a00      	cmp	r2, #0
 800250e:	d1f0      	bne.n	80024f2 <__aeabi_d2iz+0x22>
 8002510:	0018      	movs	r0, r3
 8002512:	e7ee      	b.n	80024f2 <__aeabi_d2iz+0x22>
 8002514:	4c08      	ldr	r4, [pc, #32]	; (8002538 <__aeabi_d2iz+0x68>)
 8002516:	40c5      	lsrs	r5, r0
 8002518:	46a4      	mov	ip, r4
 800251a:	4463      	add	r3, ip
 800251c:	4099      	lsls	r1, r3
 800251e:	000b      	movs	r3, r1
 8002520:	432b      	orrs	r3, r5
 8002522:	e7f2      	b.n	800250a <__aeabi_d2iz+0x3a>
 8002524:	000003fe 	.word	0x000003fe
 8002528:	0000041d 	.word	0x0000041d
 800252c:	7fffffff 	.word	0x7fffffff
 8002530:	00000433 	.word	0x00000433
 8002534:	00000413 	.word	0x00000413
 8002538:	fffffbed 	.word	0xfffffbed

0800253c <__aeabi_i2d>:
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	2800      	cmp	r0, #0
 8002540:	d016      	beq.n	8002570 <__aeabi_i2d+0x34>
 8002542:	17c3      	asrs	r3, r0, #31
 8002544:	18c5      	adds	r5, r0, r3
 8002546:	405d      	eors	r5, r3
 8002548:	0fc4      	lsrs	r4, r0, #31
 800254a:	0028      	movs	r0, r5
 800254c:	f000 f91a 	bl	8002784 <__clzsi2>
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <__aeabi_i2d+0x5c>)
 8002552:	1a1b      	subs	r3, r3, r0
 8002554:	280a      	cmp	r0, #10
 8002556:	dc16      	bgt.n	8002586 <__aeabi_i2d+0x4a>
 8002558:	0002      	movs	r2, r0
 800255a:	002e      	movs	r6, r5
 800255c:	3215      	adds	r2, #21
 800255e:	4096      	lsls	r6, r2
 8002560:	220b      	movs	r2, #11
 8002562:	1a12      	subs	r2, r2, r0
 8002564:	40d5      	lsrs	r5, r2
 8002566:	055b      	lsls	r3, r3, #21
 8002568:	032d      	lsls	r5, r5, #12
 800256a:	0b2d      	lsrs	r5, r5, #12
 800256c:	0d5b      	lsrs	r3, r3, #21
 800256e:	e003      	b.n	8002578 <__aeabi_i2d+0x3c>
 8002570:	2400      	movs	r4, #0
 8002572:	2300      	movs	r3, #0
 8002574:	2500      	movs	r5, #0
 8002576:	2600      	movs	r6, #0
 8002578:	051b      	lsls	r3, r3, #20
 800257a:	432b      	orrs	r3, r5
 800257c:	07e4      	lsls	r4, r4, #31
 800257e:	4323      	orrs	r3, r4
 8002580:	0030      	movs	r0, r6
 8002582:	0019      	movs	r1, r3
 8002584:	bd70      	pop	{r4, r5, r6, pc}
 8002586:	380b      	subs	r0, #11
 8002588:	4085      	lsls	r5, r0
 800258a:	055b      	lsls	r3, r3, #21
 800258c:	032d      	lsls	r5, r5, #12
 800258e:	2600      	movs	r6, #0
 8002590:	0b2d      	lsrs	r5, r5, #12
 8002592:	0d5b      	lsrs	r3, r3, #21
 8002594:	e7f0      	b.n	8002578 <__aeabi_i2d+0x3c>
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	0000041e 	.word	0x0000041e

0800259c <__aeabi_ui2d>:
 800259c:	b510      	push	{r4, lr}
 800259e:	1e04      	subs	r4, r0, #0
 80025a0:	d010      	beq.n	80025c4 <__aeabi_ui2d+0x28>
 80025a2:	f000 f8ef 	bl	8002784 <__clzsi2>
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <__aeabi_ui2d+0x48>)
 80025a8:	1a1b      	subs	r3, r3, r0
 80025aa:	280a      	cmp	r0, #10
 80025ac:	dc11      	bgt.n	80025d2 <__aeabi_ui2d+0x36>
 80025ae:	220b      	movs	r2, #11
 80025b0:	0021      	movs	r1, r4
 80025b2:	1a12      	subs	r2, r2, r0
 80025b4:	40d1      	lsrs	r1, r2
 80025b6:	3015      	adds	r0, #21
 80025b8:	030a      	lsls	r2, r1, #12
 80025ba:	055b      	lsls	r3, r3, #21
 80025bc:	4084      	lsls	r4, r0
 80025be:	0b12      	lsrs	r2, r2, #12
 80025c0:	0d5b      	lsrs	r3, r3, #21
 80025c2:	e001      	b.n	80025c8 <__aeabi_ui2d+0x2c>
 80025c4:	2300      	movs	r3, #0
 80025c6:	2200      	movs	r2, #0
 80025c8:	051b      	lsls	r3, r3, #20
 80025ca:	4313      	orrs	r3, r2
 80025cc:	0020      	movs	r0, r4
 80025ce:	0019      	movs	r1, r3
 80025d0:	bd10      	pop	{r4, pc}
 80025d2:	0022      	movs	r2, r4
 80025d4:	380b      	subs	r0, #11
 80025d6:	4082      	lsls	r2, r0
 80025d8:	055b      	lsls	r3, r3, #21
 80025da:	0312      	lsls	r2, r2, #12
 80025dc:	2400      	movs	r4, #0
 80025de:	0b12      	lsrs	r2, r2, #12
 80025e0:	0d5b      	lsrs	r3, r3, #21
 80025e2:	e7f1      	b.n	80025c8 <__aeabi_ui2d+0x2c>
 80025e4:	0000041e 	.word	0x0000041e

080025e8 <__aeabi_f2d>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	0242      	lsls	r2, r0, #9
 80025ec:	0043      	lsls	r3, r0, #1
 80025ee:	0fc4      	lsrs	r4, r0, #31
 80025f0:	20fe      	movs	r0, #254	; 0xfe
 80025f2:	0e1b      	lsrs	r3, r3, #24
 80025f4:	1c59      	adds	r1, r3, #1
 80025f6:	0a55      	lsrs	r5, r2, #9
 80025f8:	4208      	tst	r0, r1
 80025fa:	d00c      	beq.n	8002616 <__aeabi_f2d+0x2e>
 80025fc:	21e0      	movs	r1, #224	; 0xe0
 80025fe:	0089      	lsls	r1, r1, #2
 8002600:	468c      	mov	ip, r1
 8002602:	076d      	lsls	r5, r5, #29
 8002604:	0b12      	lsrs	r2, r2, #12
 8002606:	4463      	add	r3, ip
 8002608:	051b      	lsls	r3, r3, #20
 800260a:	4313      	orrs	r3, r2
 800260c:	07e4      	lsls	r4, r4, #31
 800260e:	4323      	orrs	r3, r4
 8002610:	0028      	movs	r0, r5
 8002612:	0019      	movs	r1, r3
 8002614:	bd70      	pop	{r4, r5, r6, pc}
 8002616:	2b00      	cmp	r3, #0
 8002618:	d114      	bne.n	8002644 <__aeabi_f2d+0x5c>
 800261a:	2d00      	cmp	r5, #0
 800261c:	d01b      	beq.n	8002656 <__aeabi_f2d+0x6e>
 800261e:	0028      	movs	r0, r5
 8002620:	f000 f8b0 	bl	8002784 <__clzsi2>
 8002624:	280a      	cmp	r0, #10
 8002626:	dc1c      	bgt.n	8002662 <__aeabi_f2d+0x7a>
 8002628:	230b      	movs	r3, #11
 800262a:	002a      	movs	r2, r5
 800262c:	1a1b      	subs	r3, r3, r0
 800262e:	40da      	lsrs	r2, r3
 8002630:	0003      	movs	r3, r0
 8002632:	3315      	adds	r3, #21
 8002634:	409d      	lsls	r5, r3
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <__aeabi_f2d+0x88>)
 8002638:	0312      	lsls	r2, r2, #12
 800263a:	1a1b      	subs	r3, r3, r0
 800263c:	055b      	lsls	r3, r3, #21
 800263e:	0b12      	lsrs	r2, r2, #12
 8002640:	0d5b      	lsrs	r3, r3, #21
 8002642:	e7e1      	b.n	8002608 <__aeabi_f2d+0x20>
 8002644:	2d00      	cmp	r5, #0
 8002646:	d009      	beq.n	800265c <__aeabi_f2d+0x74>
 8002648:	0b13      	lsrs	r3, r2, #12
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	0312      	lsls	r2, r2, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	076d      	lsls	r5, r5, #29
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <__aeabi_f2d+0x8c>)
 8002654:	e7d8      	b.n	8002608 <__aeabi_f2d+0x20>
 8002656:	2300      	movs	r3, #0
 8002658:	2200      	movs	r2, #0
 800265a:	e7d5      	b.n	8002608 <__aeabi_f2d+0x20>
 800265c:	2200      	movs	r2, #0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <__aeabi_f2d+0x8c>)
 8002660:	e7d2      	b.n	8002608 <__aeabi_f2d+0x20>
 8002662:	0003      	movs	r3, r0
 8002664:	002a      	movs	r2, r5
 8002666:	3b0b      	subs	r3, #11
 8002668:	409a      	lsls	r2, r3
 800266a:	2500      	movs	r5, #0
 800266c:	e7e3      	b.n	8002636 <__aeabi_f2d+0x4e>
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	00000389 	.word	0x00000389
 8002674:	000007ff 	.word	0x000007ff

08002678 <__aeabi_d2f>:
 8002678:	0002      	movs	r2, r0
 800267a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267c:	004b      	lsls	r3, r1, #1
 800267e:	030d      	lsls	r5, r1, #12
 8002680:	0f40      	lsrs	r0, r0, #29
 8002682:	0d5b      	lsrs	r3, r3, #21
 8002684:	0fcc      	lsrs	r4, r1, #31
 8002686:	0a6d      	lsrs	r5, r5, #9
 8002688:	493a      	ldr	r1, [pc, #232]	; (8002774 <__aeabi_d2f+0xfc>)
 800268a:	4305      	orrs	r5, r0
 800268c:	1c58      	adds	r0, r3, #1
 800268e:	00d7      	lsls	r7, r2, #3
 8002690:	4208      	tst	r0, r1
 8002692:	d00a      	beq.n	80026aa <__aeabi_d2f+0x32>
 8002694:	4938      	ldr	r1, [pc, #224]	; (8002778 <__aeabi_d2f+0x100>)
 8002696:	1859      	adds	r1, r3, r1
 8002698:	29fe      	cmp	r1, #254	; 0xfe
 800269a:	dd16      	ble.n	80026ca <__aeabi_d2f+0x52>
 800269c:	20ff      	movs	r0, #255	; 0xff
 800269e:	2200      	movs	r2, #0
 80026a0:	05c0      	lsls	r0, r0, #23
 80026a2:	4310      	orrs	r0, r2
 80026a4:	07e4      	lsls	r4, r4, #31
 80026a6:	4320      	orrs	r0, r4
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <__aeabi_d2f+0x44>
 80026ae:	433d      	orrs	r5, r7
 80026b0:	d026      	beq.n	8002700 <__aeabi_d2f+0x88>
 80026b2:	2205      	movs	r2, #5
 80026b4:	0192      	lsls	r2, r2, #6
 80026b6:	0a52      	lsrs	r2, r2, #9
 80026b8:	b2d8      	uxtb	r0, r3
 80026ba:	e7f1      	b.n	80026a0 <__aeabi_d2f+0x28>
 80026bc:	432f      	orrs	r7, r5
 80026be:	d0ed      	beq.n	800269c <__aeabi_d2f+0x24>
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	03d2      	lsls	r2, r2, #15
 80026c4:	20ff      	movs	r0, #255	; 0xff
 80026c6:	432a      	orrs	r2, r5
 80026c8:	e7ea      	b.n	80026a0 <__aeabi_d2f+0x28>
 80026ca:	2900      	cmp	r1, #0
 80026cc:	dd1b      	ble.n	8002706 <__aeabi_d2f+0x8e>
 80026ce:	0192      	lsls	r2, r2, #6
 80026d0:	1e50      	subs	r0, r2, #1
 80026d2:	4182      	sbcs	r2, r0
 80026d4:	00ed      	lsls	r5, r5, #3
 80026d6:	0f7f      	lsrs	r7, r7, #29
 80026d8:	432a      	orrs	r2, r5
 80026da:	433a      	orrs	r2, r7
 80026dc:	0753      	lsls	r3, r2, #29
 80026de:	d047      	beq.n	8002770 <__aeabi_d2f+0xf8>
 80026e0:	230f      	movs	r3, #15
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d000      	beq.n	80026ea <__aeabi_d2f+0x72>
 80026e8:	3204      	adds	r2, #4
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	04db      	lsls	r3, r3, #19
 80026ee:	4013      	ands	r3, r2
 80026f0:	d03e      	beq.n	8002770 <__aeabi_d2f+0xf8>
 80026f2:	1c48      	adds	r0, r1, #1
 80026f4:	29fe      	cmp	r1, #254	; 0xfe
 80026f6:	d0d1      	beq.n	800269c <__aeabi_d2f+0x24>
 80026f8:	0192      	lsls	r2, r2, #6
 80026fa:	0a52      	lsrs	r2, r2, #9
 80026fc:	b2c0      	uxtb	r0, r0
 80026fe:	e7cf      	b.n	80026a0 <__aeabi_d2f+0x28>
 8002700:	2000      	movs	r0, #0
 8002702:	2200      	movs	r2, #0
 8002704:	e7cc      	b.n	80026a0 <__aeabi_d2f+0x28>
 8002706:	000a      	movs	r2, r1
 8002708:	3217      	adds	r2, #23
 800270a:	db2f      	blt.n	800276c <__aeabi_d2f+0xf4>
 800270c:	2680      	movs	r6, #128	; 0x80
 800270e:	0436      	lsls	r6, r6, #16
 8002710:	432e      	orrs	r6, r5
 8002712:	251e      	movs	r5, #30
 8002714:	1a6d      	subs	r5, r5, r1
 8002716:	2d1f      	cmp	r5, #31
 8002718:	dd11      	ble.n	800273e <__aeabi_d2f+0xc6>
 800271a:	2202      	movs	r2, #2
 800271c:	4252      	negs	r2, r2
 800271e:	1a52      	subs	r2, r2, r1
 8002720:	0031      	movs	r1, r6
 8002722:	40d1      	lsrs	r1, r2
 8002724:	2d20      	cmp	r5, #32
 8002726:	d004      	beq.n	8002732 <__aeabi_d2f+0xba>
 8002728:	4a14      	ldr	r2, [pc, #80]	; (800277c <__aeabi_d2f+0x104>)
 800272a:	4694      	mov	ip, r2
 800272c:	4463      	add	r3, ip
 800272e:	409e      	lsls	r6, r3
 8002730:	4337      	orrs	r7, r6
 8002732:	003a      	movs	r2, r7
 8002734:	1e53      	subs	r3, r2, #1
 8002736:	419a      	sbcs	r2, r3
 8002738:	430a      	orrs	r2, r1
 800273a:	2100      	movs	r1, #0
 800273c:	e7ce      	b.n	80026dc <__aeabi_d2f+0x64>
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <__aeabi_d2f+0x108>)
 8002740:	0038      	movs	r0, r7
 8002742:	4694      	mov	ip, r2
 8002744:	4463      	add	r3, ip
 8002746:	4098      	lsls	r0, r3
 8002748:	003a      	movs	r2, r7
 800274a:	1e41      	subs	r1, r0, #1
 800274c:	4188      	sbcs	r0, r1
 800274e:	409e      	lsls	r6, r3
 8002750:	40ea      	lsrs	r2, r5
 8002752:	4330      	orrs	r0, r6
 8002754:	4302      	orrs	r2, r0
 8002756:	2100      	movs	r1, #0
 8002758:	0753      	lsls	r3, r2, #29
 800275a:	d1c1      	bne.n	80026e0 <__aeabi_d2f+0x68>
 800275c:	2180      	movs	r1, #128	; 0x80
 800275e:	0013      	movs	r3, r2
 8002760:	04c9      	lsls	r1, r1, #19
 8002762:	2001      	movs	r0, #1
 8002764:	400b      	ands	r3, r1
 8002766:	420a      	tst	r2, r1
 8002768:	d1c6      	bne.n	80026f8 <__aeabi_d2f+0x80>
 800276a:	e7a3      	b.n	80026b4 <__aeabi_d2f+0x3c>
 800276c:	2300      	movs	r3, #0
 800276e:	e7a0      	b.n	80026b2 <__aeabi_d2f+0x3a>
 8002770:	000b      	movs	r3, r1
 8002772:	e79f      	b.n	80026b4 <__aeabi_d2f+0x3c>
 8002774:	000007fe 	.word	0x000007fe
 8002778:	fffffc80 	.word	0xfffffc80
 800277c:	fffffca2 	.word	0xfffffca2
 8002780:	fffffc82 	.word	0xfffffc82

08002784 <__clzsi2>:
 8002784:	211c      	movs	r1, #28
 8002786:	2301      	movs	r3, #1
 8002788:	041b      	lsls	r3, r3, #16
 800278a:	4298      	cmp	r0, r3
 800278c:	d301      	bcc.n	8002792 <__clzsi2+0xe>
 800278e:	0c00      	lsrs	r0, r0, #16
 8002790:	3910      	subs	r1, #16
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	4298      	cmp	r0, r3
 8002796:	d301      	bcc.n	800279c <__clzsi2+0x18>
 8002798:	0a00      	lsrs	r0, r0, #8
 800279a:	3908      	subs	r1, #8
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	4298      	cmp	r0, r3
 80027a0:	d301      	bcc.n	80027a6 <__clzsi2+0x22>
 80027a2:	0900      	lsrs	r0, r0, #4
 80027a4:	3904      	subs	r1, #4
 80027a6:	a202      	add	r2, pc, #8	; (adr r2, 80027b0 <__clzsi2+0x2c>)
 80027a8:	5c10      	ldrb	r0, [r2, r0]
 80027aa:	1840      	adds	r0, r0, r1
 80027ac:	4770      	bx	lr
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	02020304 	.word	0x02020304
 80027b4:	01010101 	.word	0x01010101
	...

080027c0 <__clzdi2>:
 80027c0:	b510      	push	{r4, lr}
 80027c2:	2900      	cmp	r1, #0
 80027c4:	d103      	bne.n	80027ce <__clzdi2+0xe>
 80027c6:	f7ff ffdd 	bl	8002784 <__clzsi2>
 80027ca:	3020      	adds	r0, #32
 80027cc:	e002      	b.n	80027d4 <__clzdi2+0x14>
 80027ce:	0008      	movs	r0, r1
 80027d0:	f7ff ffd8 	bl	8002784 <__clzsi2>
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)

080027d8 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 80027de:	003b      	movs	r3, r7
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2212      	movs	r2, #18
 80027e8:	2100      	movs	r1, #0
 80027ea:	0018      	movs	r0, r3
 80027ec:	f003 fdd8 	bl	80063a0 <memset>
	uint16_t Callib_Start = 0xAA;
 80027f0:	2116      	movs	r1, #22
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	22aa      	movs	r2, #170	; 0xaa
 80027f6:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	881a      	ldrh	r2, [r3, #0]
 80027fc:	4845      	ldr	r0, [pc, #276]	; (8002914 <read_calliberation_data+0x13c>)
 80027fe:	2301      	movs	r3, #1
 8002800:	425b      	negs	r3, r3
 8002802:	9302      	str	r3, [sp, #8]
 8002804:	2316      	movs	r3, #22
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	003b      	movs	r3, r7
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2301      	movs	r3, #1
 800280e:	21ee      	movs	r1, #238	; 0xee
 8002810:	f001 fbcc 	bl	8003fac <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8002814:	003b      	movs	r3, r7
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	b21a      	sxth	r2, r3
 800281c:	003b      	movs	r3, r7
 800281e:	785b      	ldrb	r3, [r3, #1]
 8002820:	b21b      	sxth	r3, r3
 8002822:	4313      	orrs	r3, r2
 8002824:	b21a      	sxth	r2, r3
 8002826:	4b3c      	ldr	r3, [pc, #240]	; (8002918 <read_calliberation_data+0x140>)
 8002828:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 800282a:	003b      	movs	r3, r7
 800282c:	789b      	ldrb	r3, [r3, #2]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	b21a      	sxth	r2, r3
 8002832:	003b      	movs	r3, r7
 8002834:	78db      	ldrb	r3, [r3, #3]
 8002836:	b21b      	sxth	r3, r3
 8002838:	4313      	orrs	r3, r2
 800283a:	b21a      	sxth	r2, r3
 800283c:	4b37      	ldr	r3, [pc, #220]	; (800291c <read_calliberation_data+0x144>)
 800283e:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8002840:	003b      	movs	r3, r7
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	b21a      	sxth	r2, r3
 8002848:	003b      	movs	r3, r7
 800284a:	795b      	ldrb	r3, [r3, #5]
 800284c:	b21b      	sxth	r3, r3
 800284e:	4313      	orrs	r3, r2
 8002850:	b21a      	sxth	r2, r3
 8002852:	4b33      	ldr	r3, [pc, #204]	; (8002920 <read_calliberation_data+0x148>)
 8002854:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8002856:	003b      	movs	r3, r7
 8002858:	799b      	ldrb	r3, [r3, #6]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	b21a      	sxth	r2, r3
 800285e:	003b      	movs	r3, r7
 8002860:	79db      	ldrb	r3, [r3, #7]
 8002862:	b21b      	sxth	r3, r3
 8002864:	4313      	orrs	r3, r2
 8002866:	b21b      	sxth	r3, r3
 8002868:	b29a      	uxth	r2, r3
 800286a:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <read_calliberation_data+0x14c>)
 800286c:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 800286e:	003b      	movs	r3, r7
 8002870:	7a1b      	ldrb	r3, [r3, #8]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	b21a      	sxth	r2, r3
 8002876:	003b      	movs	r3, r7
 8002878:	7a5b      	ldrb	r3, [r3, #9]
 800287a:	b21b      	sxth	r3, r3
 800287c:	4313      	orrs	r3, r2
 800287e:	b21b      	sxth	r3, r3
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <read_calliberation_data+0x150>)
 8002884:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8002886:	003b      	movs	r3, r7
 8002888:	7a9b      	ldrb	r3, [r3, #10]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	b21a      	sxth	r2, r3
 800288e:	003b      	movs	r3, r7
 8002890:	7adb      	ldrb	r3, [r3, #11]
 8002892:	b21b      	sxth	r3, r3
 8002894:	4313      	orrs	r3, r2
 8002896:	b21b      	sxth	r3, r3
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <read_calliberation_data+0x154>)
 800289c:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800289e:	003b      	movs	r3, r7
 80028a0:	7b1b      	ldrb	r3, [r3, #12]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	b21a      	sxth	r2, r3
 80028a6:	003b      	movs	r3, r7
 80028a8:	7b5b      	ldrb	r3, [r3, #13]
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	4313      	orrs	r3, r2
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <read_calliberation_data+0x158>)
 80028b2:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80028b4:	003b      	movs	r3, r7
 80028b6:	7b9b      	ldrb	r3, [r3, #14]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	003b      	movs	r3, r7
 80028be:	7bdb      	ldrb	r3, [r3, #15]
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b21a      	sxth	r2, r3
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <read_calliberation_data+0x15c>)
 80028c8:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80028ca:	003b      	movs	r3, r7
 80028cc:	7c1b      	ldrb	r3, [r3, #16]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	003b      	movs	r3, r7
 80028d4:	7c5b      	ldrb	r3, [r3, #17]
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	b21a      	sxth	r2, r3
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <read_calliberation_data+0x160>)
 80028de:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80028e0:	003b      	movs	r3, r7
 80028e2:	7c9b      	ldrb	r3, [r3, #18]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	003b      	movs	r3, r7
 80028ea:	7cdb      	ldrb	r3, [r3, #19]
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	4313      	orrs	r3, r2
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <read_calliberation_data+0x164>)
 80028f4:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 80028f6:	003b      	movs	r3, r7
 80028f8:	7d1b      	ldrb	r3, [r3, #20]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	b21a      	sxth	r2, r3
 80028fe:	003b      	movs	r3, r7
 8002900:	7d5b      	ldrb	r3, [r3, #21]
 8002902:	b21b      	sxth	r3, r3
 8002904:	4313      	orrs	r3, r2
 8002906:	b21a      	sxth	r2, r3
 8002908:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <read_calliberation_data+0x168>)
 800290a:	801a      	strh	r2, [r3, #0]

}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b006      	add	sp, #24
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200000d4 	.word	0x200000d4
 8002918:	2000008c 	.word	0x2000008c
 800291c:	2000008e 	.word	0x2000008e
 8002920:	20000090 	.word	0x20000090
 8002924:	20000092 	.word	0x20000092
 8002928:	20000094 	.word	0x20000094
 800292c:	20000096 	.word	0x20000096
 8002930:	20000098 	.word	0x20000098
 8002934:	2000009a 	.word	0x2000009a
 8002938:	2000009c 	.word	0x2000009c
 800293c:	2000009e 	.word	0x2000009e
 8002940:	200000a0 	.word	0x200000a0

08002944 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	222e      	movs	r2, #46	; 0x2e
 800294e:	701a      	strb	r2, [r3, #0]
	uint8_t Temp_RAW[2] = {0};
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	2200      	movs	r2, #0
 8002954:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8002956:	4815      	ldr	r0, [pc, #84]	; (80029ac <Get_UTemp+0x68>)
 8002958:	23fa      	movs	r3, #250	; 0xfa
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	2301      	movs	r3, #1
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	1dfb      	adds	r3, r7, #7
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2301      	movs	r3, #1
 8002968:	22f4      	movs	r2, #244	; 0xf4
 800296a:	21ee      	movs	r1, #238	; 0xee
 800296c:	f001 f9f0 	bl	8003d50 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8002970:	2005      	movs	r0, #5
 8002972:	f000 fed7 	bl	8003724 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8002976:	480d      	ldr	r0, [pc, #52]	; (80029ac <Get_UTemp+0x68>)
 8002978:	23fa      	movs	r3, #250	; 0xfa
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	2302      	movs	r3, #2
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2301      	movs	r3, #1
 8002988:	22f6      	movs	r2, #246	; 0xf6
 800298a:	21ee      	movs	r1, #238	; 0xee
 800298c:	f001 fb0e 	bl	8003fac <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	b29a      	uxth	r2, r3
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	785b      	ldrb	r3, [r3, #1]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	18d3      	adds	r3, r2, r3
 80029a2:	b29b      	uxth	r3, r3
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b002      	add	sp, #8
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200000d4 	.word	0x200000d4

080029b0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80029b4:	f7ff ffc6 	bl	8002944 <Get_UTemp>
 80029b8:	0003      	movs	r3, r0
 80029ba:	001a      	movs	r2, r3
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <BMP180_GetTemp+0xfc>)
 80029be:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <BMP180_GetTemp+0xfc>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a3a      	ldr	r2, [pc, #232]	; (8002ab0 <BMP180_GetTemp+0x100>)
 80029c6:	8812      	ldrh	r2, [r2, #0]
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7ff fdb6 	bl	800253c <__aeabi_i2d>
 80029d0:	0004      	movs	r4, r0
 80029d2:	000d      	movs	r5, r1
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <BMP180_GetTemp+0x104>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff fdaf 	bl	800253c <__aeabi_i2d>
 80029de:	2200      	movs	r2, #0
 80029e0:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <BMP180_GetTemp+0x108>)
 80029e2:	f7fe fb19 	bl	8001018 <__aeabi_ddiv>
 80029e6:	0002      	movs	r2, r0
 80029e8:	000b      	movs	r3, r1
 80029ea:	0020      	movs	r0, r4
 80029ec:	0029      	movs	r1, r5
 80029ee:	f7fe ff0d 	bl	800180c <__aeabi_dmul>
 80029f2:	0002      	movs	r2, r0
 80029f4:	000b      	movs	r3, r1
 80029f6:	0010      	movs	r0, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	f7ff fd69 	bl	80024d0 <__aeabi_d2iz>
 80029fe:	0002      	movs	r2, r0
 8002a00:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <BMP180_GetTemp+0x10c>)
 8002a02:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8002a04:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <BMP180_GetTemp+0x110>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	5e9b      	ldrsh	r3, [r3, r2]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff fd96 	bl	800253c <__aeabi_i2d>
 8002a10:	2200      	movs	r2, #0
 8002a12:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <BMP180_GetTemp+0x114>)
 8002a14:	f7fe fefa 	bl	800180c <__aeabi_dmul>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	000b      	movs	r3, r1
 8002a1c:	0014      	movs	r4, r2
 8002a1e:	001d      	movs	r5, r3
 8002a20:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <BMP180_GetTemp+0x118>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	5e9b      	ldrsh	r3, [r3, r2]
 8002a26:	001a      	movs	r2, r3
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <BMP180_GetTemp+0x10c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	18d3      	adds	r3, r2, r3
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff fd84 	bl	800253c <__aeabi_i2d>
 8002a34:	0002      	movs	r2, r0
 8002a36:	000b      	movs	r3, r1
 8002a38:	0020      	movs	r0, r4
 8002a3a:	0029      	movs	r1, r5
 8002a3c:	f7fe faec 	bl	8001018 <__aeabi_ddiv>
 8002a40:	0002      	movs	r2, r0
 8002a42:	000b      	movs	r3, r1
 8002a44:	0010      	movs	r0, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	f7ff fd42 	bl	80024d0 <__aeabi_d2iz>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <BMP180_GetTemp+0x11c>)
 8002a50:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <BMP180_GetTemp+0x10c>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <BMP180_GetTemp+0x11c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	18d2      	adds	r2, r2, r3
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <BMP180_GetTemp+0x120>)
 8002a5e:	601a      	str	r2, [r3, #0]
	Temp = (B5+8)/(pow(2,4));
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <BMP180_GetTemp+0x120>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3308      	adds	r3, #8
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7ff fd68 	bl	800253c <__aeabi_i2d>
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <BMP180_GetTemp+0x124>)
 8002a70:	f7fe fad2 	bl	8001018 <__aeabi_ddiv>
 8002a74:	0002      	movs	r2, r0
 8002a76:	000b      	movs	r3, r1
 8002a78:	0010      	movs	r0, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	f7ff fd28 	bl	80024d0 <__aeabi_d2iz>
 8002a80:	0002      	movs	r2, r0
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <BMP180_GetTemp+0x128>)
 8002a84:	601a      	str	r2, [r3, #0]
	return Temp/10.0;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <BMP180_GetTemp+0x128>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7ff fd56 	bl	800253c <__aeabi_i2d>
 8002a90:	2200      	movs	r2, #0
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <BMP180_GetTemp+0x12c>)
 8002a94:	f7fe fac0 	bl	8001018 <__aeabi_ddiv>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	000b      	movs	r3, r1
 8002a9c:	0010      	movs	r0, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	f7ff fdea 	bl	8002678 <__aeabi_d2f>
 8002aa4:	1c03      	adds	r3, r0, #0
}
 8002aa6:	1c18      	adds	r0, r3, #0
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8002aac:	200000a4 	.word	0x200000a4
 8002ab0:	20000096 	.word	0x20000096
 8002ab4:	20000094 	.word	0x20000094
 8002ab8:	40e00000 	.word	0x40e00000
 8002abc:	200000ac 	.word	0x200000ac
 8002ac0:	2000009e 	.word	0x2000009e
 8002ac4:	40a00000 	.word	0x40a00000
 8002ac8:	200000a0 	.word	0x200000a0
 8002acc:	200000b0 	.word	0x200000b0
 8002ad0:	200000bc 	.word	0x200000bc
 8002ad4:	40300000 	.word	0x40300000
 8002ad8:	200000d0 	.word	0x200000d0
 8002adc:	40240000 	.word	0x40240000

08002ae0 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b089      	sub	sp, #36	; 0x24
 8002ae4:	af04      	add	r7, sp, #16
 8002ae6:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3334      	adds	r3, #52	; 0x34
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	240f      	movs	r4, #15
 8002af6:	193b      	adds	r3, r7, r4
 8002af8:	701a      	strb	r2, [r3, #0]
	uint8_t Press_RAW[3] = {0};
 8002afa:	230c      	movs	r3, #12
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <Get_UPress+0xd0>)
 8002b00:	8812      	ldrh	r2, [r2, #0]
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	2202      	movs	r2, #2
 8002b06:	2100      	movs	r1, #0
 8002b08:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8002b0a:	482a      	ldr	r0, [pc, #168]	; (8002bb4 <Get_UPress+0xd4>)
 8002b0c:	23fa      	movs	r3, #250	; 0xfa
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	2301      	movs	r3, #1
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	193b      	adds	r3, r7, r4
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	22f4      	movs	r2, #244	; 0xf4
 8002b1e:	21ee      	movs	r1, #238	; 0xee
 8002b20:	f001 f916 	bl	8003d50 <HAL_I2C_Mem_Write>
	switch (oss)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d01b      	beq.n	8002b62 <Get_UPress+0x82>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	dc1c      	bgt.n	8002b6a <Get_UPress+0x8a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d011      	beq.n	8002b5a <Get_UPress+0x7a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	dc16      	bgt.n	8002b6a <Get_UPress+0x8a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <Get_UPress+0x6a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d004      	beq.n	8002b52 <Get_UPress+0x72>
 8002b48:	e00f      	b.n	8002b6a <Get_UPress+0x8a>
	{
		case (0):
			HAL_Delay (5);
 8002b4a:	2005      	movs	r0, #5
 8002b4c:	f000 fdea 	bl	8003724 <HAL_Delay>
			break;
 8002b50:	e00b      	b.n	8002b6a <Get_UPress+0x8a>
		case (1):
			HAL_Delay (8);
 8002b52:	2008      	movs	r0, #8
 8002b54:	f000 fde6 	bl	8003724 <HAL_Delay>
			break;
 8002b58:	e007      	b.n	8002b6a <Get_UPress+0x8a>
		case (2):
			HAL_Delay (14);
 8002b5a:	200e      	movs	r0, #14
 8002b5c:	f000 fde2 	bl	8003724 <HAL_Delay>
			break;
 8002b60:	e003      	b.n	8002b6a <Get_UPress+0x8a>
		case (3):
			HAL_Delay (26);
 8002b62:	201a      	movs	r0, #26
 8002b64:	f000 fdde 	bl	8003724 <HAL_Delay>
			break;
 8002b68:	46c0      	nop			; (mov r8, r8)
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8002b6a:	4812      	ldr	r0, [pc, #72]	; (8002bb4 <Get_UPress+0xd4>)
 8002b6c:	23fa      	movs	r3, #250	; 0xfa
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	9302      	str	r3, [sp, #8]
 8002b72:	2303      	movs	r3, #3
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	240c      	movs	r4, #12
 8002b78:	193b      	adds	r3, r7, r4
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	22f6      	movs	r2, #246	; 0xf6
 8002b80:	21ee      	movs	r1, #238	; 0xee
 8002b82:	f001 fa13 	bl	8003fac <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8002b86:	0021      	movs	r1, r4
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	18d3      	adds	r3, r2, r3
 8002b96:	187a      	adds	r2, r7, r1
 8002b98:	7892      	ldrb	r2, [r2, #2]
 8002b9a:	189a      	adds	r2, r3, r2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2108      	movs	r1, #8
 8002ba0:	1acb      	subs	r3, r1, r3
 8002ba2:	411a      	asrs	r2, r3
 8002ba4:	0013      	movs	r3, r2
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b005      	add	sp, #20
 8002bac:	bd90      	pop	{r4, r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	08007238 	.word	0x08007238
 8002bb4:	200000d4 	.word	0x200000d4

08002bb8 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7ff ff8c 	bl	8002ae0 <Get_UPress>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	001a      	movs	r2, r3
 8002bcc:	4bea      	ldr	r3, [pc, #936]	; (8002f78 <BMP180_GetPress+0x3c0>)
 8002bce:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8002bd0:	4bea      	ldr	r3, [pc, #936]	; (8002f7c <BMP180_GetPress+0x3c4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4aea      	ldr	r2, [pc, #936]	; (8002f80 <BMP180_GetPress+0x3c8>)
 8002bd6:	8812      	ldrh	r2, [r2, #0]
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7ff fcae 	bl	800253c <__aeabi_i2d>
 8002be0:	0004      	movs	r4, r0
 8002be2:	000d      	movs	r5, r1
 8002be4:	4be7      	ldr	r3, [pc, #924]	; (8002f84 <BMP180_GetPress+0x3cc>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff fca7 	bl	800253c <__aeabi_i2d>
 8002bee:	2200      	movs	r2, #0
 8002bf0:	4be5      	ldr	r3, [pc, #916]	; (8002f88 <BMP180_GetPress+0x3d0>)
 8002bf2:	f7fe fa11 	bl	8001018 <__aeabi_ddiv>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	000b      	movs	r3, r1
 8002bfa:	0020      	movs	r0, r4
 8002bfc:	0029      	movs	r1, r5
 8002bfe:	f7fe fe05 	bl	800180c <__aeabi_dmul>
 8002c02:	0002      	movs	r2, r0
 8002c04:	000b      	movs	r3, r1
 8002c06:	0010      	movs	r0, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	f7ff fc61 	bl	80024d0 <__aeabi_d2iz>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	4bde      	ldr	r3, [pc, #888]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002c12:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8002c14:	4bde      	ldr	r3, [pc, #888]	; (8002f90 <BMP180_GetPress+0x3d8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	5e9b      	ldrsh	r3, [r3, r2]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7ff fc8e 	bl	800253c <__aeabi_i2d>
 8002c20:	2200      	movs	r2, #0
 8002c22:	4bdc      	ldr	r3, [pc, #880]	; (8002f94 <BMP180_GetPress+0x3dc>)
 8002c24:	f7fe fdf2 	bl	800180c <__aeabi_dmul>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	000b      	movs	r3, r1
 8002c2c:	0014      	movs	r4, r2
 8002c2e:	001d      	movs	r5, r3
 8002c30:	4bd9      	ldr	r3, [pc, #868]	; (8002f98 <BMP180_GetPress+0x3e0>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	5e9b      	ldrsh	r3, [r3, r2]
 8002c36:	001a      	movs	r2, r3
 8002c38:	4bd4      	ldr	r3, [pc, #848]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	18d3      	adds	r3, r2, r3
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7ff fc7c 	bl	800253c <__aeabi_i2d>
 8002c44:	0002      	movs	r2, r0
 8002c46:	000b      	movs	r3, r1
 8002c48:	0020      	movs	r0, r4
 8002c4a:	0029      	movs	r1, r5
 8002c4c:	f7fe f9e4 	bl	8001018 <__aeabi_ddiv>
 8002c50:	0002      	movs	r2, r0
 8002c52:	000b      	movs	r3, r1
 8002c54:	0010      	movs	r0, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	f7ff fc3a 	bl	80024d0 <__aeabi_d2iz>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	4bcf      	ldr	r3, [pc, #828]	; (8002f9c <BMP180_GetPress+0x3e4>)
 8002c60:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 8002c62:	4bca      	ldr	r3, [pc, #808]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4bcd      	ldr	r3, [pc, #820]	; (8002f9c <BMP180_GetPress+0x3e4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	18d2      	adds	r2, r2, r3
 8002c6c:	4bcc      	ldr	r3, [pc, #816]	; (8002fa0 <BMP180_GetPress+0x3e8>)
 8002c6e:	601a      	str	r2, [r3, #0]
	B6 = B5-4000;
 8002c70:	4bcb      	ldr	r3, [pc, #812]	; (8002fa0 <BMP180_GetPress+0x3e8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4acb      	ldr	r2, [pc, #812]	; (8002fa4 <BMP180_GetPress+0x3ec>)
 8002c76:	189a      	adds	r2, r3, r2
 8002c78:	4bcb      	ldr	r3, [pc, #812]	; (8002fa8 <BMP180_GetPress+0x3f0>)
 8002c7a:	601a      	str	r2, [r3, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8002c7c:	4bcb      	ldr	r3, [pc, #812]	; (8002fac <BMP180_GetPress+0x3f4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	5e9b      	ldrsh	r3, [r3, r2]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff fc5a 	bl	800253c <__aeabi_i2d>
 8002c88:	0004      	movs	r4, r0
 8002c8a:	000d      	movs	r5, r1
 8002c8c:	4bc6      	ldr	r3, [pc, #792]	; (8002fa8 <BMP180_GetPress+0x3f0>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4bc5      	ldr	r3, [pc, #788]	; (8002fa8 <BMP180_GetPress+0x3f0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4353      	muls	r3, r2
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff fc50 	bl	800253c <__aeabi_i2d>
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	4bc4      	ldr	r3, [pc, #784]	; (8002fb0 <BMP180_GetPress+0x3f8>)
 8002ca0:	f7fe f9ba 	bl	8001018 <__aeabi_ddiv>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	000b      	movs	r3, r1
 8002ca8:	0020      	movs	r0, r4
 8002caa:	0029      	movs	r1, r5
 8002cac:	f7fe fdae 	bl	800180c <__aeabi_dmul>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	000b      	movs	r3, r1
 8002cb4:	0010      	movs	r0, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	4bb6      	ldr	r3, [pc, #728]	; (8002f94 <BMP180_GetPress+0x3dc>)
 8002cbc:	f7fe f9ac 	bl	8001018 <__aeabi_ddiv>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	000b      	movs	r3, r1
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	f7ff fc02 	bl	80024d0 <__aeabi_d2iz>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	4baf      	ldr	r3, [pc, #700]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002cd0:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 8002cd2:	4bb8      	ldr	r3, [pc, #736]	; (8002fb4 <BMP180_GetPress+0x3fc>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	5e9b      	ldrsh	r3, [r3, r2]
 8002cd8:	001a      	movs	r2, r3
 8002cda:	4bb3      	ldr	r3, [pc, #716]	; (8002fa8 <BMP180_GetPress+0x3f0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4353      	muls	r3, r2
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7ff fc2b 	bl	800253c <__aeabi_i2d>
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4baa      	ldr	r3, [pc, #680]	; (8002f94 <BMP180_GetPress+0x3dc>)
 8002cea:	f7fe f995 	bl	8001018 <__aeabi_ddiv>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	000b      	movs	r3, r1
 8002cf2:	0010      	movs	r0, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	f7ff fbeb 	bl	80024d0 <__aeabi_d2iz>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	4ba7      	ldr	r3, [pc, #668]	; (8002f9c <BMP180_GetPress+0x3e4>)
 8002cfe:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8002d00:	4ba2      	ldr	r3, [pc, #648]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4ba5      	ldr	r3, [pc, #660]	; (8002f9c <BMP180_GetPress+0x3e4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	18d2      	adds	r2, r2, r3
 8002d0a:	4bab      	ldr	r3, [pc, #684]	; (8002fb8 <BMP180_GetPress+0x400>)
 8002d0c:	601a      	str	r2, [r3, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8002d0e:	4bab      	ldr	r3, [pc, #684]	; (8002fbc <BMP180_GetPress+0x404>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	5e9b      	ldrsh	r3, [r3, r2]
 8002d14:	009a      	lsls	r2, r3, #2
 8002d16:	4ba8      	ldr	r3, [pc, #672]	; (8002fb8 <BMP180_GetPress+0x400>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	18d2      	adds	r2, r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	0013      	movs	r3, r2
 8002d22:	3302      	adds	r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da00      	bge.n	8002d2a <BMP180_GetPress+0x172>
 8002d28:	3303      	adds	r3, #3
 8002d2a:	109b      	asrs	r3, r3, #2
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	4ba4      	ldr	r3, [pc, #656]	; (8002fc0 <BMP180_GetPress+0x408>)
 8002d30:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8002d32:	4ba4      	ldr	r3, [pc, #656]	; (8002fc4 <BMP180_GetPress+0x40c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	5e9b      	ldrsh	r3, [r3, r2]
 8002d38:	001a      	movs	r2, r3
 8002d3a:	4b9b      	ldr	r3, [pc, #620]	; (8002fa8 <BMP180_GetPress+0x3f0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4353      	muls	r3, r2
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7ff fbfb 	bl	800253c <__aeabi_i2d>
 8002d46:	2200      	movs	r2, #0
 8002d48:	4b9f      	ldr	r3, [pc, #636]	; (8002fc8 <BMP180_GetPress+0x410>)
 8002d4a:	f7fe f965 	bl	8001018 <__aeabi_ddiv>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	000b      	movs	r3, r1
 8002d52:	0010      	movs	r0, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	f7ff fbbb 	bl	80024d0 <__aeabi_d2iz>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	4b8b      	ldr	r3, [pc, #556]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002d5e:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8002d60:	4b9a      	ldr	r3, [pc, #616]	; (8002fcc <BMP180_GetPress+0x414>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	5e9b      	ldrsh	r3, [r3, r2]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff fbe8 	bl	800253c <__aeabi_i2d>
 8002d6c:	0004      	movs	r4, r0
 8002d6e:	000d      	movs	r5, r1
 8002d70:	4b8d      	ldr	r3, [pc, #564]	; (8002fa8 <BMP180_GetPress+0x3f0>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b8c      	ldr	r3, [pc, #560]	; (8002fa8 <BMP180_GetPress+0x3f0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4353      	muls	r3, r2
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7ff fbde 	bl	800253c <__aeabi_i2d>
 8002d80:	2200      	movs	r2, #0
 8002d82:	4b8b      	ldr	r3, [pc, #556]	; (8002fb0 <BMP180_GetPress+0x3f8>)
 8002d84:	f7fe f948 	bl	8001018 <__aeabi_ddiv>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	000b      	movs	r3, r1
 8002d8c:	0020      	movs	r0, r4
 8002d8e:	0029      	movs	r1, r5
 8002d90:	f7fe fd3c 	bl	800180c <__aeabi_dmul>
 8002d94:	0002      	movs	r2, r0
 8002d96:	000b      	movs	r3, r1
 8002d98:	0010      	movs	r0, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	4b8c      	ldr	r3, [pc, #560]	; (8002fd0 <BMP180_GetPress+0x418>)
 8002da0:	f7fe f93a 	bl	8001018 <__aeabi_ddiv>
 8002da4:	0002      	movs	r2, r0
 8002da6:	000b      	movs	r3, r1
 8002da8:	0010      	movs	r0, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	f7ff fb90 	bl	80024d0 <__aeabi_d2iz>
 8002db0:	0002      	movs	r2, r0
 8002db2:	4b7a      	ldr	r3, [pc, #488]	; (8002f9c <BMP180_GetPress+0x3e4>)
 8002db4:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8002db6:	4b75      	ldr	r3, [pc, #468]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b78      	ldr	r3, [pc, #480]	; (8002f9c <BMP180_GetPress+0x3e4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	18d3      	adds	r3, r2, r3
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff fbba 	bl	800253c <__aeabi_i2d>
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4b82      	ldr	r3, [pc, #520]	; (8002fd4 <BMP180_GetPress+0x41c>)
 8002dcc:	f7fe f924 	bl	8001018 <__aeabi_ddiv>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	000b      	movs	r3, r1
 8002dd4:	0010      	movs	r0, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	f7ff fb7a 	bl	80024d0 <__aeabi_d2iz>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <BMP180_GetPress+0x400>)
 8002de0:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8002de2:	4b7d      	ldr	r3, [pc, #500]	; (8002fd8 <BMP180_GetPress+0x420>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	001a      	movs	r2, r3
 8002de8:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <BMP180_GetPress+0x400>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	0209      	lsls	r1, r1, #8
 8002df0:	468c      	mov	ip, r1
 8002df2:	4463      	add	r3, ip
 8002df4:	4353      	muls	r3, r2
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7ff fbd0 	bl	800259c <__aeabi_ui2d>
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <BMP180_GetPress+0x3d0>)
 8002e00:	f7fe f90a 	bl	8001018 <__aeabi_ddiv>
 8002e04:	0002      	movs	r2, r0
 8002e06:	000b      	movs	r3, r1
 8002e08:	0010      	movs	r0, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	f7fd fb4e 	bl	80004ac <__aeabi_d2uiz>
 8002e10:	0002      	movs	r2, r0
 8002e12:	4b72      	ldr	r3, [pc, #456]	; (8002fdc <BMP180_GetPress+0x424>)
 8002e14:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8002e16:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <BMP180_GetPress+0x3c0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <BMP180_GetPress+0x408>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	496f      	ldr	r1, [pc, #444]	; (8002fe0 <BMP180_GetPress+0x428>)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4111      	asrs	r1, r2
 8002e28:	000a      	movs	r2, r1
 8002e2a:	435a      	muls	r2, r3
 8002e2c:	4b6d      	ldr	r3, [pc, #436]	; (8002fe4 <BMP180_GetPress+0x42c>)
 8002e2e:	601a      	str	r2, [r3, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8002e30:	4b6c      	ldr	r3, [pc, #432]	; (8002fe4 <BMP180_GetPress+0x42c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	db0d      	blt.n	8002e54 <BMP180_GetPress+0x29c>
 8002e38:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <BMP180_GetPress+0x42c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	005a      	lsls	r2, r3, #1
 8002e3e:	4b67      	ldr	r3, [pc, #412]	; (8002fdc <BMP180_GetPress+0x424>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	0019      	movs	r1, r3
 8002e44:	0010      	movs	r0, r2
 8002e46:	f7fd f95d 	bl	8000104 <__udivsi3>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <BMP180_GetPress+0x430>)
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e00c      	b.n	8002e6e <BMP180_GetPress+0x2b6>
	else Press = (B7/B4)*2;
 8002e54:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <BMP180_GetPress+0x42c>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b60      	ldr	r3, [pc, #384]	; (8002fdc <BMP180_GetPress+0x424>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	0010      	movs	r0, r2
 8002e60:	f7fd f950 	bl	8000104 <__udivsi3>
 8002e64:	0003      	movs	r3, r0
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	001a      	movs	r2, r3
 8002e6a:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <BMP180_GetPress+0x430>)
 8002e6c:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8002e6e:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <BMP180_GetPress+0x430>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff fb62 	bl	800253c <__aeabi_i2d>
 8002e78:	2200      	movs	r2, #0
 8002e7a:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <BMP180_GetPress+0x434>)
 8002e7c:	f7fe f8cc 	bl	8001018 <__aeabi_ddiv>
 8002e80:	0002      	movs	r2, r0
 8002e82:	000b      	movs	r3, r1
 8002e84:	0014      	movs	r4, r2
 8002e86:	001d      	movs	r5, r3
 8002e88:	4b57      	ldr	r3, [pc, #348]	; (8002fe8 <BMP180_GetPress+0x430>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff fb55 	bl	800253c <__aeabi_i2d>
 8002e92:	2200      	movs	r2, #0
 8002e94:	4b55      	ldr	r3, [pc, #340]	; (8002fec <BMP180_GetPress+0x434>)
 8002e96:	f7fe f8bf 	bl	8001018 <__aeabi_ddiv>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	000b      	movs	r3, r1
 8002e9e:	0020      	movs	r0, r4
 8002ea0:	0029      	movs	r1, r5
 8002ea2:	f7fe fcb3 	bl	800180c <__aeabi_dmul>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	000b      	movs	r3, r1
 8002eaa:	0010      	movs	r0, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	f7ff fb0f 	bl	80024d0 <__aeabi_d2iz>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002eb6:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 8002eb8:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a4c      	ldr	r2, [pc, #304]	; (8002ff0 <BMP180_GetPress+0x438>)
 8002ebe:	4353      	muls	r3, r2
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7ff fb3b 	bl	800253c <__aeabi_i2d>
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <BMP180_GetPress+0x418>)
 8002eca:	f7fe f8a5 	bl	8001018 <__aeabi_ddiv>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	000b      	movs	r3, r1
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	f7ff fafb 	bl	80024d0 <__aeabi_d2iz>
 8002eda:	0002      	movs	r2, r0
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002ede:	601a      	str	r2, [r3, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8002ee0:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <BMP180_GetPress+0x430>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	015b      	lsls	r3, r3, #5
 8002ee8:	189b      	adds	r3, r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	00da      	lsls	r2, r3, #3
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	425b      	negs	r3, r3
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff fb1f 	bl	800253c <__aeabi_i2d>
 8002efe:	2200      	movs	r2, #0
 8002f00:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <BMP180_GetPress+0x418>)
 8002f02:	f7fe f889 	bl	8001018 <__aeabi_ddiv>
 8002f06:	0002      	movs	r2, r0
 8002f08:	000b      	movs	r3, r1
 8002f0a:	0010      	movs	r0, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	f7ff fadf 	bl	80024d0 <__aeabi_d2iz>
 8002f12:	0002      	movs	r2, r0
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <BMP180_GetPress+0x3e4>)
 8002f16:	601a      	str	r2, [r3, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8002f18:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <BMP180_GetPress+0x430>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7ff fb0d 	bl	800253c <__aeabi_i2d>
 8002f22:	0004      	movs	r4, r0
 8002f24:	000d      	movs	r5, r1
 8002f26:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <BMP180_GetPress+0x3d4>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <BMP180_GetPress+0x3e4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	18d3      	adds	r3, r2, r3
 8002f30:	4a30      	ldr	r2, [pc, #192]	; (8002ff4 <BMP180_GetPress+0x43c>)
 8002f32:	4694      	mov	ip, r2
 8002f34:	4463      	add	r3, ip
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7ff fb00 	bl	800253c <__aeabi_i2d>
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <BMP180_GetPress+0x440>)
 8002f40:	f7fe f86a 	bl	8001018 <__aeabi_ddiv>
 8002f44:	0002      	movs	r2, r0
 8002f46:	000b      	movs	r3, r1
 8002f48:	0020      	movs	r0, r4
 8002f4a:	0029      	movs	r1, r5
 8002f4c:	f7fd fd04 	bl	8000958 <__aeabi_dadd>
 8002f50:	0002      	movs	r2, r0
 8002f52:	000b      	movs	r3, r1
 8002f54:	0010      	movs	r0, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	f7ff faba 	bl	80024d0 <__aeabi_d2iz>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <BMP180_GetPress+0x430>)
 8002f60:	601a      	str	r2, [r3, #0]

	return Press;
 8002f62:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <BMP180_GetPress+0x430>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f7fd fca4 	bl	80008b4 <__aeabi_i2f>
 8002f6c:	1c03      	adds	r3, r0, #0
}
 8002f6e:	1c18      	adds	r0, r3, #0
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bdb0      	pop	{r4, r5, r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	200000a8 	.word	0x200000a8
 8002f7c:	200000a4 	.word	0x200000a4
 8002f80:	20000096 	.word	0x20000096
 8002f84:	20000094 	.word	0x20000094
 8002f88:	40e00000 	.word	0x40e00000
 8002f8c:	200000ac 	.word	0x200000ac
 8002f90:	2000009e 	.word	0x2000009e
 8002f94:	40a00000 	.word	0x40a00000
 8002f98:	200000a0 	.word	0x200000a0
 8002f9c:	200000b0 	.word	0x200000b0
 8002fa0:	200000bc 	.word	0x200000bc
 8002fa4:	fffff060 	.word	0xfffff060
 8002fa8:	200000c4 	.word	0x200000c4
 8002fac:	2000009a 	.word	0x2000009a
 8002fb0:	40b00000 	.word	0x40b00000
 8002fb4:	2000008e 	.word	0x2000008e
 8002fb8:	200000b4 	.word	0x200000b4
 8002fbc:	2000008c 	.word	0x2000008c
 8002fc0:	200000b8 	.word	0x200000b8
 8002fc4:	20000090 	.word	0x20000090
 8002fc8:	40c00000 	.word	0x40c00000
 8002fcc:	20000098 	.word	0x20000098
 8002fd0:	40f00000 	.word	0x40f00000
 8002fd4:	40100000 	.word	0x40100000
 8002fd8:	20000092 	.word	0x20000092
 8002fdc:	200000c0 	.word	0x200000c0
 8002fe0:	0000c350 	.word	0x0000c350
 8002fe4:	200000c8 	.word	0x200000c8
 8002fe8:	200000cc 	.word	0x200000cc
 8002fec:	40700000 	.word	0x40700000
 8002ff0:	00000bde 	.word	0x00000bde
 8002ff4:	00000ecf 	.word	0x00000ecf
 8002ff8:	40300000 	.word	0x40300000

08002ffc <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f7ff fdd6 	bl	8002bb8 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <BMP180_GetAlt+0x68>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0018      	movs	r0, r3
 8003012:	f7fd fc4f 	bl	80008b4 <__aeabi_i2f>
 8003016:	1c03      	adds	r3, r0, #0
 8003018:	4913      	ldr	r1, [pc, #76]	; (8003068 <BMP180_GetAlt+0x6c>)
 800301a:	1c18      	adds	r0, r3, #0
 800301c:	f7fd fb30 	bl	8000680 <__aeabi_fdiv>
 8003020:	1c03      	adds	r3, r0, #0
 8003022:	1c18      	adds	r0, r3, #0
 8003024:	f7ff fae0 	bl	80025e8 <__aeabi_f2d>
 8003028:	4a10      	ldr	r2, [pc, #64]	; (800306c <BMP180_GetAlt+0x70>)
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <BMP180_GetAlt+0x74>)
 800302c:	f003 f9ea 	bl	8006404 <pow>
 8003030:	0002      	movs	r2, r0
 8003032:	000b      	movs	r3, r1
 8003034:	2000      	movs	r0, #0
 8003036:	490f      	ldr	r1, [pc, #60]	; (8003074 <BMP180_GetAlt+0x78>)
 8003038:	f7fe feaa 	bl	8001d90 <__aeabi_dsub>
 800303c:	0002      	movs	r2, r0
 800303e:	000b      	movs	r3, r1
 8003040:	0010      	movs	r0, r2
 8003042:	0019      	movs	r1, r3
 8003044:	2200      	movs	r2, #0
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <BMP180_GetAlt+0x7c>)
 8003048:	f7fe fbe0 	bl	800180c <__aeabi_dmul>
 800304c:	0002      	movs	r2, r0
 800304e:	000b      	movs	r3, r1
 8003050:	0010      	movs	r0, r2
 8003052:	0019      	movs	r1, r3
 8003054:	f7ff fb10 	bl	8002678 <__aeabi_d2f>
 8003058:	1c03      	adds	r3, r0, #0
}
 800305a:	1c18      	adds	r0, r3, #0
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	200000cc 	.word	0x200000cc
 8003068:	47c5e680 	.word	0x47c5e680
 800306c:	ccd745e4 	.word	0xccd745e4
 8003070:	3fc85b95 	.word	0x3fc85b95
 8003074:	3ff00000 	.word	0x3ff00000
 8003078:	40e5a540 	.word	0x40e5a540

0800307c <BMP180_Start>:

void BMP180_Start (void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8003080:	f7ff fbaa 	bl	80027d8 <read_calliberation_data>
}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003090:	f000 fac2 	bl	8003618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003094:	f000 f820 	bl	80030d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003098:	f000 f8f4 	bl	8003284 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800309c:	f000 f8a4 	bl	80031e8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80030a0:	f000 f862 	bl	8003168 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BMP180_Start();
 80030a4:	f7ff ffea 	bl	800307c <BMP180_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Temperature = BMP180_GetTemp();
 80030a8:	f7ff fc82 	bl	80029b0 <BMP180_GetTemp>
 80030ac:	1c02      	adds	r2, r0, #0
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <main+0x40>)
 80030b0:	601a      	str	r2, [r3, #0]

	  Pressure = BMP180_GetPress (0);
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7ff fd80 	bl	8002bb8 <BMP180_GetPress>
 80030b8:	1c02      	adds	r2, r0, #0
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <main+0x44>)
 80030bc:	601a      	str	r2, [r3, #0]

	  Altitude = BMP180_GetAlt(0);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7ff ff9c 	bl	8002ffc <BMP180_GetAlt>
 80030c4:	1c02      	adds	r2, r0, #0
 80030c6:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <main+0x48>)
 80030c8:	601a      	str	r2, [r3, #0]
	  Temperature = BMP180_GetTemp();
 80030ca:	e7ed      	b.n	80030a8 <main+0x1c>
 80030cc:	200001bc 	.word	0x200001bc
 80030d0:	200001c0 	.word	0x200001c0
 80030d4:	200001c4 	.word	0x200001c4

080030d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b093      	sub	sp, #76	; 0x4c
 80030dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030de:	2410      	movs	r4, #16
 80030e0:	193b      	adds	r3, r7, r4
 80030e2:	0018      	movs	r0, r3
 80030e4:	2338      	movs	r3, #56	; 0x38
 80030e6:	001a      	movs	r2, r3
 80030e8:	2100      	movs	r1, #0
 80030ea:	f003 f959 	bl	80063a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030ee:	003b      	movs	r3, r7
 80030f0:	0018      	movs	r0, r3
 80030f2:	2310      	movs	r3, #16
 80030f4:	001a      	movs	r2, r3
 80030f6:	2100      	movs	r1, #0
 80030f8:	f003 f952 	bl	80063a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	0018      	movs	r0, r3
 8003102:	f001 fc23 	bl	800494c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003106:	193b      	adds	r3, r7, r4
 8003108:	2202      	movs	r2, #2
 800310a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800310c:	193b      	adds	r3, r7, r4
 800310e:	2280      	movs	r2, #128	; 0x80
 8003110:	0052      	lsls	r2, r2, #1
 8003112:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003114:	193b      	adds	r3, r7, r4
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800311a:	193b      	adds	r3, r7, r4
 800311c:	2240      	movs	r2, #64	; 0x40
 800311e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003120:	193b      	adds	r3, r7, r4
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003126:	193b      	adds	r3, r7, r4
 8003128:	0018      	movs	r0, r3
 800312a:	f001 fc5b 	bl	80049e4 <HAL_RCC_OscConfig>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d001      	beq.n	8003136 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003132:	f000 f93b 	bl	80033ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003136:	003b      	movs	r3, r7
 8003138:	2207      	movs	r2, #7
 800313a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800313c:	003b      	movs	r3, r7
 800313e:	2200      	movs	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003142:	003b      	movs	r3, r7
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003148:	003b      	movs	r3, r7
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800314e:	003b      	movs	r3, r7
 8003150:	2100      	movs	r1, #0
 8003152:	0018      	movs	r0, r3
 8003154:	f001 ff60 	bl	8005018 <HAL_RCC_ClockConfig>
 8003158:	1e03      	subs	r3, r0, #0
 800315a:	d001      	beq.n	8003160 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800315c:	f000 f926 	bl	80033ac <Error_Handler>
  }
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b013      	add	sp, #76	; 0x4c
 8003166:	bd90      	pop	{r4, r7, pc}

08003168 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <MX_I2C1_Init+0x74>)
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <MX_I2C1_Init+0x78>)
 8003170:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_I2C1_Init+0x74>)
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <MX_I2C1_Init+0x7c>)
 8003176:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <MX_I2C1_Init+0x74>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <MX_I2C1_Init+0x74>)
 8003180:	2201      	movs	r2, #1
 8003182:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <MX_I2C1_Init+0x74>)
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <MX_I2C1_Init+0x74>)
 800318c:	2200      	movs	r2, #0
 800318e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <MX_I2C1_Init+0x74>)
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <MX_I2C1_Init+0x74>)
 8003198:	2200      	movs	r2, #0
 800319a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <MX_I2C1_Init+0x74>)
 800319e:	2200      	movs	r2, #0
 80031a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <MX_I2C1_Init+0x74>)
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 fd2d 	bl	8003c04 <HAL_I2C_Init>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d001      	beq.n	80031b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80031ae:	f000 f8fd 	bl	80033ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <MX_I2C1_Init+0x74>)
 80031b4:	2100      	movs	r1, #0
 80031b6:	0018      	movs	r0, r3
 80031b8:	f001 fb30 	bl	800481c <HAL_I2CEx_ConfigAnalogFilter>
 80031bc:	1e03      	subs	r3, r0, #0
 80031be:	d001      	beq.n	80031c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80031c0:	f000 f8f4 	bl	80033ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <MX_I2C1_Init+0x74>)
 80031c6:	2100      	movs	r1, #0
 80031c8:	0018      	movs	r0, r3
 80031ca:	f001 fb73 	bl	80048b4 <HAL_I2CEx_ConfigDigitalFilter>
 80031ce:	1e03      	subs	r3, r0, #0
 80031d0:	d001      	beq.n	80031d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80031d2:	f000 f8eb 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	200000d4 	.word	0x200000d4
 80031e0:	40005400 	.word	0x40005400
 80031e4:	00303d5b 	.word	0x00303d5b

080031e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031ec:	4b23      	ldr	r3, [pc, #140]	; (800327c <MX_USART2_UART_Init+0x94>)
 80031ee:	4a24      	ldr	r2, [pc, #144]	; (8003280 <MX_USART2_UART_Init+0x98>)
 80031f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <MX_USART2_UART_Init+0x94>)
 80031f4:	22e1      	movs	r2, #225	; 0xe1
 80031f6:	0252      	lsls	r2, r2, #9
 80031f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <MX_USART2_UART_Init+0x94>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003200:	4b1e      	ldr	r3, [pc, #120]	; (800327c <MX_USART2_UART_Init+0x94>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <MX_USART2_UART_Init+0x94>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <MX_USART2_UART_Init+0x94>)
 800320e:	220c      	movs	r2, #12
 8003210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <MX_USART2_UART_Init+0x94>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <MX_USART2_UART_Init+0x94>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800321e:	4b17      	ldr	r3, [pc, #92]	; (800327c <MX_USART2_UART_Init+0x94>)
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <MX_USART2_UART_Init+0x94>)
 8003226:	2200      	movs	r2, #0
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <MX_USART2_UART_Init+0x94>)
 800322c:	2200      	movs	r2, #0
 800322e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <MX_USART2_UART_Init+0x94>)
 8003232:	0018      	movs	r0, r3
 8003234:	f002 fa52 	bl	80056dc <HAL_UART_Init>
 8003238:	1e03      	subs	r3, r0, #0
 800323a:	d001      	beq.n	8003240 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800323c:	f000 f8b6 	bl	80033ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <MX_USART2_UART_Init+0x94>)
 8003242:	2100      	movs	r1, #0
 8003244:	0018      	movs	r0, r3
 8003246:	f002 ffcb 	bl	80061e0 <HAL_UARTEx_SetTxFifoThreshold>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d001      	beq.n	8003252 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800324e:	f000 f8ad 	bl	80033ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <MX_USART2_UART_Init+0x94>)
 8003254:	2100      	movs	r1, #0
 8003256:	0018      	movs	r0, r3
 8003258:	f003 f802 	bl	8006260 <HAL_UARTEx_SetRxFifoThreshold>
 800325c:	1e03      	subs	r3, r0, #0
 800325e:	d001      	beq.n	8003264 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003260:	f000 f8a4 	bl	80033ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <MX_USART2_UART_Init+0x94>)
 8003266:	0018      	movs	r0, r3
 8003268:	f002 ff80 	bl	800616c <HAL_UARTEx_DisableFifoMode>
 800326c:	1e03      	subs	r3, r0, #0
 800326e:	d001      	beq.n	8003274 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003270:	f000 f89c 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	20000128 	.word	0x20000128
 8003280:	40004400 	.word	0x40004400

08003284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b08b      	sub	sp, #44	; 0x2c
 8003288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328a:	2414      	movs	r4, #20
 800328c:	193b      	adds	r3, r7, r4
 800328e:	0018      	movs	r0, r3
 8003290:	2314      	movs	r3, #20
 8003292:	001a      	movs	r2, r3
 8003294:	2100      	movs	r1, #0
 8003296:	f003 f883 	bl	80063a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <MX_GPIO_Init+0x11c>)
 800329c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032a0:	2104      	movs	r1, #4
 80032a2:	430a      	orrs	r2, r1
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
 80032a6:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	2204      	movs	r2, #4
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032b2:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b6:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032b8:	2120      	movs	r1, #32
 80032ba:	430a      	orrs	r2, r1
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34
 80032be:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	2220      	movs	r2, #32
 80032c4:	4013      	ands	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ce:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032d0:	2101      	movs	r1, #1
 80032d2:	430a      	orrs	r2, r1
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
 80032d6:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	2201      	movs	r2, #1
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e2:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032e8:	2102      	movs	r1, #2
 80032ea:	430a      	orrs	r2, r1
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
 80032ee:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <MX_GPIO_Init+0x11c>)
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	2202      	movs	r2, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80032fa:	23a0      	movs	r3, #160	; 0xa0
 80032fc:	05db      	lsls	r3, r3, #23
 80032fe:	2200      	movs	r2, #0
 8003300:	2120      	movs	r1, #32
 8003302:	0018      	movs	r0, r3
 8003304:	f000 fc60 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_SET);
 8003308:	4926      	ldr	r1, [pc, #152]	; (80033a4 <MX_GPIO_Init+0x120>)
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <MX_GPIO_Init+0x124>)
 800330c:	2201      	movs	r2, #1
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fc5a 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	0059      	lsls	r1, r3, #1
 8003318:	23a0      	movs	r3, #160	; 0xa0
 800331a:	05db      	lsls	r3, r3, #23
 800331c:	2201      	movs	r2, #1
 800331e:	0018      	movs	r0, r3
 8003320:	f000 fc52 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	2220      	movs	r2, #32
 8003328:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2201      	movs	r2, #1
 800332e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	193b      	adds	r3, r7, r4
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003336:	193b      	adds	r3, r7, r4
 8003338:	2202      	movs	r2, #2
 800333a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800333c:	193a      	adds	r2, r7, r4
 800333e:	23a0      	movs	r3, #160	; 0xa0
 8003340:	05db      	lsls	r3, r3, #23
 8003342:	0011      	movs	r1, r2
 8003344:	0018      	movs	r0, r3
 8003346:	f000 fadb 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN1_Pin MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 800334a:	193b      	adds	r3, r7, r4
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <MX_GPIO_Init+0x120>)
 800334e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003350:	193b      	adds	r3, r7, r4
 8003352:	2201      	movs	r2, #1
 8003354:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	193b      	adds	r3, r7, r4
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	193b      	adds	r3, r7, r4
 800335e:	2200      	movs	r2, #0
 8003360:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	193b      	adds	r3, r7, r4
 8003364:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <MX_GPIO_Init+0x124>)
 8003366:	0019      	movs	r1, r3
 8003368:	0010      	movs	r0, r2
 800336a:	f000 fac9 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENA_Pin */
  GPIO_InitStruct.Pin = ENA_Pin;
 800336e:	0021      	movs	r1, r4
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	0052      	lsls	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003378:	187b      	adds	r3, r7, r1
 800337a:	2201      	movs	r2, #1
 800337c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	187b      	adds	r3, r7, r1
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	187b      	adds	r3, r7, r1
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 800338a:	187a      	adds	r2, r7, r1
 800338c:	23a0      	movs	r3, #160	; 0xa0
 800338e:	05db      	lsls	r3, r3, #23
 8003390:	0011      	movs	r1, r2
 8003392:	0018      	movs	r0, r3
 8003394:	f000 fab4 	bl	8003900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b00b      	add	sp, #44	; 0x2c
 800339e:	bd90      	pop	{r4, r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	00004010 	.word	0x00004010
 80033a8:	50000400 	.word	0x50000400

080033ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033b0:	b672      	cpsid	i
}
 80033b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <Error_Handler+0x8>
	...

080033b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_MspInit+0x4c>)
 80033c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_MspInit+0x4c>)
 80033c4:	2101      	movs	r1, #1
 80033c6:	430a      	orrs	r2, r1
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_MspInit+0x4c>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2201      	movs	r2, #1
 80033d0:	4013      	ands	r3, r2
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_MspInit+0x4c>)
 80033d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_MspInit+0x4c>)
 80033dc:	2180      	movs	r1, #128	; 0x80
 80033de:	0549      	lsls	r1, r1, #21
 80033e0:	430a      	orrs	r2, r1
 80033e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_MspInit+0x4c>)
 80033e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	055b      	lsls	r3, r3, #21
 80033ec:	4013      	ands	r3, r2
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80033f2:	23c0      	movs	r3, #192	; 0xc0
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 f9b8 	bl	800376c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b097      	sub	sp, #92	; 0x5c
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	2344      	movs	r3, #68	; 0x44
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	0018      	movs	r0, r3
 8003416:	2314      	movs	r3, #20
 8003418:	001a      	movs	r2, r3
 800341a:	2100      	movs	r1, #0
 800341c:	f002 ffc0 	bl	80063a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003420:	2410      	movs	r4, #16
 8003422:	193b      	adds	r3, r7, r4
 8003424:	0018      	movs	r0, r3
 8003426:	2334      	movs	r3, #52	; 0x34
 8003428:	001a      	movs	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	f002 ffb8 	bl	80063a0 <memset>
  if(hi2c->Instance==I2C1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <HAL_I2C_MspInit+0xb8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d13e      	bne.n	80034b8 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800343a:	193b      	adds	r3, r7, r4
 800343c:	2220      	movs	r2, #32
 800343e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003440:	193b      	adds	r3, r7, r4
 8003442:	2200      	movs	r2, #0
 8003444:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003446:	193b      	adds	r3, r7, r4
 8003448:	0018      	movs	r0, r3
 800344a:	f001 ff8f 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003452:	f7ff ffab 	bl	80033ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_I2C_MspInit+0xbc>)
 8003458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345a:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_I2C_MspInit+0xbc>)
 800345c:	2102      	movs	r1, #2
 800345e:	430a      	orrs	r2, r1
 8003460:	635a      	str	r2, [r3, #52]	; 0x34
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_I2C_MspInit+0xbc>)
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	2202      	movs	r2, #2
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800346e:	2144      	movs	r1, #68	; 0x44
 8003470:	187b      	adds	r3, r7, r1
 8003472:	22c0      	movs	r2, #192	; 0xc0
 8003474:	0092      	lsls	r2, r2, #2
 8003476:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003478:	187b      	adds	r3, r7, r1
 800347a:	2212      	movs	r2, #18
 800347c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2200      	movs	r2, #0
 8003488:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800348a:	187b      	adds	r3, r7, r1
 800348c:	2206      	movs	r2, #6
 800348e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003490:	187b      	adds	r3, r7, r1
 8003492:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <HAL_I2C_MspInit+0xc0>)
 8003494:	0019      	movs	r1, r3
 8003496:	0010      	movs	r0, r2
 8003498:	f000 fa32 	bl	8003900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_I2C_MspInit+0xbc>)
 800349e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a0:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <HAL_I2C_MspInit+0xbc>)
 80034a2:	2180      	movs	r1, #128	; 0x80
 80034a4:	0389      	lsls	r1, r1, #14
 80034a6:	430a      	orrs	r2, r1
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_I2C_MspInit+0xbc>)
 80034ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	039b      	lsls	r3, r3, #14
 80034b2:	4013      	ands	r3, r2
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b017      	add	sp, #92	; 0x5c
 80034be:	bd90      	pop	{r4, r7, pc}
 80034c0:	40005400 	.word	0x40005400
 80034c4:	40021000 	.word	0x40021000
 80034c8:	50000400 	.word	0x50000400

080034cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b097      	sub	sp, #92	; 0x5c
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d4:	2344      	movs	r3, #68	; 0x44
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	0018      	movs	r0, r3
 80034da:	2314      	movs	r3, #20
 80034dc:	001a      	movs	r2, r3
 80034de:	2100      	movs	r1, #0
 80034e0:	f002 ff5e 	bl	80063a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034e4:	2410      	movs	r4, #16
 80034e6:	193b      	adds	r3, r7, r4
 80034e8:	0018      	movs	r0, r3
 80034ea:	2334      	movs	r3, #52	; 0x34
 80034ec:	001a      	movs	r2, r3
 80034ee:	2100      	movs	r1, #0
 80034f0:	f002 ff56 	bl	80063a0 <memset>
  if(huart->Instance==USART2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_UART_MspInit+0xb8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d13e      	bne.n	800357c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034fe:	193b      	adds	r3, r7, r4
 8003500:	2202      	movs	r2, #2
 8003502:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003504:	193b      	adds	r3, r7, r4
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800350a:	193b      	adds	r3, r7, r4
 800350c:	0018      	movs	r0, r3
 800350e:	f001 ff2d 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003516:	f7ff ff49 	bl	80033ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_UART_MspInit+0xbc>)
 800351c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_UART_MspInit+0xbc>)
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0289      	lsls	r1, r1, #10
 8003524:	430a      	orrs	r2, r1
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
 8003528:	4b17      	ldr	r3, [pc, #92]	; (8003588 <HAL_UART_MspInit+0xbc>)
 800352a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	029b      	lsls	r3, r3, #10
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_UART_MspInit+0xbc>)
 8003538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_UART_MspInit+0xbc>)
 800353c:	2101      	movs	r1, #1
 800353e:	430a      	orrs	r2, r1
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_UART_MspInit+0xbc>)
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	2201      	movs	r2, #1
 8003548:	4013      	ands	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800354e:	2144      	movs	r1, #68	; 0x44
 8003550:	187b      	adds	r3, r7, r1
 8003552:	220c      	movs	r2, #12
 8003554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	187b      	adds	r3, r7, r1
 8003558:	2202      	movs	r2, #2
 800355a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355c:	187b      	adds	r3, r7, r1
 800355e:	2201      	movs	r2, #1
 8003560:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	187b      	adds	r3, r7, r1
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	2201      	movs	r2, #1
 800356c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356e:	187a      	adds	r2, r7, r1
 8003570:	23a0      	movs	r3, #160	; 0xa0
 8003572:	05db      	lsls	r3, r3, #23
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f000 f9c2 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b017      	add	sp, #92	; 0x5c
 8003582:	bd90      	pop	{r4, r7, pc}
 8003584:	40004400 	.word	0x40004400
 8003588:	40021000 	.word	0x40021000

0800358c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003590:	e7fe      	b.n	8003590 <NMI_Handler+0x4>

08003592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003596:	e7fe      	b.n	8003596 <HardFault_Handler+0x4>

08003598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b0:	f000 f89c 	bl	80036ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035c4:	480d      	ldr	r0, [pc, #52]	; (80035fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035c8:	f7ff fff7 	bl	80035ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035cc:	480c      	ldr	r0, [pc, #48]	; (8003600 <LoopForever+0x6>)
  ldr r1, =_edata
 80035ce:	490d      	ldr	r1, [pc, #52]	; (8003604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035d0:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <LoopForever+0xe>)
  movs r3, #0
 80035d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d4:	e002      	b.n	80035dc <LoopCopyDataInit>

080035d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035da:	3304      	adds	r3, #4

080035dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e0:	d3f9      	bcc.n	80035d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <LoopForever+0x12>)
  ldr r4, =_ebss
 80035e4:	4c0a      	ldr	r4, [pc, #40]	; (8003610 <LoopForever+0x16>)
  movs r3, #0
 80035e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e8:	e001      	b.n	80035ee <LoopFillZerobss>

080035ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035ec:	3204      	adds	r2, #4

080035ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f0:	d3fb      	bcc.n	80035ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035f2:	f002 fee3 	bl	80063bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035f6:	f7ff fd49 	bl	800308c <main>

080035fa <LoopForever>:

LoopForever:
  b LoopForever
 80035fa:	e7fe      	b.n	80035fa <LoopForever>
  ldr   r0, =_estack
 80035fc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003604:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003608:	080073c8 	.word	0x080073c8
  ldr r2, =_sbss
 800360c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003610:	20000304 	.word	0x20000304

08003614 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003614:	e7fe      	b.n	8003614 <ADC1_COMP_IRQHandler>
	...

08003618 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800361e:	1dfb      	adds	r3, r7, #7
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_Init+0x3c>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_Init+0x3c>)
 800362a:	2180      	movs	r1, #128	; 0x80
 800362c:	0049      	lsls	r1, r1, #1
 800362e:	430a      	orrs	r2, r1
 8003630:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003632:	2000      	movs	r0, #0
 8003634:	f000 f810 	bl	8003658 <HAL_InitTick>
 8003638:	1e03      	subs	r3, r0, #0
 800363a:	d003      	beq.n	8003644 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800363c:	1dfb      	adds	r3, r7, #7
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e001      	b.n	8003648 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003644:	f7ff feb8 	bl	80033b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	781b      	ldrb	r3, [r3, #0]
}
 800364c:	0018      	movs	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	b002      	add	sp, #8
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40022000 	.word	0x40022000

08003658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003660:	230f      	movs	r3, #15
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_InitTick+0x88>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02b      	beq.n	80036c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003670:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <HAL_InitTick+0x8c>)
 8003672:	681c      	ldr	r4, [r3, #0]
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_InitTick+0x88>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	0019      	movs	r1, r3
 800367a:	23fa      	movs	r3, #250	; 0xfa
 800367c:	0098      	lsls	r0, r3, #2
 800367e:	f7fc fd41 	bl	8000104 <__udivsi3>
 8003682:	0003      	movs	r3, r0
 8003684:	0019      	movs	r1, r3
 8003686:	0020      	movs	r0, r4
 8003688:	f7fc fd3c 	bl	8000104 <__udivsi3>
 800368c:	0003      	movs	r3, r0
 800368e:	0018      	movs	r0, r3
 8003690:	f000 f929 	bl	80038e6 <HAL_SYSTICK_Config>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d112      	bne.n	80036be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d80a      	bhi.n	80036b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	2301      	movs	r3, #1
 80036a2:	425b      	negs	r3, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 f908 	bl	80038bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_InitTick+0x90>)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e00d      	b.n	80036d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80036b4:	230f      	movs	r3, #15
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e008      	b.n	80036d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036be:	230f      	movs	r3, #15
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e003      	b.n	80036d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036c8:	230f      	movs	r3, #15
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80036d0:	230f      	movs	r3, #15
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	781b      	ldrb	r3, [r3, #0]
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b005      	add	sp, #20
 80036dc:	bd90      	pop	{r4, r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	20000008 	.word	0x20000008
 80036e4:	20000000 	.word	0x20000000
 80036e8:	20000004 	.word	0x20000004

080036ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_IncTick+0x1c>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	001a      	movs	r2, r3
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_IncTick+0x20>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	18d2      	adds	r2, r2, r3
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_IncTick+0x20>)
 80036fe:	601a      	str	r2, [r3, #0]
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	20000008 	.word	0x20000008
 800370c:	200001c8 	.word	0x200001c8

08003710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  return uwTick;
 8003714:	4b02      	ldr	r3, [pc, #8]	; (8003720 <HAL_GetTick+0x10>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	200001c8 	.word	0x200001c8

08003724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800372c:	f7ff fff0 	bl	8003710 <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	d005      	beq.n	800374a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_Delay+0x44>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	001a      	movs	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	189b      	adds	r3, r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	f7ff ffe0 	bl	8003710 <HAL_GetTick>
 8003750:	0002      	movs	r2, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	429a      	cmp	r2, r3
 800375a:	d8f7      	bhi.n	800374c <HAL_Delay+0x28>
  {
  }
}
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b004      	add	sp, #16
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	20000008 	.word	0x20000008

0800376c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a06      	ldr	r2, [pc, #24]	; (8003794 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800377a:	4013      	ands	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	4b04      	ldr	r3, [pc, #16]	; (8003790 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b002      	add	sp, #8
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	40010000 	.word	0x40010000
 8003794:	fffff9ff 	.word	0xfffff9ff

08003798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003798:	b590      	push	{r4, r7, lr}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	0002      	movs	r2, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b7f      	cmp	r3, #127	; 0x7f
 80037ac:	d828      	bhi.n	8003800 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037ae:	4a2f      	ldr	r2, [pc, #188]	; (800386c <__NVIC_SetPriority+0xd4>)
 80037b0:	1dfb      	adds	r3, r7, #7
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	33c0      	adds	r3, #192	; 0xc0
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	589b      	ldr	r3, [r3, r2]
 80037be:	1dfa      	adds	r2, r7, #7
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	0011      	movs	r1, r2
 80037c4:	2203      	movs	r2, #3
 80037c6:	400a      	ands	r2, r1
 80037c8:	00d2      	lsls	r2, r2, #3
 80037ca:	21ff      	movs	r1, #255	; 0xff
 80037cc:	4091      	lsls	r1, r2
 80037ce:	000a      	movs	r2, r1
 80037d0:	43d2      	mvns	r2, r2
 80037d2:	401a      	ands	r2, r3
 80037d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	019b      	lsls	r3, r3, #6
 80037da:	22ff      	movs	r2, #255	; 0xff
 80037dc:	401a      	ands	r2, r3
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	0018      	movs	r0, r3
 80037e4:	2303      	movs	r3, #3
 80037e6:	4003      	ands	r3, r0
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037ec:	481f      	ldr	r0, [pc, #124]	; (800386c <__NVIC_SetPriority+0xd4>)
 80037ee:	1dfb      	adds	r3, r7, #7
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	089b      	lsrs	r3, r3, #2
 80037f6:	430a      	orrs	r2, r1
 80037f8:	33c0      	adds	r3, #192	; 0xc0
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037fe:	e031      	b.n	8003864 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003800:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <__NVIC_SetPriority+0xd8>)
 8003802:	1dfb      	adds	r3, r7, #7
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	0019      	movs	r1, r3
 8003808:	230f      	movs	r3, #15
 800380a:	400b      	ands	r3, r1
 800380c:	3b08      	subs	r3, #8
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3306      	adds	r3, #6
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	18d3      	adds	r3, r2, r3
 8003816:	3304      	adds	r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	1dfa      	adds	r2, r7, #7
 800381c:	7812      	ldrb	r2, [r2, #0]
 800381e:	0011      	movs	r1, r2
 8003820:	2203      	movs	r2, #3
 8003822:	400a      	ands	r2, r1
 8003824:	00d2      	lsls	r2, r2, #3
 8003826:	21ff      	movs	r1, #255	; 0xff
 8003828:	4091      	lsls	r1, r2
 800382a:	000a      	movs	r2, r1
 800382c:	43d2      	mvns	r2, r2
 800382e:	401a      	ands	r2, r3
 8003830:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	401a      	ands	r2, r3
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	0018      	movs	r0, r3
 8003840:	2303      	movs	r3, #3
 8003842:	4003      	ands	r3, r0
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003848:	4809      	ldr	r0, [pc, #36]	; (8003870 <__NVIC_SetPriority+0xd8>)
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	001c      	movs	r4, r3
 8003850:	230f      	movs	r3, #15
 8003852:	4023      	ands	r3, r4
 8003854:	3b08      	subs	r3, #8
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	430a      	orrs	r2, r1
 800385a:	3306      	adds	r3, #6
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	18c3      	adds	r3, r0, r3
 8003860:	3304      	adds	r3, #4
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b003      	add	sp, #12
 800386a:	bd90      	pop	{r4, r7, pc}
 800386c:	e000e100 	.word	0xe000e100
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1e5a      	subs	r2, r3, #1
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	045b      	lsls	r3, r3, #17
 8003884:	429a      	cmp	r2, r3
 8003886:	d301      	bcc.n	800388c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003888:	2301      	movs	r3, #1
 800388a:	e010      	b.n	80038ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <SysTick_Config+0x44>)
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	3a01      	subs	r2, #1
 8003892:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003894:	2301      	movs	r3, #1
 8003896:	425b      	negs	r3, r3
 8003898:	2103      	movs	r1, #3
 800389a:	0018      	movs	r0, r3
 800389c:	f7ff ff7c 	bl	8003798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SysTick_Config+0x44>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <SysTick_Config+0x44>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b002      	add	sp, #8
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	e000e010 	.word	0xe000e010

080038bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	210f      	movs	r1, #15
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	1c02      	adds	r2, r0, #0
 80038cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	0011      	movs	r1, r2
 80038d8:	0018      	movs	r0, r3
 80038da:	f7ff ff5d 	bl	8003798 <__NVIC_SetPriority>
}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff ffbf 	bl	8003874 <SysTick_Config>
 80038f6:	0003      	movs	r3, r0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390e:	e147      	b.n	8003ba0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4091      	lsls	r1, r2
 800391a:	000a      	movs	r2, r1
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d100      	bne.n	8003928 <HAL_GPIO_Init+0x28>
 8003926:	e138      	b.n	8003b9a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2203      	movs	r2, #3
 800392e:	4013      	ands	r3, r2
 8003930:	2b01      	cmp	r3, #1
 8003932:	d005      	beq.n	8003940 <HAL_GPIO_Init+0x40>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2203      	movs	r2, #3
 800393a:	4013      	ands	r3, r2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d130      	bne.n	80039a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	409a      	lsls	r2, r3
 800394e:	0013      	movs	r3, r2
 8003950:	43da      	mvns	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	409a      	lsls	r2, r3
 8003962:	0013      	movs	r3, r2
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003976:	2201      	movs	r2, #1
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	409a      	lsls	r2, r3
 800397c:	0013      	movs	r3, r2
 800397e:	43da      	mvns	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	2201      	movs	r2, #1
 800398e:	401a      	ands	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	409a      	lsls	r2, r3
 8003994:	0013      	movs	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d017      	beq.n	80039de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	409a      	lsls	r2, r3
 80039bc:	0013      	movs	r3, r2
 80039be:	43da      	mvns	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	409a      	lsls	r2, r3
 80039d0:	0013      	movs	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2203      	movs	r2, #3
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d123      	bne.n	8003a32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	08da      	lsrs	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3208      	adds	r2, #8
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	58d3      	ldr	r3, [r2, r3]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2207      	movs	r2, #7
 80039fc:	4013      	ands	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	220f      	movs	r2, #15
 8003a02:	409a      	lsls	r2, r3
 8003a04:	0013      	movs	r3, r2
 8003a06:	43da      	mvns	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2107      	movs	r1, #7
 8003a16:	400b      	ands	r3, r1
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	0013      	movs	r3, r2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	08da      	lsrs	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3208      	adds	r2, #8
 8003a2c:	0092      	lsls	r2, r2, #2
 8003a2e:	6939      	ldr	r1, [r7, #16]
 8003a30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	0013      	movs	r3, r2
 8003a42:	43da      	mvns	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2203      	movs	r2, #3
 8003a50:	401a      	ands	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	0013      	movs	r3, r2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	23c0      	movs	r3, #192	; 0xc0
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d100      	bne.n	8003a74 <HAL_GPIO_Init+0x174>
 8003a72:	e092      	b.n	8003b9a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a74:	4a50      	ldr	r2, [pc, #320]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	3318      	adds	r3, #24
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	589b      	ldr	r3, [r3, r2]
 8003a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2203      	movs	r2, #3
 8003a86:	4013      	ands	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	220f      	movs	r2, #15
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	0013      	movs	r3, r2
 8003a90:	43da      	mvns	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	23a0      	movs	r3, #160	; 0xa0
 8003a9c:	05db      	lsls	r3, r3, #23
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d013      	beq.n	8003aca <HAL_GPIO_Init+0x1ca>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a45      	ldr	r2, [pc, #276]	; (8003bbc <HAL_GPIO_Init+0x2bc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_GPIO_Init+0x1c6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a44      	ldr	r2, [pc, #272]	; (8003bc0 <HAL_GPIO_Init+0x2c0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <HAL_GPIO_Init+0x1c2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d101      	bne.n	8003abe <HAL_GPIO_Init+0x1be>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e006      	b.n	8003acc <HAL_GPIO_Init+0x1cc>
 8003abe:	2305      	movs	r3, #5
 8003ac0:	e004      	b.n	8003acc <HAL_GPIO_Init+0x1cc>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e002      	b.n	8003acc <HAL_GPIO_Init+0x1cc>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_GPIO_Init+0x1cc>
 8003aca:	2300      	movs	r3, #0
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	2103      	movs	r1, #3
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	00d2      	lsls	r2, r2, #3
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003adc:	4936      	ldr	r1, [pc, #216]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3318      	adds	r3, #24
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aea:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43da      	mvns	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	035b      	lsls	r3, r3, #13
 8003b02:	4013      	ands	r3, r2
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b0e:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b14:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	43da      	mvns	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	039b      	lsls	r3, r3, #14
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b38:	4b1f      	ldr	r3, [pc, #124]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b3e:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003b40:	2384      	movs	r3, #132	; 0x84
 8003b42:	58d3      	ldr	r3, [r2, r3]
 8003b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	43da      	mvns	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	029b      	lsls	r3, r3, #10
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b64:	4914      	ldr	r1, [pc, #80]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003b66:	2284      	movs	r2, #132	; 0x84
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b6c:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	58d3      	ldr	r3, [r2, r3]
 8003b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	43da      	mvns	r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	025b      	lsls	r3, r3, #9
 8003b86:	4013      	ands	r3, r2
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b92:	4909      	ldr	r1, [pc, #36]	; (8003bb8 <HAL_GPIO_Init+0x2b8>)
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	40da      	lsrs	r2, r3
 8003ba8:	1e13      	subs	r3, r2, #0
 8003baa:	d000      	beq.n	8003bae <HAL_GPIO_Init+0x2ae>
 8003bac:	e6b0      	b.n	8003910 <HAL_GPIO_Init+0x10>
  }
}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b006      	add	sp, #24
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021800 	.word	0x40021800
 8003bbc:	50000400 	.word	0x50000400
 8003bc0:	50000800 	.word	0x50000800
 8003bc4:	50000c00 	.word	0x50000c00

08003bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	0008      	movs	r0, r1
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	1cbb      	adds	r3, r7, #2
 8003bd6:	1c02      	adds	r2, r0, #0
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	1c7b      	adds	r3, r7, #1
 8003bdc:	1c0a      	adds	r2, r1, #0
 8003bde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003be0:	1c7b      	adds	r3, r7, #1
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003be8:	1cbb      	adds	r3, r7, #2
 8003bea:	881a      	ldrh	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bf0:	e003      	b.n	8003bfa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bf2:	1cbb      	adds	r3, r7, #2
 8003bf4:	881a      	ldrh	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e08f      	b.n	8003d36 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2241      	movs	r2, #65	; 0x41
 8003c1a:	5c9b      	ldrb	r3, [r3, r2]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d107      	bne.n	8003c32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff fbeb 	bl	8003408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2241      	movs	r2, #65	; 0x41
 8003c36:	2124      	movs	r1, #36	; 0x24
 8003c38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	438a      	bics	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	493b      	ldr	r1, [pc, #236]	; (8003d40 <HAL_I2C_Init+0x13c>)
 8003c54:	400a      	ands	r2, r1
 8003c56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4938      	ldr	r1, [pc, #224]	; (8003d44 <HAL_I2C_Init+0x140>)
 8003c64:	400a      	ands	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d108      	bne.n	8003c82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	0209      	lsls	r1, r1, #8
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	e007      	b.n	8003c92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2184      	movs	r1, #132	; 0x84
 8003c8c:	0209      	lsls	r1, r1, #8
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d109      	bne.n	8003cae <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	0109      	lsls	r1, r1, #4
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	e007      	b.n	8003cbe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4923      	ldr	r1, [pc, #140]	; (8003d48 <HAL_I2C_Init+0x144>)
 8003cba:	400a      	ands	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4920      	ldr	r1, [pc, #128]	; (8003d4c <HAL_I2C_Init+0x148>)
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	491a      	ldr	r1, [pc, #104]	; (8003d44 <HAL_I2C_Init+0x140>)
 8003cda:	400a      	ands	r2, r1
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69d9      	ldr	r1, [r3, #28]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2101      	movs	r1, #1
 8003d14:	430a      	orrs	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2241      	movs	r2, #65	; 0x41
 8003d22:	2120      	movs	r1, #32
 8003d24:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2242      	movs	r2, #66	; 0x42
 8003d30:	2100      	movs	r1, #0
 8003d32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b002      	add	sp, #8
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	f0ffffff 	.word	0xf0ffffff
 8003d44:	ffff7fff 	.word	0xffff7fff
 8003d48:	fffff7ff 	.word	0xfffff7ff
 8003d4c:	02008000 	.word	0x02008000

08003d50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b089      	sub	sp, #36	; 0x24
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	000c      	movs	r4, r1
 8003d5a:	0010      	movs	r0, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	230a      	movs	r3, #10
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	1c22      	adds	r2, r4, #0
 8003d64:	801a      	strh	r2, [r3, #0]
 8003d66:	2308      	movs	r3, #8
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	1c02      	adds	r2, r0, #0
 8003d6c:	801a      	strh	r2, [r3, #0]
 8003d6e:	1dbb      	adds	r3, r7, #6
 8003d70:	1c0a      	adds	r2, r1, #0
 8003d72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2241      	movs	r2, #65	; 0x41
 8003d78:	5c9b      	ldrb	r3, [r3, r2]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d000      	beq.n	8003d82 <HAL_I2C_Mem_Write+0x32>
 8003d80:	e10c      	b.n	8003f9c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <HAL_I2C_Mem_Write+0x42>
 8003d88:	232c      	movs	r3, #44	; 0x2c
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2280      	movs	r2, #128	; 0x80
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0ff      	b.n	8003f9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	5c9b      	ldrb	r3, [r3, r2]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_I2C_Mem_Write+0x5c>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e0f8      	b.n	8003f9e <HAL_I2C_Mem_Write+0x24e>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	2101      	movs	r1, #1
 8003db2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003db4:	f7ff fcac 	bl	8003710 <HAL_GetTick>
 8003db8:	0003      	movs	r3, r0
 8003dba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	0219      	lsls	r1, r3, #8
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2319      	movs	r3, #25
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f000 fb0b 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8003dce:	1e03      	subs	r3, r0, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e0e3      	b.n	8003f9e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2241      	movs	r2, #65	; 0x41
 8003dda:	2121      	movs	r1, #33	; 0x21
 8003ddc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2242      	movs	r2, #66	; 0x42
 8003de2:	2140      	movs	r1, #64	; 0x40
 8003de4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	222c      	movs	r2, #44	; 0x2c
 8003df6:	18ba      	adds	r2, r7, r2
 8003df8:	8812      	ldrh	r2, [r2, #0]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e02:	1dbb      	adds	r3, r7, #6
 8003e04:	881c      	ldrh	r4, [r3, #0]
 8003e06:	2308      	movs	r3, #8
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	8819      	ldrh	r1, [r3, #0]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	0023      	movs	r3, r4
 8003e1e:	f000 f9f9 	bl	8004214 <I2C_RequestMemoryWrite>
 8003e22:	1e03      	subs	r3, r0, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2240      	movs	r2, #64	; 0x40
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0b5      	b.n	8003f9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2bff      	cmp	r3, #255	; 0xff
 8003e3a:	d911      	bls.n	8003e60 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	22ff      	movs	r2, #255	; 0xff
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	045c      	lsls	r4, r3, #17
 8003e4c:	230a      	movs	r3, #10
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	8819      	ldrh	r1, [r3, #0]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	0023      	movs	r3, r4
 8003e5a:	f000 fca5 	bl	80047a8 <I2C_TransferConfig>
 8003e5e:	e012      	b.n	8003e86 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	049c      	lsls	r4, r3, #18
 8003e74:	230a      	movs	r3, #10
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	8819      	ldrh	r1, [r3, #0]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	0023      	movs	r3, r4
 8003e82:	f000 fc91 	bl	80047a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 fb01 	bl	8004494 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e081      	b.n	8003f9e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d03a      	beq.n	8003f4a <HAL_I2C_Mem_Write+0x1fa>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d136      	bne.n	8003f4a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	0013      	movs	r3, r2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	f000 fa7b 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	1e03      	subs	r3, r0, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e053      	b.n	8003f9e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2bff      	cmp	r3, #255	; 0xff
 8003efe:	d911      	bls.n	8003f24 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	22ff      	movs	r2, #255	; 0xff
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	045c      	lsls	r4, r3, #17
 8003f10:	230a      	movs	r3, #10
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	8819      	ldrh	r1, [r3, #0]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	0023      	movs	r3, r4
 8003f1e:	f000 fc43 	bl	80047a8 <I2C_TransferConfig>
 8003f22:	e012      	b.n	8003f4a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	049c      	lsls	r4, r3, #18
 8003f38:	230a      	movs	r3, #10
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	8819      	ldrh	r1, [r3, #0]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	0023      	movs	r3, r4
 8003f46:	f000 fc2f 	bl	80047a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d198      	bne.n	8003e86 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f000 fae0 	bl	8004520 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f60:	1e03      	subs	r3, r0, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e01a      	b.n	8003f9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	490b      	ldr	r1, [pc, #44]	; (8003fa8 <HAL_I2C_Mem_Write+0x258>)
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2241      	movs	r2, #65	; 0x41
 8003f84:	2120      	movs	r1, #32
 8003f86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2242      	movs	r2, #66	; 0x42
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2240      	movs	r2, #64	; 0x40
 8003f94:	2100      	movs	r1, #0
 8003f96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
  }
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b007      	add	sp, #28
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	fe00e800 	.word	0xfe00e800

08003fac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	000c      	movs	r4, r1
 8003fb6:	0010      	movs	r0, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	230a      	movs	r3, #10
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	1c22      	adds	r2, r4, #0
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	1c02      	adds	r2, r0, #0
 8003fc8:	801a      	strh	r2, [r3, #0]
 8003fca:	1dbb      	adds	r3, r7, #6
 8003fcc:	1c0a      	adds	r2, r1, #0
 8003fce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2241      	movs	r2, #65	; 0x41
 8003fd4:	5c9b      	ldrb	r3, [r3, r2]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d000      	beq.n	8003fde <HAL_I2C_Mem_Read+0x32>
 8003fdc:	e110      	b.n	8004200 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_I2C_Mem_Read+0x42>
 8003fe4:	232c      	movs	r3, #44	; 0x2c
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	0092      	lsls	r2, r2, #2
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e103      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2240      	movs	r2, #64	; 0x40
 8003ffe:	5c9b      	ldrb	r3, [r3, r2]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2C_Mem_Read+0x5c>
 8004004:	2302      	movs	r3, #2
 8004006:	e0fc      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2240      	movs	r2, #64	; 0x40
 800400c:	2101      	movs	r1, #1
 800400e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004010:	f7ff fb7e 	bl	8003710 <HAL_GetTick>
 8004014:	0003      	movs	r3, r0
 8004016:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	0219      	lsls	r1, r3, #8
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2319      	movs	r3, #25
 8004024:	2201      	movs	r2, #1
 8004026:	f000 f9dd 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 800402a:	1e03      	subs	r3, r0, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e0e7      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2241      	movs	r2, #65	; 0x41
 8004036:	2122      	movs	r1, #34	; 0x22
 8004038:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2242      	movs	r2, #66	; 0x42
 800403e:	2140      	movs	r1, #64	; 0x40
 8004040:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	222c      	movs	r2, #44	; 0x2c
 8004052:	18ba      	adds	r2, r7, r2
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800405e:	1dbb      	adds	r3, r7, #6
 8004060:	881c      	ldrh	r4, [r3, #0]
 8004062:	2308      	movs	r3, #8
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	881a      	ldrh	r2, [r3, #0]
 8004068:	230a      	movs	r3, #10
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	8819      	ldrh	r1, [r3, #0]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	0023      	movs	r3, r4
 800407a:	f000 f92f 	bl	80042dc <I2C_RequestMemoryRead>
 800407e:	1e03      	subs	r3, r0, #0
 8004080:	d005      	beq.n	800408e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2240      	movs	r2, #64	; 0x40
 8004086:	2100      	movs	r1, #0
 8004088:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0b9      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	2bff      	cmp	r3, #255	; 0xff
 8004096:	d911      	bls.n	80040bc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	22ff      	movs	r2, #255	; 0xff
 800409c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	045c      	lsls	r4, r3, #17
 80040a8:	230a      	movs	r3, #10
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	8819      	ldrh	r1, [r3, #0]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	4b56      	ldr	r3, [pc, #344]	; (800420c <HAL_I2C_Mem_Read+0x260>)
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	0023      	movs	r3, r4
 80040b6:	f000 fb77 	bl	80047a8 <I2C_TransferConfig>
 80040ba:	e012      	b.n	80040e2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	049c      	lsls	r4, r3, #18
 80040d0:	230a      	movs	r3, #10
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	8819      	ldrh	r1, [r3, #0]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	4b4c      	ldr	r3, [pc, #304]	; (800420c <HAL_I2C_Mem_Read+0x260>)
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	0023      	movs	r3, r4
 80040de:	f000 fb63 	bl	80047a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	0013      	movs	r3, r2
 80040ec:	2200      	movs	r2, #0
 80040ee:	2104      	movs	r1, #4
 80040f0:	f000 f978 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e082      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d03a      	beq.n	80041ae <HAL_I2C_Mem_Read+0x202>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d136      	bne.n	80041ae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	0013      	movs	r3, r2
 800414a:	2200      	movs	r2, #0
 800414c:	2180      	movs	r1, #128	; 0x80
 800414e:	f000 f949 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e053      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2bff      	cmp	r3, #255	; 0xff
 8004162:	d911      	bls.n	8004188 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	22ff      	movs	r2, #255	; 0xff
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	b2da      	uxtb	r2, r3
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	045c      	lsls	r4, r3, #17
 8004174:	230a      	movs	r3, #10
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	8819      	ldrh	r1, [r3, #0]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	2300      	movs	r3, #0
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	0023      	movs	r3, r4
 8004182:	f000 fb11 	bl	80047a8 <I2C_TransferConfig>
 8004186:	e012      	b.n	80041ae <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	b2da      	uxtb	r2, r3
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	049c      	lsls	r4, r3, #18
 800419c:	230a      	movs	r3, #10
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	8819      	ldrh	r1, [r3, #0]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	2300      	movs	r3, #0
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	0023      	movs	r3, r4
 80041aa:	f000 fafd 	bl	80047a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d194      	bne.n	80040e2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 f9ae 	bl	8004520 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041c4:	1e03      	subs	r3, r0, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e01a      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2220      	movs	r2, #32
 80041d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	490c      	ldr	r1, [pc, #48]	; (8004210 <HAL_I2C_Mem_Read+0x264>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2241      	movs	r2, #65	; 0x41
 80041e8:	2120      	movs	r1, #32
 80041ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2242      	movs	r2, #66	; 0x42
 80041f0:	2100      	movs	r1, #0
 80041f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	2100      	movs	r1, #0
 80041fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b007      	add	sp, #28
 8004208:	bd90      	pop	{r4, r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	80002400 	.word	0x80002400
 8004210:	fe00e800 	.word	0xfe00e800

08004214 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004214:	b5b0      	push	{r4, r5, r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	000c      	movs	r4, r1
 800421e:	0010      	movs	r0, r2
 8004220:	0019      	movs	r1, r3
 8004222:	250a      	movs	r5, #10
 8004224:	197b      	adds	r3, r7, r5
 8004226:	1c22      	adds	r2, r4, #0
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	2308      	movs	r3, #8
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	1c02      	adds	r2, r0, #0
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	1dbb      	adds	r3, r7, #6
 8004234:	1c0a      	adds	r2, r1, #0
 8004236:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004238:	1dbb      	adds	r3, r7, #6
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	045c      	lsls	r4, r3, #17
 8004242:	197b      	adds	r3, r7, r5
 8004244:	8819      	ldrh	r1, [r3, #0]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <I2C_RequestMemoryWrite+0xc4>)
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	0023      	movs	r3, r4
 800424e:	f000 faab 	bl	80047a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004254:	6a39      	ldr	r1, [r7, #32]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 f91b 	bl	8004494 <I2C_WaitOnTXISFlagUntilTimeout>
 800425e:	1e03      	subs	r3, r0, #0
 8004260:	d001      	beq.n	8004266 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e033      	b.n	80042ce <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004266:	1dbb      	adds	r3, r7, #6
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d107      	bne.n	800427e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800426e:	2308      	movs	r3, #8
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
 800427c:	e019      	b.n	80042b2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800427e:	2308      	movs	r3, #8
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	b29b      	uxth	r3, r3
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	6a39      	ldr	r1, [r7, #32]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	0018      	movs	r0, r3
 8004298:	f000 f8fc 	bl	8004494 <I2C_WaitOnTXISFlagUntilTimeout>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d001      	beq.n	80042a4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e014      	b.n	80042ce <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042a4:	2308      	movs	r3, #8
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042b2:	6a3a      	ldr	r2, [r7, #32]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	0013      	movs	r3, r2
 80042bc:	2200      	movs	r2, #0
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	f000 f890 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 80042c4:	1e03      	subs	r3, r0, #0
 80042c6:	d001      	beq.n	80042cc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bdb0      	pop	{r4, r5, r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	80002000 	.word	0x80002000

080042dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80042dc:	b5b0      	push	{r4, r5, r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	000c      	movs	r4, r1
 80042e6:	0010      	movs	r0, r2
 80042e8:	0019      	movs	r1, r3
 80042ea:	250a      	movs	r5, #10
 80042ec:	197b      	adds	r3, r7, r5
 80042ee:	1c22      	adds	r2, r4, #0
 80042f0:	801a      	strh	r2, [r3, #0]
 80042f2:	2308      	movs	r3, #8
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	1c02      	adds	r2, r0, #0
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	1dbb      	adds	r3, r7, #6
 80042fc:	1c0a      	adds	r2, r1, #0
 80042fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004300:	1dbb      	adds	r3, r7, #6
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	197b      	adds	r3, r7, r5
 8004308:	8819      	ldrh	r1, [r3, #0]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	4b23      	ldr	r3, [pc, #140]	; (800439c <I2C_RequestMemoryRead+0xc0>)
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	2300      	movs	r3, #0
 8004312:	f000 fa49 	bl	80047a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	6a39      	ldr	r1, [r7, #32]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	0018      	movs	r0, r3
 800431e:	f000 f8b9 	bl	8004494 <I2C_WaitOnTXISFlagUntilTimeout>
 8004322:	1e03      	subs	r3, r0, #0
 8004324:	d001      	beq.n	800432a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e033      	b.n	8004392 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800432a:	1dbb      	adds	r3, r7, #6
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d107      	bne.n	8004342 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004332:	2308      	movs	r3, #8
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
 8004340:	e019      	b.n	8004376 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004342:	2308      	movs	r3, #8
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	0a1b      	lsrs	r3, r3, #8
 800434a:	b29b      	uxth	r3, r3
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004356:	6a39      	ldr	r1, [r7, #32]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f89a 	bl	8004494 <I2C_WaitOnTXISFlagUntilTimeout>
 8004360:	1e03      	subs	r3, r0, #0
 8004362:	d001      	beq.n	8004368 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e014      	b.n	8004392 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004368:	2308      	movs	r3, #8
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004376:	6a3a      	ldr	r2, [r7, #32]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	0013      	movs	r3, r2
 8004380:	2200      	movs	r2, #0
 8004382:	2140      	movs	r1, #64	; 0x40
 8004384:	f000 f82e 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8004388:	1e03      	subs	r3, r0, #0
 800438a:	d001      	beq.n	8004390 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b004      	add	sp, #16
 8004398:	bdb0      	pop	{r4, r5, r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	80002000 	.word	0x80002000

080043a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2202      	movs	r2, #2
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d103      	bne.n	80043be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2201      	movs	r2, #1
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d007      	beq.n	80043dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2101      	movs	r1, #1
 80043d8:	430a      	orrs	r2, r1
 80043da:	619a      	str	r2, [r3, #24]
  }
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	b002      	add	sp, #8
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f4:	e03a      	b.n	800446c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 f8d3 	bl	80045a8 <I2C_IsErrorOccurred>
 8004402:	1e03      	subs	r3, r0, #0
 8004404:	d001      	beq.n	800440a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e040      	b.n	800448c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	3301      	adds	r3, #1
 800440e:	d02d      	beq.n	800446c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004410:	f7ff f97e 	bl	8003710 <HAL_GetTick>
 8004414:	0002      	movs	r2, r0
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d122      	bne.n	800446c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	425a      	negs	r2, r3
 8004436:	4153      	adcs	r3, r2
 8004438:	b2db      	uxtb	r3, r3
 800443a:	001a      	movs	r2, r3
 800443c:	1dfb      	adds	r3, r7, #7
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d113      	bne.n	800446c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	2220      	movs	r2, #32
 800444a:	431a      	orrs	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2241      	movs	r2, #65	; 0x41
 8004454:	2120      	movs	r1, #32
 8004456:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2242      	movs	r2, #66	; 0x42
 800445c:	2100      	movs	r1, #0
 800445e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2240      	movs	r2, #64	; 0x40
 8004464:	2100      	movs	r1, #0
 8004466:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e00f      	b.n	800448c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	425a      	negs	r2, r3
 800447c:	4153      	adcs	r3, r2
 800447e:	b2db      	uxtb	r3, r3
 8004480:	001a      	movs	r2, r3
 8004482:	1dfb      	adds	r3, r7, #7
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d0b5      	beq.n	80043f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b004      	add	sp, #16
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044a0:	e032      	b.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 f87d 	bl	80045a8 <I2C_IsErrorOccurred>
 80044ae:	1e03      	subs	r3, r0, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e030      	b.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	3301      	adds	r3, #1
 80044ba:	d025      	beq.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044bc:	f7ff f928 	bl	8003710 <HAL_GetTick>
 80044c0:	0002      	movs	r2, r0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d11a      	bne.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2202      	movs	r2, #2
 80044da:	4013      	ands	r3, r2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d013      	beq.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	2220      	movs	r2, #32
 80044e6:	431a      	orrs	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2241      	movs	r2, #65	; 0x41
 80044f0:	2120      	movs	r1, #32
 80044f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2242      	movs	r2, #66	; 0x42
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	2100      	movs	r1, #0
 8004502:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e007      	b.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	2b02      	cmp	r3, #2
 8004514:	d1c5      	bne.n	80044a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	b004      	add	sp, #16
 800451e:	bd80      	pop	{r7, pc}

08004520 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800452c:	e02f      	b.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	0018      	movs	r0, r3
 8004536:	f000 f837 	bl	80045a8 <I2C_IsErrorOccurred>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d001      	beq.n	8004542 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e02d      	b.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004542:	f7ff f8e5 	bl	8003710 <HAL_GetTick>
 8004546:	0002      	movs	r2, r0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11a      	bne.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2220      	movs	r2, #32
 8004560:	4013      	ands	r3, r2
 8004562:	2b20      	cmp	r3, #32
 8004564:	d013      	beq.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	2220      	movs	r2, #32
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2241      	movs	r2, #65	; 0x41
 8004576:	2120      	movs	r1, #32
 8004578:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2242      	movs	r2, #66	; 0x42
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2240      	movs	r2, #64	; 0x40
 8004586:	2100      	movs	r1, #0
 8004588:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e007      	b.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2220      	movs	r2, #32
 8004596:	4013      	ands	r3, r2
 8004598:	2b20      	cmp	r3, #32
 800459a:	d1c8      	bne.n	800452e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b004      	add	sp, #16
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b08b      	sub	sp, #44	; 0x2c
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2327      	movs	r3, #39	; 0x27
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2210      	movs	r2, #16
 80045d0:	4013      	ands	r3, r2
 80045d2:	d100      	bne.n	80045d6 <I2C_IsErrorOccurred+0x2e>
 80045d4:	e082      	b.n	80046dc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045de:	e060      	b.n	80046a2 <I2C_IsErrorOccurred+0xfa>
 80045e0:	2427      	movs	r4, #39	; 0x27
 80045e2:	193b      	adds	r3, r7, r4
 80045e4:	193a      	adds	r2, r7, r4
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3301      	adds	r3, #1
 80045ee:	d058      	beq.n	80046a2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7ff f88e 	bl	8003710 <HAL_GetTick>
 80045f4:	0002      	movs	r2, r0
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d306      	bcc.n	800460e <I2C_IsErrorOccurred+0x66>
 8004600:	193b      	adds	r3, r7, r4
 8004602:	193a      	adds	r2, r7, r4
 8004604:	7812      	ldrb	r2, [r2, #0]
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d149      	bne.n	80046a2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	01db      	lsls	r3, r3, #7
 8004618:	4013      	ands	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800461c:	2013      	movs	r0, #19
 800461e:	183b      	adds	r3, r7, r0
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	2142      	movs	r1, #66	; 0x42
 8004624:	5c52      	ldrb	r2, [r2, r1]
 8004626:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	401a      	ands	r2, r3
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	429a      	cmp	r2, r3
 800463a:	d126      	bne.n	800468a <I2C_IsErrorOccurred+0xe2>
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	01db      	lsls	r3, r3, #7
 8004642:	429a      	cmp	r2, r3
 8004644:	d021      	beq.n	800468a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004646:	183b      	adds	r3, r7, r0
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b20      	cmp	r3, #32
 800464c:	d01d      	beq.n	800468a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2180      	movs	r1, #128	; 0x80
 800465a:	01c9      	lsls	r1, r1, #7
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004660:	f7ff f856 	bl	8003710 <HAL_GetTick>
 8004664:	0003      	movs	r3, r0
 8004666:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004668:	e00f      	b.n	800468a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800466a:	f7ff f851 	bl	8003710 <HAL_GetTick>
 800466e:	0002      	movs	r2, r0
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b19      	cmp	r3, #25
 8004676:	d908      	bls.n	800468a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	2220      	movs	r2, #32
 800467c:	4313      	orrs	r3, r2
 800467e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004680:	2327      	movs	r3, #39	; 0x27
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]

              break;
 8004688:	e00b      	b.n	80046a2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2220      	movs	r2, #32
 8004692:	4013      	ands	r3, r2
 8004694:	2127      	movs	r1, #39	; 0x27
 8004696:	187a      	adds	r2, r7, r1
 8004698:	1879      	adds	r1, r7, r1
 800469a:	7809      	ldrb	r1, [r1, #0]
 800469c:	7011      	strb	r1, [r2, #0]
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d1e3      	bne.n	800466a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2220      	movs	r2, #32
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d004      	beq.n	80046ba <I2C_IsErrorOccurred+0x112>
 80046b0:	2327      	movs	r3, #39	; 0x27
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d092      	beq.n	80045e0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046ba:	2327      	movs	r3, #39	; 0x27
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2220      	movs	r2, #32
 80046ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2204      	movs	r2, #4
 80046d0:	4313      	orrs	r3, r2
 80046d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046d4:	2327      	movs	r3, #39	; 0x27
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4013      	ands	r3, r2
 80046ec:	d00c      	beq.n	8004708 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	2201      	movs	r2, #1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2280      	movs	r2, #128	; 0x80
 80046fc:	0052      	lsls	r2, r2, #1
 80046fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004700:	2327      	movs	r3, #39	; 0x27
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	2201      	movs	r2, #1
 8004706:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4013      	ands	r3, r2
 8004710:	d00c      	beq.n	800472c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	2208      	movs	r2, #8
 8004716:	4313      	orrs	r3, r2
 8004718:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2280      	movs	r2, #128	; 0x80
 8004720:	00d2      	lsls	r2, r2, #3
 8004722:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004724:	2327      	movs	r3, #39	; 0x27
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4013      	ands	r3, r2
 8004734:	d00c      	beq.n	8004750 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	2202      	movs	r2, #2
 800473a:	4313      	orrs	r3, r2
 800473c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2280      	movs	r2, #128	; 0x80
 8004744:	0092      	lsls	r2, r2, #2
 8004746:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004748:	2327      	movs	r3, #39	; 0x27
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004750:	2327      	movs	r3, #39	; 0x27
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01d      	beq.n	8004796 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	0018      	movs	r0, r3
 800475e:	f7ff fe1f 	bl	80043a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	490d      	ldr	r1, [pc, #52]	; (80047a4 <I2C_IsErrorOccurred+0x1fc>)
 800476e:	400a      	ands	r2, r1
 8004770:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2241      	movs	r2, #65	; 0x41
 8004782:	2120      	movs	r1, #32
 8004784:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2242      	movs	r2, #66	; 0x42
 800478a:	2100      	movs	r1, #0
 800478c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2240      	movs	r2, #64	; 0x40
 8004792:	2100      	movs	r1, #0
 8004794:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004796:	2327      	movs	r3, #39	; 0x27
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	781b      	ldrb	r3, [r3, #0]
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b00b      	add	sp, #44	; 0x2c
 80047a2:	bd90      	pop	{r4, r7, pc}
 80047a4:	fe00e800 	.word	0xfe00e800

080047a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	0008      	movs	r0, r1
 80047b2:	0011      	movs	r1, r2
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	240a      	movs	r4, #10
 80047b8:	193b      	adds	r3, r7, r4
 80047ba:	1c02      	adds	r2, r0, #0
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	2009      	movs	r0, #9
 80047c0:	183b      	adds	r3, r7, r0
 80047c2:	1c0a      	adds	r2, r1, #0
 80047c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c6:	193b      	adds	r3, r7, r4
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	059b      	lsls	r3, r3, #22
 80047cc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ce:	183b      	adds	r3, r7, r0
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	0419      	lsls	r1, r3, #16
 80047d4:	23ff      	movs	r3, #255	; 0xff
 80047d6:	041b      	lsls	r3, r3, #16
 80047d8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047da:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	4313      	orrs	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f2:	0d51      	lsrs	r1, r2, #21
 80047f4:	2280      	movs	r2, #128	; 0x80
 80047f6:	00d2      	lsls	r2, r2, #3
 80047f8:	400a      	ands	r2, r1
 80047fa:	4907      	ldr	r1, [pc, #28]	; (8004818 <I2C_TransferConfig+0x70>)
 80047fc:	430a      	orrs	r2, r1
 80047fe:	43d2      	mvns	r2, r2
 8004800:	401a      	ands	r2, r3
 8004802:	0011      	movs	r1, r2
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b007      	add	sp, #28
 8004814:	bd90      	pop	{r4, r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	03ff63ff 	.word	0x03ff63ff

0800481c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2241      	movs	r2, #65	; 0x41
 800482a:	5c9b      	ldrb	r3, [r3, r2]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b20      	cmp	r3, #32
 8004830:	d138      	bne.n	80048a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2240      	movs	r2, #64	; 0x40
 8004836:	5c9b      	ldrb	r3, [r3, r2]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800483c:	2302      	movs	r3, #2
 800483e:	e032      	b.n	80048a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2240      	movs	r2, #64	; 0x40
 8004844:	2101      	movs	r1, #1
 8004846:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2241      	movs	r2, #65	; 0x41
 800484c:	2124      	movs	r1, #36	; 0x24
 800484e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2101      	movs	r1, #1
 800485c:	438a      	bics	r2, r1
 800485e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4911      	ldr	r1, [pc, #68]	; (80048b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800486c:	400a      	ands	r2, r1
 800486e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2101      	movs	r1, #1
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2241      	movs	r2, #65	; 0x41
 8004894:	2120      	movs	r1, #32
 8004896:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2240      	movs	r2, #64	; 0x40
 800489c:	2100      	movs	r1, #0
 800489e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b002      	add	sp, #8
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	ffffefff 	.word	0xffffefff

080048b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2241      	movs	r2, #65	; 0x41
 80048c2:	5c9b      	ldrb	r3, [r3, r2]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d139      	bne.n	800493e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2240      	movs	r2, #64	; 0x40
 80048ce:	5c9b      	ldrb	r3, [r3, r2]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e033      	b.n	8004940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2240      	movs	r2, #64	; 0x40
 80048dc:	2101      	movs	r1, #1
 80048de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2241      	movs	r2, #65	; 0x41
 80048e4:	2124      	movs	r1, #36	; 0x24
 80048e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2101      	movs	r1, #1
 80048f4:	438a      	bics	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a11      	ldr	r2, [pc, #68]	; (8004948 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2241      	movs	r2, #65	; 0x41
 800492e:	2120      	movs	r1, #32
 8004930:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2240      	movs	r2, #64	; 0x40
 8004936:	2100      	movs	r1, #0
 8004938:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
  }
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b004      	add	sp, #16
 8004946:	bd80      	pop	{r7, pc}
 8004948:	fffff0ff 	.word	0xfffff0ff

0800494c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800495a:	4013      	ands	r3, r2
 800495c:	0019      	movs	r1, r3
 800495e:	4b17      	ldr	r3, [pc, #92]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	430a      	orrs	r2, r1
 8004964:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d11f      	bne.n	80049b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	0013      	movs	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	189b      	adds	r3, r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4912      	ldr	r1, [pc, #72]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800497e:	0018      	movs	r0, r3
 8004980:	f7fb fbc0 	bl	8000104 <__udivsi3>
 8004984:	0003      	movs	r3, r0
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800498a:	e008      	b.n	800499e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3b01      	subs	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e001      	b.n	800499e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e009      	b.n	80049b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800499e:	4b07      	ldr	r3, [pc, #28]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	401a      	ands	r2, r3
 80049a8:	2380      	movs	r3, #128	; 0x80
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d0ed      	beq.n	800498c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	0018      	movs	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b004      	add	sp, #16
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	40007000 	.word	0x40007000
 80049c0:	fffff9ff 	.word	0xfffff9ff
 80049c4:	20000000 	.word	0x20000000
 80049c8:	000f4240 	.word	0x000f4240

080049cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	23e0      	movs	r3, #224	; 0xe0
 80049d6:	01db      	lsls	r3, r3, #7
 80049d8:	4013      	ands	r3, r2
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000

080049e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e2fe      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2201      	movs	r2, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	d100      	bne.n	8004a02 <HAL_RCC_OscConfig+0x1e>
 8004a00:	e07c      	b.n	8004afc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a02:	4bc3      	ldr	r3, [pc, #780]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2238      	movs	r2, #56	; 0x38
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a0c:	4bc0      	ldr	r3, [pc, #768]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2203      	movs	r2, #3
 8004a12:	4013      	ands	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d102      	bne.n	8004a22 <HAL_RCC_OscConfig+0x3e>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d002      	beq.n	8004a28 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	4bb9      	ldr	r3, [pc, #740]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	029b      	lsls	r3, r3, #10
 8004a30:	4013      	ands	r3, r2
 8004a32:	d062      	beq.n	8004afa <HAL_RCC_OscConfig+0x116>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d15e      	bne.n	8004afa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e2d9      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_OscConfig+0x78>
 8004a4c:	4bb0      	ldr	r3, [pc, #704]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4baf      	ldr	r3, [pc, #700]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	0249      	lsls	r1, r1, #9
 8004a56:	430a      	orrs	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e020      	b.n	8004a9e <HAL_RCC_OscConfig+0xba>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	23a0      	movs	r3, #160	; 0xa0
 8004a62:	02db      	lsls	r3, r3, #11
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d10e      	bne.n	8004a86 <HAL_RCC_OscConfig+0xa2>
 8004a68:	4ba9      	ldr	r3, [pc, #676]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4ba8      	ldr	r3, [pc, #672]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	02c9      	lsls	r1, r1, #11
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	4ba6      	ldr	r3, [pc, #664]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4ba5      	ldr	r3, [pc, #660]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	0249      	lsls	r1, r1, #9
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e00b      	b.n	8004a9e <HAL_RCC_OscConfig+0xba>
 8004a86:	4ba2      	ldr	r3, [pc, #648]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4ba1      	ldr	r3, [pc, #644]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a8c:	49a1      	ldr	r1, [pc, #644]	; (8004d14 <HAL_RCC_OscConfig+0x330>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	4b9f      	ldr	r3, [pc, #636]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b9e      	ldr	r3, [pc, #632]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004a98:	499f      	ldr	r1, [pc, #636]	; (8004d18 <HAL_RCC_OscConfig+0x334>)
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d014      	beq.n	8004ad0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fe fe33 	bl	8003710 <HAL_GetTick>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fe fe2e 	bl	8003710 <HAL_GetTick>
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e298      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac2:	4b93      	ldr	r3, [pc, #588]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	029b      	lsls	r3, r3, #10
 8004aca:	4013      	ands	r3, r2
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xcc>
 8004ace:	e015      	b.n	8004afc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fe fe1e 	bl	8003710 <HAL_GetTick>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ada:	f7fe fe19 	bl	8003710 <HAL_GetTick>
 8004ade:	0002      	movs	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b64      	cmp	r3, #100	; 0x64
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e283      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aec:	4b88      	ldr	r3, [pc, #544]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	4013      	ands	r3, r2
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0xf6>
 8004af8:	e000      	b.n	8004afc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2202      	movs	r2, #2
 8004b02:	4013      	ands	r3, r2
 8004b04:	d100      	bne.n	8004b08 <HAL_RCC_OscConfig+0x124>
 8004b06:	e099      	b.n	8004c3c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b08:	4b81      	ldr	r3, [pc, #516]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2238      	movs	r2, #56	; 0x38
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b12:	4b7f      	ldr	r3, [pc, #508]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	2203      	movs	r2, #3
 8004b18:	4013      	ands	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d102      	bne.n	8004b28 <HAL_RCC_OscConfig+0x144>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d002      	beq.n	8004b2e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d135      	bne.n	8004b9a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2e:	4b78      	ldr	r3, [pc, #480]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4013      	ands	r3, r2
 8004b38:	d005      	beq.n	8004b46 <HAL_RCC_OscConfig+0x162>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e256      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b46:	4b72      	ldr	r3, [pc, #456]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4a74      	ldr	r2, [pc, #464]	; (8004d1c <HAL_RCC_OscConfig+0x338>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	021a      	lsls	r2, r3, #8
 8004b56:	4b6e      	ldr	r3, [pc, #440]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d112      	bne.n	8004b88 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b62:	4b6b      	ldr	r3, [pc, #428]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6e      	ldr	r2, [pc, #440]	; (8004d20 <HAL_RCC_OscConfig+0x33c>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b76:	4b66      	ldr	r3, [pc, #408]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	0adb      	lsrs	r3, r3, #11
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	4013      	ands	r3, r2
 8004b80:	4a68      	ldr	r2, [pc, #416]	; (8004d24 <HAL_RCC_OscConfig+0x340>)
 8004b82:	40da      	lsrs	r2, r3
 8004b84:	4b68      	ldr	r3, [pc, #416]	; (8004d28 <HAL_RCC_OscConfig+0x344>)
 8004b86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b88:	4b68      	ldr	r3, [pc, #416]	; (8004d2c <HAL_RCC_OscConfig+0x348>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fe fd63 	bl	8003658 <HAL_InitTick>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d051      	beq.n	8004c3a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e22c      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d030      	beq.n	8004c04 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ba2:	4b5b      	ldr	r3, [pc, #364]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a5e      	ldr	r2, [pc, #376]	; (8004d20 <HAL_RCC_OscConfig+0x33c>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	4b57      	ldr	r3, [pc, #348]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004bb6:	4b56      	ldr	r3, [pc, #344]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	0049      	lsls	r1, r1, #1
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fe fda4 	bl	8003710 <HAL_GetTick>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fe fd9f 	bl	8003710 <HAL_GetTick>
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e209      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4013      	ands	r3, r2
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b48      	ldr	r3, [pc, #288]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a4a      	ldr	r2, [pc, #296]	; (8004d1c <HAL_RCC_OscConfig+0x338>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	021a      	lsls	r2, r3, #8
 8004bfc:	4b44      	ldr	r3, [pc, #272]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	e01b      	b.n	8004c3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004c04:	4b42      	ldr	r3, [pc, #264]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004c0a:	4949      	ldr	r1, [pc, #292]	; (8004d30 <HAL_RCC_OscConfig+0x34c>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7fe fd7e 	bl	8003710 <HAL_GetTick>
 8004c14:	0003      	movs	r3, r0
 8004c16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c1a:	f7fe fd79 	bl	8003710 <HAL_GetTick>
 8004c1e:	0002      	movs	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1e3      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c2c:	4b38      	ldr	r3, [pc, #224]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4013      	ands	r3, r2
 8004c36:	d1f0      	bne.n	8004c1a <HAL_RCC_OscConfig+0x236>
 8004c38:	e000      	b.n	8004c3c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2208      	movs	r2, #8
 8004c42:	4013      	ands	r3, r2
 8004c44:	d047      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c46:	4b32      	ldr	r3, [pc, #200]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2238      	movs	r2, #56	; 0x38
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b18      	cmp	r3, #24
 8004c50:	d10a      	bne.n	8004c68 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004c52:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c56:	2202      	movs	r2, #2
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d03c      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x2f2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d138      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e1c5      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d019      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c70:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004c72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c74:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004c76:	2101      	movs	r1, #1
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fe fd48 	bl	8003710 <HAL_GetTick>
 8004c80:	0003      	movs	r3, r0
 8004c82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c86:	f7fe fd43 	bl	8003710 <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e1ad      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c98:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d0f1      	beq.n	8004c86 <HAL_RCC_OscConfig+0x2a2>
 8004ca2:	e018      	b.n	8004cd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004ca6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004caa:	2101      	movs	r1, #1
 8004cac:	438a      	bics	r2, r1
 8004cae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fe fd2e 	bl	8003710 <HAL_GetTick>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cba:	f7fe fd29 	bl	8003710 <HAL_GetTick>
 8004cbe:	0002      	movs	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e193      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ccc:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d1f1      	bne.n	8004cba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2204      	movs	r2, #4
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d100      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x2fe>
 8004ce0:	e0c6      	b.n	8004e70 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce2:	231f      	movs	r3, #31
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2238      	movs	r2, #56	; 0x38
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d11e      	bne.n	8004d34 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <HAL_RCC_OscConfig+0x32c>)
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d100      	bne.n	8004d02 <HAL_RCC_OscConfig+0x31e>
 8004d00:	e0b6      	b.n	8004e70 <HAL_RCC_OscConfig+0x48c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d000      	beq.n	8004d0c <HAL_RCC_OscConfig+0x328>
 8004d0a:	e0b1      	b.n	8004e70 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e171      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
 8004d10:	40021000 	.word	0x40021000
 8004d14:	fffeffff 	.word	0xfffeffff
 8004d18:	fffbffff 	.word	0xfffbffff
 8004d1c:	ffff80ff 	.word	0xffff80ff
 8004d20:	ffffc7ff 	.word	0xffffc7ff
 8004d24:	00f42400 	.word	0x00f42400
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	20000004 	.word	0x20000004
 8004d30:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d34:	4bb1      	ldr	r3, [pc, #708]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	055b      	lsls	r3, r3, #21
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_OscConfig+0x360>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x362>
 8004d44:	2300      	movs	r3, #0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d011      	beq.n	8004d6e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	4bac      	ldr	r3, [pc, #688]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d4e:	4bab      	ldr	r3, [pc, #684]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	0549      	lsls	r1, r1, #21
 8004d54:	430a      	orrs	r2, r1
 8004d56:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d58:	4ba8      	ldr	r3, [pc, #672]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	055b      	lsls	r3, r3, #21
 8004d60:	4013      	ands	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004d66:	231f      	movs	r3, #31
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d6e:	4ba4      	ldr	r3, [pc, #656]	; (8005000 <HAL_RCC_OscConfig+0x61c>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4013      	ands	r3, r2
 8004d78:	d11a      	bne.n	8004db0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d7a:	4ba1      	ldr	r3, [pc, #644]	; (8005000 <HAL_RCC_OscConfig+0x61c>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4ba0      	ldr	r3, [pc, #640]	; (8005000 <HAL_RCC_OscConfig+0x61c>)
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	0049      	lsls	r1, r1, #1
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004d88:	f7fe fcc2 	bl	8003710 <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d92:	f7fe fcbd 	bl	8003710 <HAL_GetTick>
 8004d96:	0002      	movs	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e127      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da4:	4b96      	ldr	r3, [pc, #600]	; (8005000 <HAL_RCC_OscConfig+0x61c>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4013      	ands	r3, r2
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x3e2>
 8004db8:	4b90      	ldr	r3, [pc, #576]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004dba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dbc:	4b8f      	ldr	r3, [pc, #572]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dc4:	e01c      	b.n	8004e00 <HAL_RCC_OscConfig+0x41c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x404>
 8004dce:	4b8b      	ldr	r3, [pc, #556]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004dd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dd2:	4b8a      	ldr	r3, [pc, #552]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dda:	4b88      	ldr	r3, [pc, #544]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dde:	4b87      	ldr	r3, [pc, #540]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004de0:	2101      	movs	r1, #1
 8004de2:	430a      	orrs	r2, r1
 8004de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004de6:	e00b      	b.n	8004e00 <HAL_RCC_OscConfig+0x41c>
 8004de8:	4b84      	ldr	r3, [pc, #528]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004dea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dec:	4b83      	ldr	r3, [pc, #524]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004dee:	2101      	movs	r1, #1
 8004df0:	438a      	bics	r2, r1
 8004df2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004df4:	4b81      	ldr	r3, [pc, #516]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004df8:	4b80      	ldr	r3, [pc, #512]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004dfa:	2104      	movs	r1, #4
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d014      	beq.n	8004e32 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fe fc82 	bl	8003710 <HAL_GetTick>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e10:	e009      	b.n	8004e26 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e12:	f7fe fc7d 	bl	8003710 <HAL_GetTick>
 8004e16:	0002      	movs	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	4a79      	ldr	r2, [pc, #484]	; (8005004 <HAL_RCC_OscConfig+0x620>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0e6      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e26:	4b75      	ldr	r3, [pc, #468]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x42e>
 8004e30:	e013      	b.n	8004e5a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e32:	f7fe fc6d 	bl	8003710 <HAL_GetTick>
 8004e36:	0003      	movs	r3, r0
 8004e38:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e3a:	e009      	b.n	8004e50 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3c:	f7fe fc68 	bl	8003710 <HAL_GetTick>
 8004e40:	0002      	movs	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	4a6f      	ldr	r2, [pc, #444]	; (8005004 <HAL_RCC_OscConfig+0x620>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0d1      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e50:	4b6a      	ldr	r3, [pc, #424]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	2202      	movs	r2, #2
 8004e56:	4013      	ands	r3, r2
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e5a:	231f      	movs	r3, #31
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d105      	bne.n	8004e70 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e64:	4b65      	ldr	r3, [pc, #404]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e68:	4b64      	ldr	r3, [pc, #400]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004e6a:	4967      	ldr	r1, [pc, #412]	; (8005008 <HAL_RCC_OscConfig+0x624>)
 8004e6c:	400a      	ands	r2, r1
 8004e6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d100      	bne.n	8004e7a <HAL_RCC_OscConfig+0x496>
 8004e78:	e0bb      	b.n	8004ff2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e7a:	4b60      	ldr	r3, [pc, #384]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2238      	movs	r2, #56	; 0x38
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d100      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4a4>
 8004e86:	e07b      	b.n	8004f80 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d156      	bne.n	8004f3e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e90:	4b5a      	ldr	r3, [pc, #360]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b59      	ldr	r3, [pc, #356]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004e96:	495d      	ldr	r1, [pc, #372]	; (800500c <HAL_RCC_OscConfig+0x628>)
 8004e98:	400a      	ands	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fe fc38 	bl	8003710 <HAL_GetTick>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea6:	f7fe fc33 	bl	8003710 <HAL_GetTick>
 8004eaa:	0002      	movs	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e09d      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb8:	4b50      	ldr	r3, [pc, #320]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	049b      	lsls	r3, r3, #18
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d1f0      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec4:	4b4d      	ldr	r3, [pc, #308]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a51      	ldr	r2, [pc, #324]	; (8005010 <HAL_RCC_OscConfig+0x62c>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	0019      	movs	r1, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1a      	ldr	r2, [r3, #32]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	4b42      	ldr	r3, [pc, #264]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef8:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b3f      	ldr	r3, [pc, #252]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	0449      	lsls	r1, r1, #17
 8004f02:	430a      	orrs	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004f06:	4b3d      	ldr	r3, [pc, #244]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	4b3c      	ldr	r3, [pc, #240]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004f0c:	2180      	movs	r1, #128	; 0x80
 8004f0e:	0549      	lsls	r1, r1, #21
 8004f10:	430a      	orrs	r2, r1
 8004f12:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fe fbfc 	bl	8003710 <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1e:	f7fe fbf7 	bl	8003710 <HAL_GetTick>
 8004f22:	0002      	movs	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e061      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f30:	4b32      	ldr	r3, [pc, #200]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	2380      	movs	r3, #128	; 0x80
 8004f36:	049b      	lsls	r3, r3, #18
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0x53a>
 8004f3c:	e059      	b.n	8004ff2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3e:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b2e      	ldr	r3, [pc, #184]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004f44:	4931      	ldr	r1, [pc, #196]	; (800500c <HAL_RCC_OscConfig+0x628>)
 8004f46:	400a      	ands	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4a:	f7fe fbe1 	bl	8003710 <HAL_GetTick>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fe fbdc 	bl	8003710 <HAL_GetTick>
 8004f58:	0002      	movs	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e046      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f66:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	049b      	lsls	r3, r3, #18
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004f72:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004f78:	4926      	ldr	r1, [pc, #152]	; (8005014 <HAL_RCC_OscConfig+0x630>)
 8004f7a:	400a      	ands	r2, r1
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	e038      	b.n	8004ff2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e033      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <HAL_RCC_OscConfig+0x618>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2203      	movs	r2, #3
 8004f96:	401a      	ands	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d126      	bne.n	8004fee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2270      	movs	r2, #112	; 0x70
 8004fa4:	401a      	ands	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d11f      	bne.n	8004fee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	23fe      	movs	r3, #254	; 0xfe
 8004fb2:	01db      	lsls	r3, r3, #7
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d116      	bne.n	8004fee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	23f8      	movs	r3, #248	; 0xf8
 8004fc4:	039b      	lsls	r3, r3, #14
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d10e      	bne.n	8004fee <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	23e0      	movs	r3, #224	; 0xe0
 8004fd4:	051b      	lsls	r3, r3, #20
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d106      	bne.n	8004fee <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	0f5b      	lsrs	r3, r3, #29
 8004fe4:	075a      	lsls	r2, r3, #29
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d001      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b008      	add	sp, #32
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40007000 	.word	0x40007000
 8005004:	00001388 	.word	0x00001388
 8005008:	efffffff 	.word	0xefffffff
 800500c:	feffffff 	.word	0xfeffffff
 8005010:	11c1808c 	.word	0x11c1808c
 8005014:	eefefffc 	.word	0xeefefffc

08005018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0e9      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800502c:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2207      	movs	r2, #7
 8005032:	4013      	ands	r3, r2
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d91e      	bls.n	8005078 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b73      	ldr	r3, [pc, #460]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2207      	movs	r2, #7
 8005040:	4393      	bics	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	4b70      	ldr	r3, [pc, #448]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800504c:	f7fe fb60 	bl	8003710 <HAL_GetTick>
 8005050:	0003      	movs	r3, r0
 8005052:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005054:	e009      	b.n	800506a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005056:	f7fe fb5b 	bl	8003710 <HAL_GetTick>
 800505a:	0002      	movs	r2, r0
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	4a6a      	ldr	r2, [pc, #424]	; (800520c <HAL_RCC_ClockConfig+0x1f4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0ca      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800506a:	4b67      	ldr	r3, [pc, #412]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2207      	movs	r2, #7
 8005070:	4013      	ands	r3, r2
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d1ee      	bne.n	8005056 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2202      	movs	r2, #2
 800507e:	4013      	ands	r3, r2
 8005080:	d015      	beq.n	80050ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2204      	movs	r2, #4
 8005088:	4013      	ands	r3, r2
 800508a:	d006      	beq.n	800509a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800508c:	4b60      	ldr	r3, [pc, #384]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	4b5f      	ldr	r3, [pc, #380]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 8005092:	21e0      	movs	r1, #224	; 0xe0
 8005094:	01c9      	lsls	r1, r1, #7
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800509a:	4b5d      	ldr	r3, [pc, #372]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	4a5d      	ldr	r2, [pc, #372]	; (8005214 <HAL_RCC_ClockConfig+0x1fc>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	0019      	movs	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	4b59      	ldr	r3, [pc, #356]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 80050aa:	430a      	orrs	r2, r1
 80050ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2201      	movs	r2, #1
 80050b4:	4013      	ands	r3, r2
 80050b6:	d057      	beq.n	8005168 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d107      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c0:	4b53      	ldr	r3, [pc, #332]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	029b      	lsls	r3, r3, #10
 80050c8:	4013      	ands	r3, r2
 80050ca:	d12b      	bne.n	8005124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e097      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d107      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d8:	4b4d      	ldr	r3, [pc, #308]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	049b      	lsls	r3, r3, #18
 80050e0:	4013      	ands	r3, r2
 80050e2:	d11f      	bne.n	8005124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e08b      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f0:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4013      	ands	r3, r2
 80050fa:	d113      	bne.n	8005124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e07f      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d106      	bne.n	8005116 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005108:	4b41      	ldr	r3, [pc, #260]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 800510a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510c:	2202      	movs	r2, #2
 800510e:	4013      	ands	r3, r2
 8005110:	d108      	bne.n	8005124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e074      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005116:	4b3e      	ldr	r3, [pc, #248]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 8005118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511a:	2202      	movs	r2, #2
 800511c:	4013      	ands	r3, r2
 800511e:	d101      	bne.n	8005124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e06d      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005124:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2207      	movs	r2, #7
 800512a:	4393      	bics	r3, r2
 800512c:	0019      	movs	r1, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	4b37      	ldr	r3, [pc, #220]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fe faea 	bl	8003710 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005140:	e009      	b.n	8005156 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005142:	f7fe fae5 	bl	8003710 <HAL_GetTick>
 8005146:	0002      	movs	r2, r0
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	4a2f      	ldr	r2, [pc, #188]	; (800520c <HAL_RCC_ClockConfig+0x1f4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e054      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005156:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2238      	movs	r2, #56	; 0x38
 800515c:	401a      	ands	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	429a      	cmp	r2, r3
 8005166:	d1ec      	bne.n	8005142 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005168:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2207      	movs	r2, #7
 800516e:	4013      	ands	r3, r2
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d21e      	bcs.n	80051b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b24      	ldr	r3, [pc, #144]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2207      	movs	r2, #7
 800517c:	4393      	bics	r3, r2
 800517e:	0019      	movs	r1, r3
 8005180:	4b21      	ldr	r3, [pc, #132]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005188:	f7fe fac2 	bl	8003710 <HAL_GetTick>
 800518c:	0003      	movs	r3, r0
 800518e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005190:	e009      	b.n	80051a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005192:	f7fe fabd 	bl	8003710 <HAL_GetTick>
 8005196:	0002      	movs	r2, r0
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <HAL_RCC_ClockConfig+0x1f4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e02c      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051a6:	4b18      	ldr	r3, [pc, #96]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2207      	movs	r2, #7
 80051ac:	4013      	ands	r3, r2
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d1ee      	bne.n	8005192 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2204      	movs	r2, #4
 80051ba:	4013      	ands	r3, r2
 80051bc:	d009      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051be:	4b14      	ldr	r3, [pc, #80]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <HAL_RCC_ClockConfig+0x200>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	0019      	movs	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	4b10      	ldr	r3, [pc, #64]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 80051ce:	430a      	orrs	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80051d2:	f000 f829 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80051d6:	0001      	movs	r1, r0
 80051d8:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	0a1b      	lsrs	r3, r3, #8
 80051de:	220f      	movs	r2, #15
 80051e0:	401a      	ands	r2, r3
 80051e2:	4b0e      	ldr	r3, [pc, #56]	; (800521c <HAL_RCC_ClockConfig+0x204>)
 80051e4:	0092      	lsls	r2, r2, #2
 80051e6:	58d3      	ldr	r3, [r2, r3]
 80051e8:	221f      	movs	r2, #31
 80051ea:	4013      	ands	r3, r2
 80051ec:	000a      	movs	r2, r1
 80051ee:	40da      	lsrs	r2, r3
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <HAL_RCC_ClockConfig+0x208>)
 80051f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCC_ClockConfig+0x20c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7fe fa2d 	bl	8003658 <HAL_InitTick>
 80051fe:	0003      	movs	r3, r0
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b004      	add	sp, #16
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40022000 	.word	0x40022000
 800520c:	00001388 	.word	0x00001388
 8005210:	40021000 	.word	0x40021000
 8005214:	fffff0ff 	.word	0xfffff0ff
 8005218:	ffff8fff 	.word	0xffff8fff
 800521c:	080072fc 	.word	0x080072fc
 8005220:	20000000 	.word	0x20000000
 8005224:	20000004 	.word	0x20000004

08005228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800522e:	4b3c      	ldr	r3, [pc, #240]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2238      	movs	r2, #56	; 0x38
 8005234:	4013      	ands	r3, r2
 8005236:	d10f      	bne.n	8005258 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005238:	4b39      	ldr	r3, [pc, #228]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	0adb      	lsrs	r3, r3, #11
 800523e:	2207      	movs	r2, #7
 8005240:	4013      	ands	r3, r2
 8005242:	2201      	movs	r2, #1
 8005244:	409a      	lsls	r2, r3
 8005246:	0013      	movs	r3, r2
 8005248:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	4835      	ldr	r0, [pc, #212]	; (8005324 <HAL_RCC_GetSysClockFreq+0xfc>)
 800524e:	f7fa ff59 	bl	8000104 <__udivsi3>
 8005252:	0003      	movs	r3, r0
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e05d      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2238      	movs	r2, #56	; 0x38
 800525e:	4013      	ands	r3, r2
 8005260:	2b08      	cmp	r3, #8
 8005262:	d102      	bne.n	800526a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005264:	4b30      	ldr	r3, [pc, #192]	; (8005328 <HAL_RCC_GetSysClockFreq+0x100>)
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e054      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800526a:	4b2d      	ldr	r3, [pc, #180]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2238      	movs	r2, #56	; 0x38
 8005270:	4013      	ands	r3, r2
 8005272:	2b10      	cmp	r3, #16
 8005274:	d138      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005276:	4b2a      	ldr	r3, [pc, #168]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	2203      	movs	r2, #3
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005280:	4b27      	ldr	r3, [pc, #156]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	2207      	movs	r2, #7
 8005288:	4013      	ands	r3, r2
 800528a:	3301      	adds	r3, #1
 800528c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d10d      	bne.n	80052b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4824      	ldr	r0, [pc, #144]	; (8005328 <HAL_RCC_GetSysClockFreq+0x100>)
 8005298:	f7fa ff34 	bl	8000104 <__udivsi3>
 800529c:	0003      	movs	r3, r0
 800529e:	0019      	movs	r1, r3
 80052a0:	4b1f      	ldr	r3, [pc, #124]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	0a1b      	lsrs	r3, r3, #8
 80052a6:	227f      	movs	r2, #127	; 0x7f
 80052a8:	4013      	ands	r3, r2
 80052aa:	434b      	muls	r3, r1
 80052ac:	617b      	str	r3, [r7, #20]
        break;
 80052ae:	e00d      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	481c      	ldr	r0, [pc, #112]	; (8005324 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052b4:	f7fa ff26 	bl	8000104 <__udivsi3>
 80052b8:	0003      	movs	r3, r0
 80052ba:	0019      	movs	r1, r3
 80052bc:	4b18      	ldr	r3, [pc, #96]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	0a1b      	lsrs	r3, r3, #8
 80052c2:	227f      	movs	r2, #127	; 0x7f
 80052c4:	4013      	ands	r3, r2
 80052c6:	434b      	muls	r3, r1
 80052c8:	617b      	str	r3, [r7, #20]
        break;
 80052ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80052cc:	4b14      	ldr	r3, [pc, #80]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	0f5b      	lsrs	r3, r3, #29
 80052d2:	2207      	movs	r2, #7
 80052d4:	4013      	ands	r3, r2
 80052d6:	3301      	adds	r3, #1
 80052d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	6978      	ldr	r0, [r7, #20]
 80052de:	f7fa ff11 	bl	8000104 <__udivsi3>
 80052e2:	0003      	movs	r3, r0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	e015      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80052e8:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2238      	movs	r2, #56	; 0x38
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d103      	bne.n	80052fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e00b      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80052fc:	4b08      	ldr	r3, [pc, #32]	; (8005320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2238      	movs	r2, #56	; 0x38
 8005302:	4013      	ands	r3, r2
 8005304:	2b18      	cmp	r3, #24
 8005306:	d103      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005308:	23fa      	movs	r3, #250	; 0xfa
 800530a:	01db      	lsls	r3, r3, #7
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	e001      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005314:	693b      	ldr	r3, [r7, #16]
}
 8005316:	0018      	movs	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	b006      	add	sp, #24
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	40021000 	.word	0x40021000
 8005324:	00f42400 	.word	0x00f42400
 8005328:	007a1200 	.word	0x007a1200

0800532c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005330:	4b02      	ldr	r3, [pc, #8]	; (800533c <HAL_RCC_GetHCLKFreq+0x10>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	20000000 	.word	0x20000000

08005340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005340:	b5b0      	push	{r4, r5, r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005344:	f7ff fff2 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005348:	0004      	movs	r4, r0
 800534a:	f7ff fb3f 	bl	80049cc <LL_RCC_GetAPB1Prescaler>
 800534e:	0003      	movs	r3, r0
 8005350:	0b1a      	lsrs	r2, r3, #12
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005354:	0092      	lsls	r2, r2, #2
 8005356:	58d3      	ldr	r3, [r2, r3]
 8005358:	221f      	movs	r2, #31
 800535a:	4013      	ands	r3, r2
 800535c:	40dc      	lsrs	r4, r3
 800535e:	0023      	movs	r3, r4
}
 8005360:	0018      	movs	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	bdb0      	pop	{r4, r5, r7, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	0800733c 	.word	0x0800733c

0800536c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005374:	2313      	movs	r3, #19
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800537c:	2312      	movs	r3, #18
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	029b      	lsls	r3, r3, #10
 800538c:	4013      	ands	r3, r2
 800538e:	d100      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005390:	e0a3      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005392:	2011      	movs	r0, #17
 8005394:	183b      	adds	r3, r7, r0
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539a:	4bc3      	ldr	r3, [pc, #780]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800539c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800539e:	2380      	movs	r3, #128	; 0x80
 80053a0:	055b      	lsls	r3, r3, #21
 80053a2:	4013      	ands	r3, r2
 80053a4:	d110      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4bc0      	ldr	r3, [pc, #768]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053aa:	4bbf      	ldr	r3, [pc, #764]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ac:	2180      	movs	r1, #128	; 0x80
 80053ae:	0549      	lsls	r1, r1, #21
 80053b0:	430a      	orrs	r2, r1
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80053b4:	4bbc      	ldr	r3, [pc, #752]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	055b      	lsls	r3, r3, #21
 80053bc:	4013      	ands	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]
 80053c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c2:	183b      	adds	r3, r7, r0
 80053c4:	2201      	movs	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053c8:	4bb8      	ldr	r3, [pc, #736]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4bb7      	ldr	r3, [pc, #732]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053ce:	2180      	movs	r1, #128	; 0x80
 80053d0:	0049      	lsls	r1, r1, #1
 80053d2:	430a      	orrs	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053d6:	f7fe f99b 	bl	8003710 <HAL_GetTick>
 80053da:	0003      	movs	r3, r0
 80053dc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053de:	e00b      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e0:	f7fe f996 	bl	8003710 <HAL_GetTick>
 80053e4:	0002      	movs	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d904      	bls.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80053ee:	2313      	movs	r3, #19
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	2203      	movs	r2, #3
 80053f4:	701a      	strb	r2, [r3, #0]
        break;
 80053f6:	e005      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f8:	4bac      	ldr	r3, [pc, #688]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	4013      	ands	r3, r2
 8005402:	d0ed      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005404:	2313      	movs	r3, #19
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d154      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800540e:	4ba6      	ldr	r3, [pc, #664]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005412:	23c0      	movs	r3, #192	; 0xc0
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4013      	ands	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d019      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	429a      	cmp	r2, r3
 8005428:	d014      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800542a:	4b9f      	ldr	r3, [pc, #636]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800542c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542e:	4aa0      	ldr	r2, [pc, #640]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005430:	4013      	ands	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005434:	4b9c      	ldr	r3, [pc, #624]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005438:	4b9b      	ldr	r3, [pc, #620]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800543a:	2180      	movs	r1, #128	; 0x80
 800543c:	0249      	lsls	r1, r1, #9
 800543e:	430a      	orrs	r2, r1
 8005440:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005442:	4b99      	ldr	r3, [pc, #612]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005444:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005446:	4b98      	ldr	r3, [pc, #608]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005448:	499a      	ldr	r1, [pc, #616]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800544a:	400a      	ands	r2, r1
 800544c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800544e:	4b96      	ldr	r3, [pc, #600]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2201      	movs	r2, #1
 8005458:	4013      	ands	r3, r2
 800545a:	d016      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fe f958 	bl	8003710 <HAL_GetTick>
 8005460:	0003      	movs	r3, r0
 8005462:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005464:	e00c      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fe f953 	bl	8003710 <HAL_GetTick>
 800546a:	0002      	movs	r2, r0
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	4a91      	ldr	r2, [pc, #580]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d904      	bls.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005476:	2313      	movs	r3, #19
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2203      	movs	r2, #3
 800547c:	701a      	strb	r2, [r3, #0]
            break;
 800547e:	e004      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005480:	4b89      	ldr	r3, [pc, #548]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005484:	2202      	movs	r2, #2
 8005486:	4013      	ands	r3, r2
 8005488:	d0ed      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800548a:	2313      	movs	r3, #19
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005494:	4b84      	ldr	r3, [pc, #528]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005498:	4a85      	ldr	r2, [pc, #532]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800549a:	4013      	ands	r3, r2
 800549c:	0019      	movs	r1, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a2:	4b81      	ldr	r3, [pc, #516]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054a4:	430a      	orrs	r2, r1
 80054a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80054a8:	e00c      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054aa:	2312      	movs	r3, #18
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	2213      	movs	r2, #19
 80054b0:	18ba      	adds	r2, r7, r2
 80054b2:	7812      	ldrb	r2, [r2, #0]
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e005      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	2312      	movs	r3, #18
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	2213      	movs	r2, #19
 80054be:	18ba      	adds	r2, r7, r2
 80054c0:	7812      	ldrb	r2, [r2, #0]
 80054c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054c4:	2311      	movs	r3, #17
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d105      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ce:	4b76      	ldr	r3, [pc, #472]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d2:	4b75      	ldr	r3, [pc, #468]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054d4:	4979      	ldr	r1, [pc, #484]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80054d6:	400a      	ands	r2, r1
 80054d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2201      	movs	r2, #1
 80054e0:	4013      	ands	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054e4:	4b70      	ldr	r3, [pc, #448]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e8:	2203      	movs	r2, #3
 80054ea:	4393      	bics	r3, r2
 80054ec:	0019      	movs	r1, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	4b6d      	ldr	r3, [pc, #436]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054f4:	430a      	orrs	r2, r1
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2202      	movs	r2, #2
 80054fe:	4013      	ands	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005502:	4b69      	ldr	r3, [pc, #420]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	220c      	movs	r2, #12
 8005508:	4393      	bics	r3, r2
 800550a:	0019      	movs	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	4b65      	ldr	r3, [pc, #404]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005512:	430a      	orrs	r2, r1
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2210      	movs	r2, #16
 800551c:	4013      	ands	r3, r2
 800551e:	d009      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005520:	4b61      	ldr	r3, [pc, #388]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	4a66      	ldr	r2, [pc, #408]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005526:	4013      	ands	r3, r2
 8005528:	0019      	movs	r1, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	4b5e      	ldr	r3, [pc, #376]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005530:	430a      	orrs	r2, r1
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4013      	ands	r3, r2
 800553e:	d009      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005540:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005544:	4a5f      	ldr	r2, [pc, #380]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005546:	4013      	ands	r3, r2
 8005548:	0019      	movs	r1, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	4b56      	ldr	r3, [pc, #344]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005550:	430a      	orrs	r2, r1
 8005552:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4013      	ands	r3, r2
 800555e:	d009      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005560:	4b51      	ldr	r3, [pc, #324]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005564:	4a58      	ldr	r2, [pc, #352]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005566:	4013      	ands	r3, r2
 8005568:	0019      	movs	r1, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69da      	ldr	r2, [r3, #28]
 800556e:	4b4e      	ldr	r3, [pc, #312]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005570:	430a      	orrs	r2, r1
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2220      	movs	r2, #32
 800557a:	4013      	ands	r3, r2
 800557c:	d009      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800557e:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005582:	4a52      	ldr	r2, [pc, #328]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005584:	4013      	ands	r3, r2
 8005586:	0019      	movs	r1, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	4b46      	ldr	r3, [pc, #280]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800558e:	430a      	orrs	r2, r1
 8005590:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	01db      	lsls	r3, r3, #7
 800559a:	4013      	ands	r3, r2
 800559c:	d015      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800559e:	4b42      	ldr	r3, [pc, #264]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	0899      	lsrs	r1, r3, #2
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1a      	ldr	r2, [r3, #32]
 80055aa:	4b3f      	ldr	r3, [pc, #252]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055ac:	430a      	orrs	r2, r1
 80055ae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	05db      	lsls	r3, r3, #23
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d106      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055bc:	4b3a      	ldr	r3, [pc, #232]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	4b39      	ldr	r3, [pc, #228]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	0249      	lsls	r1, r1, #9
 80055c6:	430a      	orrs	r2, r1
 80055c8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	2380      	movs	r3, #128	; 0x80
 80055d0:	031b      	lsls	r3, r3, #12
 80055d2:	4013      	ands	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055d6:	4b34      	ldr	r3, [pc, #208]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	2240      	movs	r2, #64	; 0x40
 80055dc:	4393      	bics	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055e4:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055e6:	430a      	orrs	r2, r1
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	039b      	lsls	r3, r3, #14
 80055f2:	4013      	ands	r3, r2
 80055f4:	d016      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055f6:	4b2c      	ldr	r3, [pc, #176]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	4a35      	ldr	r2, [pc, #212]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005604:	4b28      	ldr	r3, [pc, #160]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005606:	430a      	orrs	r2, r1
 8005608:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	03db      	lsls	r3, r3, #15
 8005612:	429a      	cmp	r2, r3
 8005614:	d106      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005616:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800561c:	2180      	movs	r1, #128	; 0x80
 800561e:	0449      	lsls	r1, r1, #17
 8005620:	430a      	orrs	r2, r1
 8005622:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	2380      	movs	r3, #128	; 0x80
 800562a:	03db      	lsls	r3, r3, #15
 800562c:	4013      	ands	r3, r2
 800562e:	d016      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005630:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005636:	4013      	ands	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	4b1a      	ldr	r3, [pc, #104]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005640:	430a      	orrs	r2, r1
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	045b      	lsls	r3, r3, #17
 800564c:	429a      	cmp	r2, r3
 800564e:	d106      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005650:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005656:	2180      	movs	r1, #128	; 0x80
 8005658:	0449      	lsls	r1, r1, #17
 800565a:	430a      	orrs	r2, r1
 800565c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	4013      	ands	r3, r2
 8005668:	d016      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800566a:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	4a1a      	ldr	r2, [pc, #104]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005670:	4013      	ands	r3, r2
 8005672:	0019      	movs	r1, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800567a:	430a      	orrs	r2, r1
 800567c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	2380      	movs	r3, #128	; 0x80
 8005684:	01db      	lsls	r3, r3, #7
 8005686:	429a      	cmp	r2, r3
 8005688:	d106      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800568a:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005690:	2180      	movs	r1, #128	; 0x80
 8005692:	0249      	lsls	r1, r1, #9
 8005694:	430a      	orrs	r2, r1
 8005696:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005698:	2312      	movs	r3, #18
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	781b      	ldrb	r3, [r3, #0]
}
 800569e:	0018      	movs	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b006      	add	sp, #24
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40007000 	.word	0x40007000
 80056b0:	fffffcff 	.word	0xfffffcff
 80056b4:	fffeffff 	.word	0xfffeffff
 80056b8:	00001388 	.word	0x00001388
 80056bc:	efffffff 	.word	0xefffffff
 80056c0:	fffff3ff 	.word	0xfffff3ff
 80056c4:	fff3ffff 	.word	0xfff3ffff
 80056c8:	ffcfffff 	.word	0xffcfffff
 80056cc:	ffffcfff 	.word	0xffffcfff
 80056d0:	ffbfffff 	.word	0xffbfffff
 80056d4:	feffffff 	.word	0xfeffffff
 80056d8:	ffff3fff 	.word	0xffff3fff

080056dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e046      	b.n	800577c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2288      	movs	r2, #136	; 0x88
 80056f2:	589b      	ldr	r3, [r3, r2]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2284      	movs	r2, #132	; 0x84
 80056fc:	2100      	movs	r1, #0
 80056fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	0018      	movs	r0, r3
 8005704:	f7fd fee2 	bl	80034cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2288      	movs	r2, #136	; 0x88
 800570c:	2124      	movs	r1, #36	; 0x24
 800570e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2101      	movs	r1, #1
 800571c:	438a      	bics	r2, r1
 800571e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0018      	movs	r0, r3
 800572c:	f000 faea 	bl	8005d04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	0018      	movs	r0, r3
 8005734:	f000 f828 	bl	8005788 <UART_SetConfig>
 8005738:	0003      	movs	r3, r0
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e01c      	b.n	800577c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	490d      	ldr	r1, [pc, #52]	; (8005784 <HAL_UART_Init+0xa8>)
 800574e:	400a      	ands	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	212a      	movs	r1, #42	; 0x2a
 800575e:	438a      	bics	r2, r1
 8005760:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2101      	movs	r1, #1
 800576e:	430a      	orrs	r2, r1
 8005770:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0018      	movs	r0, r3
 8005776:	f000 fb79 	bl	8005e6c <UART_CheckIdleState>
 800577a:	0003      	movs	r3, r0
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	b002      	add	sp, #8
 8005782:	bd80      	pop	{r7, pc}
 8005784:	ffffb7ff 	.word	0xffffb7ff

08005788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005788:	b5b0      	push	{r4, r5, r7, lr}
 800578a:	b090      	sub	sp, #64	; 0x40
 800578c:	af00      	add	r7, sp, #0
 800578e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005790:	231a      	movs	r3, #26
 8005792:	2220      	movs	r2, #32
 8005794:	189b      	adds	r3, r3, r2
 8005796:	19db      	adds	r3, r3, r7
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4aaf      	ldr	r2, [pc, #700]	; (8005a78 <UART_SetConfig+0x2f0>)
 80057bc:	4013      	ands	r3, r2
 80057be:	0019      	movs	r1, r3
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	430b      	orrs	r3, r1
 80057c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4aaa      	ldr	r2, [pc, #680]	; (8005a7c <UART_SetConfig+0x2f4>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	0018      	movs	r0, r3
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	68d9      	ldr	r1, [r3, #12]
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	0003      	movs	r3, r0
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4aa4      	ldr	r2, [pc, #656]	; (8005a80 <UART_SetConfig+0x2f8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d004      	beq.n	80057fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057fa:	4313      	orrs	r3, r2
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4a9f      	ldr	r2, [pc, #636]	; (8005a84 <UART_SetConfig+0x2fc>)
 8005806:	4013      	ands	r3, r2
 8005808:	0019      	movs	r1, r3
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005810:	430b      	orrs	r3, r1
 8005812:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	220f      	movs	r2, #15
 800581c:	4393      	bics	r3, r2
 800581e:	0018      	movs	r0, r3
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	0003      	movs	r3, r0
 800582a:	430b      	orrs	r3, r1
 800582c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a95      	ldr	r2, [pc, #596]	; (8005a88 <UART_SetConfig+0x300>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d131      	bne.n	800589c <UART_SetConfig+0x114>
 8005838:	4b94      	ldr	r3, [pc, #592]	; (8005a8c <UART_SetConfig+0x304>)
 800583a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583c:	2203      	movs	r2, #3
 800583e:	4013      	ands	r3, r2
 8005840:	2b03      	cmp	r3, #3
 8005842:	d01d      	beq.n	8005880 <UART_SetConfig+0xf8>
 8005844:	d823      	bhi.n	800588e <UART_SetConfig+0x106>
 8005846:	2b02      	cmp	r3, #2
 8005848:	d00c      	beq.n	8005864 <UART_SetConfig+0xdc>
 800584a:	d820      	bhi.n	800588e <UART_SetConfig+0x106>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <UART_SetConfig+0xce>
 8005850:	2b01      	cmp	r3, #1
 8005852:	d00e      	beq.n	8005872 <UART_SetConfig+0xea>
 8005854:	e01b      	b.n	800588e <UART_SetConfig+0x106>
 8005856:	231b      	movs	r3, #27
 8005858:	2220      	movs	r2, #32
 800585a:	189b      	adds	r3, r3, r2
 800585c:	19db      	adds	r3, r3, r7
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e0b4      	b.n	80059ce <UART_SetConfig+0x246>
 8005864:	231b      	movs	r3, #27
 8005866:	2220      	movs	r2, #32
 8005868:	189b      	adds	r3, r3, r2
 800586a:	19db      	adds	r3, r3, r7
 800586c:	2202      	movs	r2, #2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e0ad      	b.n	80059ce <UART_SetConfig+0x246>
 8005872:	231b      	movs	r3, #27
 8005874:	2220      	movs	r2, #32
 8005876:	189b      	adds	r3, r3, r2
 8005878:	19db      	adds	r3, r3, r7
 800587a:	2204      	movs	r2, #4
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e0a6      	b.n	80059ce <UART_SetConfig+0x246>
 8005880:	231b      	movs	r3, #27
 8005882:	2220      	movs	r2, #32
 8005884:	189b      	adds	r3, r3, r2
 8005886:	19db      	adds	r3, r3, r7
 8005888:	2208      	movs	r2, #8
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e09f      	b.n	80059ce <UART_SetConfig+0x246>
 800588e:	231b      	movs	r3, #27
 8005890:	2220      	movs	r2, #32
 8005892:	189b      	adds	r3, r3, r2
 8005894:	19db      	adds	r3, r3, r7
 8005896:	2210      	movs	r2, #16
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e098      	b.n	80059ce <UART_SetConfig+0x246>
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a7b      	ldr	r2, [pc, #492]	; (8005a90 <UART_SetConfig+0x308>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d131      	bne.n	800590a <UART_SetConfig+0x182>
 80058a6:	4b79      	ldr	r3, [pc, #484]	; (8005a8c <UART_SetConfig+0x304>)
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	220c      	movs	r2, #12
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d01d      	beq.n	80058ee <UART_SetConfig+0x166>
 80058b2:	d823      	bhi.n	80058fc <UART_SetConfig+0x174>
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d00c      	beq.n	80058d2 <UART_SetConfig+0x14a>
 80058b8:	d820      	bhi.n	80058fc <UART_SetConfig+0x174>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <UART_SetConfig+0x13c>
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d00e      	beq.n	80058e0 <UART_SetConfig+0x158>
 80058c2:	e01b      	b.n	80058fc <UART_SetConfig+0x174>
 80058c4:	231b      	movs	r3, #27
 80058c6:	2220      	movs	r2, #32
 80058c8:	189b      	adds	r3, r3, r2
 80058ca:	19db      	adds	r3, r3, r7
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e07d      	b.n	80059ce <UART_SetConfig+0x246>
 80058d2:	231b      	movs	r3, #27
 80058d4:	2220      	movs	r2, #32
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	19db      	adds	r3, r3, r7
 80058da:	2202      	movs	r2, #2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e076      	b.n	80059ce <UART_SetConfig+0x246>
 80058e0:	231b      	movs	r3, #27
 80058e2:	2220      	movs	r2, #32
 80058e4:	189b      	adds	r3, r3, r2
 80058e6:	19db      	adds	r3, r3, r7
 80058e8:	2204      	movs	r2, #4
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e06f      	b.n	80059ce <UART_SetConfig+0x246>
 80058ee:	231b      	movs	r3, #27
 80058f0:	2220      	movs	r2, #32
 80058f2:	189b      	adds	r3, r3, r2
 80058f4:	19db      	adds	r3, r3, r7
 80058f6:	2208      	movs	r2, #8
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e068      	b.n	80059ce <UART_SetConfig+0x246>
 80058fc:	231b      	movs	r3, #27
 80058fe:	2220      	movs	r2, #32
 8005900:	189b      	adds	r3, r3, r2
 8005902:	19db      	adds	r3, r3, r7
 8005904:	2210      	movs	r2, #16
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e061      	b.n	80059ce <UART_SetConfig+0x246>
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a61      	ldr	r2, [pc, #388]	; (8005a94 <UART_SetConfig+0x30c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d106      	bne.n	8005922 <UART_SetConfig+0x19a>
 8005914:	231b      	movs	r3, #27
 8005916:	2220      	movs	r2, #32
 8005918:	189b      	adds	r3, r3, r2
 800591a:	19db      	adds	r3, r3, r7
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e055      	b.n	80059ce <UART_SetConfig+0x246>
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a5c      	ldr	r2, [pc, #368]	; (8005a98 <UART_SetConfig+0x310>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d106      	bne.n	800593a <UART_SetConfig+0x1b2>
 800592c:	231b      	movs	r3, #27
 800592e:	2220      	movs	r2, #32
 8005930:	189b      	adds	r3, r3, r2
 8005932:	19db      	adds	r3, r3, r7
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	e049      	b.n	80059ce <UART_SetConfig+0x246>
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a50      	ldr	r2, [pc, #320]	; (8005a80 <UART_SetConfig+0x2f8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d13e      	bne.n	80059c2 <UART_SetConfig+0x23a>
 8005944:	4b51      	ldr	r3, [pc, #324]	; (8005a8c <UART_SetConfig+0x304>)
 8005946:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005948:	23c0      	movs	r3, #192	; 0xc0
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	4013      	ands	r3, r2
 800594e:	22c0      	movs	r2, #192	; 0xc0
 8005950:	0112      	lsls	r2, r2, #4
 8005952:	4293      	cmp	r3, r2
 8005954:	d027      	beq.n	80059a6 <UART_SetConfig+0x21e>
 8005956:	22c0      	movs	r2, #192	; 0xc0
 8005958:	0112      	lsls	r2, r2, #4
 800595a:	4293      	cmp	r3, r2
 800595c:	d82a      	bhi.n	80059b4 <UART_SetConfig+0x22c>
 800595e:	2280      	movs	r2, #128	; 0x80
 8005960:	0112      	lsls	r2, r2, #4
 8005962:	4293      	cmp	r3, r2
 8005964:	d011      	beq.n	800598a <UART_SetConfig+0x202>
 8005966:	2280      	movs	r2, #128	; 0x80
 8005968:	0112      	lsls	r2, r2, #4
 800596a:	4293      	cmp	r3, r2
 800596c:	d822      	bhi.n	80059b4 <UART_SetConfig+0x22c>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <UART_SetConfig+0x1f4>
 8005972:	2280      	movs	r2, #128	; 0x80
 8005974:	00d2      	lsls	r2, r2, #3
 8005976:	4293      	cmp	r3, r2
 8005978:	d00e      	beq.n	8005998 <UART_SetConfig+0x210>
 800597a:	e01b      	b.n	80059b4 <UART_SetConfig+0x22c>
 800597c:	231b      	movs	r3, #27
 800597e:	2220      	movs	r2, #32
 8005980:	189b      	adds	r3, r3, r2
 8005982:	19db      	adds	r3, r3, r7
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	e021      	b.n	80059ce <UART_SetConfig+0x246>
 800598a:	231b      	movs	r3, #27
 800598c:	2220      	movs	r2, #32
 800598e:	189b      	adds	r3, r3, r2
 8005990:	19db      	adds	r3, r3, r7
 8005992:	2202      	movs	r2, #2
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e01a      	b.n	80059ce <UART_SetConfig+0x246>
 8005998:	231b      	movs	r3, #27
 800599a:	2220      	movs	r2, #32
 800599c:	189b      	adds	r3, r3, r2
 800599e:	19db      	adds	r3, r3, r7
 80059a0:	2204      	movs	r2, #4
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	e013      	b.n	80059ce <UART_SetConfig+0x246>
 80059a6:	231b      	movs	r3, #27
 80059a8:	2220      	movs	r2, #32
 80059aa:	189b      	adds	r3, r3, r2
 80059ac:	19db      	adds	r3, r3, r7
 80059ae:	2208      	movs	r2, #8
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e00c      	b.n	80059ce <UART_SetConfig+0x246>
 80059b4:	231b      	movs	r3, #27
 80059b6:	2220      	movs	r2, #32
 80059b8:	189b      	adds	r3, r3, r2
 80059ba:	19db      	adds	r3, r3, r7
 80059bc:	2210      	movs	r2, #16
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e005      	b.n	80059ce <UART_SetConfig+0x246>
 80059c2:	231b      	movs	r3, #27
 80059c4:	2220      	movs	r2, #32
 80059c6:	189b      	adds	r3, r3, r2
 80059c8:	19db      	adds	r3, r3, r7
 80059ca:	2210      	movs	r2, #16
 80059cc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2b      	ldr	r2, [pc, #172]	; (8005a80 <UART_SetConfig+0x2f8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d000      	beq.n	80059da <UART_SetConfig+0x252>
 80059d8:	e0a9      	b.n	8005b2e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059da:	231b      	movs	r3, #27
 80059dc:	2220      	movs	r2, #32
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	19db      	adds	r3, r3, r7
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d015      	beq.n	8005a14 <UART_SetConfig+0x28c>
 80059e8:	dc18      	bgt.n	8005a1c <UART_SetConfig+0x294>
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d00d      	beq.n	8005a0a <UART_SetConfig+0x282>
 80059ee:	dc15      	bgt.n	8005a1c <UART_SetConfig+0x294>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <UART_SetConfig+0x272>
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d005      	beq.n	8005a04 <UART_SetConfig+0x27c>
 80059f8:	e010      	b.n	8005a1c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059fa:	f7ff fca1 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 80059fe:	0003      	movs	r3, r0
 8005a00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a02:	e014      	b.n	8005a2e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a04:	4b25      	ldr	r3, [pc, #148]	; (8005a9c <UART_SetConfig+0x314>)
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a08:	e011      	b.n	8005a2e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a0a:	f7ff fc0d 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a12:	e00c      	b.n	8005a2e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a1a:	e008      	b.n	8005a2e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005a20:	231a      	movs	r3, #26
 8005a22:	2220      	movs	r2, #32
 8005a24:	189b      	adds	r3, r3, r2
 8005a26:	19db      	adds	r3, r3, r7
 8005a28:	2201      	movs	r2, #1
 8005a2a:	701a      	strb	r2, [r3, #0]
        break;
 8005a2c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d100      	bne.n	8005a36 <UART_SetConfig+0x2ae>
 8005a34:	e14b      	b.n	8005cce <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a3a:	4b19      	ldr	r3, [pc, #100]	; (8005aa0 <UART_SetConfig+0x318>)
 8005a3c:	0052      	lsls	r2, r2, #1
 8005a3e:	5ad3      	ldrh	r3, [r2, r3]
 8005a40:	0019      	movs	r1, r3
 8005a42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a44:	f7fa fb5e 	bl	8000104 <__udivsi3>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	0013      	movs	r3, r2
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	189b      	adds	r3, r3, r2
 8005a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d305      	bcc.n	8005a68 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d91d      	bls.n	8005aa4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005a68:	231a      	movs	r3, #26
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	19db      	adds	r3, r3, r7
 8005a70:	2201      	movs	r2, #1
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	e12b      	b.n	8005cce <UART_SetConfig+0x546>
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	cfff69f3 	.word	0xcfff69f3
 8005a7c:	ffffcfff 	.word	0xffffcfff
 8005a80:	40008000 	.word	0x40008000
 8005a84:	11fff4ff 	.word	0x11fff4ff
 8005a88:	40013800 	.word	0x40013800
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	40004400 	.word	0x40004400
 8005a94:	40004800 	.word	0x40004800
 8005a98:	40004c00 	.word	0x40004c00
 8005a9c:	00f42400 	.word	0x00f42400
 8005aa0:	0800735c 	.word	0x0800735c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab0:	4b92      	ldr	r3, [pc, #584]	; (8005cfc <UART_SetConfig+0x574>)
 8005ab2:	0052      	lsls	r2, r2, #1
 8005ab4:	5ad3      	ldrh	r3, [r2, r3]
 8005ab6:	613b      	str	r3, [r7, #16]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	69b8      	ldr	r0, [r7, #24]
 8005ac2:	69f9      	ldr	r1, [r7, #28]
 8005ac4:	f7fa fcd2 	bl	800046c <__aeabi_uldivmod>
 8005ac8:	0002      	movs	r2, r0
 8005aca:	000b      	movs	r3, r1
 8005acc:	0e11      	lsrs	r1, r2, #24
 8005ace:	021d      	lsls	r5, r3, #8
 8005ad0:	430d      	orrs	r5, r1
 8005ad2:	0214      	lsls	r4, r2, #8
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68b8      	ldr	r0, [r7, #8]
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	1900      	adds	r0, r0, r4
 8005ae6:	4169      	adcs	r1, r5
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	2300      	movs	r3, #0
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f7fa fcb9 	bl	800046c <__aeabi_uldivmod>
 8005afa:	0002      	movs	r2, r0
 8005afc:	000b      	movs	r3, r1
 8005afe:	0013      	movs	r3, r2
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b04:	23c0      	movs	r3, #192	; 0xc0
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d309      	bcc.n	8005b20 <UART_SetConfig+0x398>
 8005b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	035b      	lsls	r3, r3, #13
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d204      	bcs.n	8005b20 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1c:	60da      	str	r2, [r3, #12]
 8005b1e:	e0d6      	b.n	8005cce <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005b20:	231a      	movs	r3, #26
 8005b22:	2220      	movs	r2, #32
 8005b24:	189b      	adds	r3, r3, r2
 8005b26:	19db      	adds	r3, r3, r7
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e0cf      	b.n	8005cce <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d000      	beq.n	8005b3c <UART_SetConfig+0x3b4>
 8005b3a:	e070      	b.n	8005c1e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005b3c:	231b      	movs	r3, #27
 8005b3e:	2220      	movs	r2, #32
 8005b40:	189b      	adds	r3, r3, r2
 8005b42:	19db      	adds	r3, r3, r7
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d015      	beq.n	8005b76 <UART_SetConfig+0x3ee>
 8005b4a:	dc18      	bgt.n	8005b7e <UART_SetConfig+0x3f6>
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d00d      	beq.n	8005b6c <UART_SetConfig+0x3e4>
 8005b50:	dc15      	bgt.n	8005b7e <UART_SetConfig+0x3f6>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <UART_SetConfig+0x3d4>
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d005      	beq.n	8005b66 <UART_SetConfig+0x3de>
 8005b5a:	e010      	b.n	8005b7e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b5c:	f7ff fbf0 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 8005b60:	0003      	movs	r3, r0
 8005b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b64:	e014      	b.n	8005b90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b66:	4b66      	ldr	r3, [pc, #408]	; (8005d00 <UART_SetConfig+0x578>)
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b6a:	e011      	b.n	8005b90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6c:	f7ff fb5c 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8005b70:	0003      	movs	r3, r0
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b74:	e00c      	b.n	8005b90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b76:	2380      	movs	r3, #128	; 0x80
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b7c:	e008      	b.n	8005b90 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b82:	231a      	movs	r3, #26
 8005b84:	2220      	movs	r2, #32
 8005b86:	189b      	adds	r3, r3, r2
 8005b88:	19db      	adds	r3, r3, r7
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	701a      	strb	r2, [r3, #0]
        break;
 8005b8e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d100      	bne.n	8005b98 <UART_SetConfig+0x410>
 8005b96:	e09a      	b.n	8005cce <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9c:	4b57      	ldr	r3, [pc, #348]	; (8005cfc <UART_SetConfig+0x574>)
 8005b9e:	0052      	lsls	r2, r2, #1
 8005ba0:	5ad3      	ldrh	r3, [r2, r3]
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ba6:	f7fa faad 	bl	8000104 <__udivsi3>
 8005baa:	0003      	movs	r3, r0
 8005bac:	005a      	lsls	r2, r3, #1
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	18d2      	adds	r2, r2, r3
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	0019      	movs	r1, r3
 8005bbc:	0010      	movs	r0, r2
 8005bbe:	f7fa faa1 	bl	8000104 <__udivsi3>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	2b0f      	cmp	r3, #15
 8005bca:	d921      	bls.n	8005c10 <UART_SetConfig+0x488>
 8005bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	025b      	lsls	r3, r3, #9
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d21c      	bcs.n	8005c10 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	200e      	movs	r0, #14
 8005bdc:	2420      	movs	r4, #32
 8005bde:	1903      	adds	r3, r0, r4
 8005be0:	19db      	adds	r3, r3, r7
 8005be2:	210f      	movs	r1, #15
 8005be4:	438a      	bics	r2, r1
 8005be6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2207      	movs	r2, #7
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	b299      	uxth	r1, r3
 8005bf4:	1903      	adds	r3, r0, r4
 8005bf6:	19db      	adds	r3, r3, r7
 8005bf8:	1902      	adds	r2, r0, r4
 8005bfa:	19d2      	adds	r2, r2, r7
 8005bfc:	8812      	ldrh	r2, [r2, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	1902      	adds	r2, r0, r4
 8005c08:	19d2      	adds	r2, r2, r7
 8005c0a:	8812      	ldrh	r2, [r2, #0]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	e05e      	b.n	8005cce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005c10:	231a      	movs	r3, #26
 8005c12:	2220      	movs	r2, #32
 8005c14:	189b      	adds	r3, r3, r2
 8005c16:	19db      	adds	r3, r3, r7
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e057      	b.n	8005cce <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c1e:	231b      	movs	r3, #27
 8005c20:	2220      	movs	r2, #32
 8005c22:	189b      	adds	r3, r3, r2
 8005c24:	19db      	adds	r3, r3, r7
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d015      	beq.n	8005c58 <UART_SetConfig+0x4d0>
 8005c2c:	dc18      	bgt.n	8005c60 <UART_SetConfig+0x4d8>
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d00d      	beq.n	8005c4e <UART_SetConfig+0x4c6>
 8005c32:	dc15      	bgt.n	8005c60 <UART_SetConfig+0x4d8>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <UART_SetConfig+0x4b6>
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d005      	beq.n	8005c48 <UART_SetConfig+0x4c0>
 8005c3c:	e010      	b.n	8005c60 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c3e:	f7ff fb7f 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 8005c42:	0003      	movs	r3, r0
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c46:	e014      	b.n	8005c72 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c48:	4b2d      	ldr	r3, [pc, #180]	; (8005d00 <UART_SetConfig+0x578>)
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c4c:	e011      	b.n	8005c72 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c4e:	f7ff faeb 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8005c52:	0003      	movs	r3, r0
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c56:	e00c      	b.n	8005c72 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c5e:	e008      	b.n	8005c72 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005c64:	231a      	movs	r3, #26
 8005c66:	2220      	movs	r2, #32
 8005c68:	189b      	adds	r3, r3, r2
 8005c6a:	19db      	adds	r3, r3, r7
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
        break;
 8005c70:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d02a      	beq.n	8005cce <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c7c:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <UART_SetConfig+0x574>)
 8005c7e:	0052      	lsls	r2, r2, #1
 8005c80:	5ad3      	ldrh	r3, [r2, r3]
 8005c82:	0019      	movs	r1, r3
 8005c84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c86:	f7fa fa3d 	bl	8000104 <__udivsi3>
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	001a      	movs	r2, r3
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	18d2      	adds	r2, r2, r3
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	0010      	movs	r0, r2
 8005c9e:	f7fa fa31 	bl	8000104 <__udivsi3>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2b0f      	cmp	r3, #15
 8005caa:	d90a      	bls.n	8005cc2 <UART_SetConfig+0x53a>
 8005cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cae:	2380      	movs	r3, #128	; 0x80
 8005cb0:	025b      	lsls	r3, r3, #9
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d205      	bcs.n	8005cc2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60da      	str	r2, [r3, #12]
 8005cc0:	e005      	b.n	8005cce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc2:	231a      	movs	r3, #26
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	189b      	adds	r3, r3, r2
 8005cc8:	19db      	adds	r3, r3, r7
 8005cca:	2201      	movs	r2, #1
 8005ccc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	226a      	movs	r2, #106	; 0x6a
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	2268      	movs	r2, #104	; 0x68
 8005cda:	2101      	movs	r1, #1
 8005cdc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005cea:	231a      	movs	r3, #26
 8005cec:	2220      	movs	r2, #32
 8005cee:	189b      	adds	r3, r3, r2
 8005cf0:	19db      	adds	r3, r3, r7
 8005cf2:	781b      	ldrb	r3, [r3, #0]
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b010      	add	sp, #64	; 0x40
 8005cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8005cfc:	0800735c 	.word	0x0800735c
 8005d00:	00f42400 	.word	0x00f42400

08005d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	2208      	movs	r2, #8
 8005d12:	4013      	ands	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4a4a      	ldr	r2, [pc, #296]	; (8005e48 <UART_AdvFeatureConfig+0x144>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	0019      	movs	r1, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	2201      	movs	r2, #1
 8005d34:	4013      	ands	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4a43      	ldr	r2, [pc, #268]	; (8005e4c <UART_AdvFeatureConfig+0x148>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	0019      	movs	r1, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	2202      	movs	r2, #2
 8005d56:	4013      	ands	r3, r2
 8005d58:	d00b      	beq.n	8005d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a3b      	ldr	r2, [pc, #236]	; (8005e50 <UART_AdvFeatureConfig+0x14c>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	0019      	movs	r1, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	2204      	movs	r2, #4
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	4a34      	ldr	r2, [pc, #208]	; (8005e54 <UART_AdvFeatureConfig+0x150>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	0019      	movs	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	2210      	movs	r2, #16
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d00b      	beq.n	8005db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	4a2c      	ldr	r2, [pc, #176]	; (8005e58 <UART_AdvFeatureConfig+0x154>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	0019      	movs	r1, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	2220      	movs	r2, #32
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d00b      	beq.n	8005dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	4a25      	ldr	r2, [pc, #148]	; (8005e5c <UART_AdvFeatureConfig+0x158>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	0019      	movs	r1, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	2240      	movs	r2, #64	; 0x40
 8005dde:	4013      	ands	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a1d      	ldr	r2, [pc, #116]	; (8005e60 <UART_AdvFeatureConfig+0x15c>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	0019      	movs	r1, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dfe:	2380      	movs	r3, #128	; 0x80
 8005e00:	035b      	lsls	r3, r3, #13
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d10b      	bne.n	8005e1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <UART_AdvFeatureConfig+0x160>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	0019      	movs	r1, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	2280      	movs	r2, #128	; 0x80
 8005e24:	4013      	ands	r3, r2
 8005e26:	d00b      	beq.n	8005e40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4a0e      	ldr	r2, [pc, #56]	; (8005e68 <UART_AdvFeatureConfig+0x164>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	0019      	movs	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }
}
 8005e40:	46c0      	nop			; (mov r8, r8)
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b002      	add	sp, #8
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	ffff7fff 	.word	0xffff7fff
 8005e4c:	fffdffff 	.word	0xfffdffff
 8005e50:	fffeffff 	.word	0xfffeffff
 8005e54:	fffbffff 	.word	0xfffbffff
 8005e58:	ffffefff 	.word	0xffffefff
 8005e5c:	ffffdfff 	.word	0xffffdfff
 8005e60:	ffefffff 	.word	0xffefffff
 8005e64:	ff9fffff 	.word	0xff9fffff
 8005e68:	fff7ffff 	.word	0xfff7ffff

08005e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b092      	sub	sp, #72	; 0x48
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2290      	movs	r2, #144	; 0x90
 8005e78:	2100      	movs	r1, #0
 8005e7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e7c:	f7fd fc48 	bl	8003710 <HAL_GetTick>
 8005e80:	0003      	movs	r3, r0
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d12d      	bne.n	8005eee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e94:	2280      	movs	r2, #128	; 0x80
 8005e96:	0391      	lsls	r1, r2, #14
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	4a47      	ldr	r2, [pc, #284]	; (8005fb8 <UART_CheckIdleState+0x14c>)
 8005e9c:	9200      	str	r2, [sp, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f000 f88e 	bl	8005fc0 <UART_WaitOnFlagUntilTimeout>
 8005ea4:	1e03      	subs	r3, r0, #0
 8005ea6:	d022      	beq.n	8005eee <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	f383 8810 	msr	PRIMASK, r3
}
 8005ebc:	46c0      	nop			; (mov r8, r8)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2180      	movs	r1, #128	; 0x80
 8005eca:	438a      	bics	r2, r1
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	f383 8810 	msr	PRIMASK, r3
}
 8005ed8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2288      	movs	r2, #136	; 0x88
 8005ede:	2120      	movs	r1, #32
 8005ee0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2284      	movs	r2, #132	; 0x84
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e060      	b.n	8005fb0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2204      	movs	r2, #4
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d146      	bne.n	8005f8a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efe:	2280      	movs	r2, #128	; 0x80
 8005f00:	03d1      	lsls	r1, r2, #15
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4a2c      	ldr	r2, [pc, #176]	; (8005fb8 <UART_CheckIdleState+0x14c>)
 8005f06:	9200      	str	r2, [sp, #0]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f000 f859 	bl	8005fc0 <UART_WaitOnFlagUntilTimeout>
 8005f0e:	1e03      	subs	r3, r0, #0
 8005f10:	d03b      	beq.n	8005f8a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f12:	f3ef 8310 	mrs	r3, PRIMASK
 8005f16:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f18:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f383 8810 	msr	PRIMASK, r3
}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4922      	ldr	r1, [pc, #136]	; (8005fbc <UART_CheckIdleState+0x150>)
 8005f34:	400a      	ands	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f383 8810 	msr	PRIMASK, r3
}
 8005f42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f44:	f3ef 8310 	mrs	r3, PRIMASK
 8005f48:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4e:	2301      	movs	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f383 8810 	msr	PRIMASK, r3
}
 8005f58:	46c0      	nop			; (mov r8, r8)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2101      	movs	r1, #1
 8005f66:	438a      	bics	r2, r1
 8005f68:	609a      	str	r2, [r3, #8]
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	f383 8810 	msr	PRIMASK, r3
}
 8005f74:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	228c      	movs	r2, #140	; 0x8c
 8005f7a:	2120      	movs	r1, #32
 8005f7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2284      	movs	r2, #132	; 0x84
 8005f82:	2100      	movs	r1, #0
 8005f84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e012      	b.n	8005fb0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2288      	movs	r2, #136	; 0x88
 8005f8e:	2120      	movs	r1, #32
 8005f90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	228c      	movs	r2, #140	; 0x8c
 8005f96:	2120      	movs	r1, #32
 8005f98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2284      	movs	r2, #132	; 0x84
 8005faa:	2100      	movs	r1, #0
 8005fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b010      	add	sp, #64	; 0x40
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	01ffffff 	.word	0x01ffffff
 8005fbc:	fffffedf 	.word	0xfffffedf

08005fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	1dfb      	adds	r3, r7, #7
 8005fce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd0:	e051      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	d04e      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd8:	f7fd fb9a 	bl	8003710 <HAL_GetTick>
 8005fdc:	0002      	movs	r2, r0
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d302      	bcc.n	8005fee <UART_WaitOnFlagUntilTimeout+0x2e>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e051      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d03b      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d038      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b40      	cmp	r3, #64	; 0x40
 8006008:	d035      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	2208      	movs	r2, #8
 8006012:	4013      	ands	r3, r2
 8006014:	2b08      	cmp	r3, #8
 8006016:	d111      	bne.n	800603c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2208      	movs	r2, #8
 800601e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	0018      	movs	r0, r3
 8006024:	f000 f83c 	bl	80060a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2290      	movs	r2, #144	; 0x90
 800602c:	2108      	movs	r1, #8
 800602e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2284      	movs	r2, #132	; 0x84
 8006034:	2100      	movs	r1, #0
 8006036:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e02c      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69da      	ldr	r2, [r3, #28]
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	401a      	ands	r2, r3
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	429a      	cmp	r2, r3
 800604e:	d112      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2280      	movs	r2, #128	; 0x80
 8006056:	0112      	lsls	r2, r2, #4
 8006058:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	0018      	movs	r0, r3
 800605e:	f000 f81f 	bl	80060a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2290      	movs	r2, #144	; 0x90
 8006066:	2120      	movs	r1, #32
 8006068:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2284      	movs	r2, #132	; 0x84
 800606e:	2100      	movs	r1, #0
 8006070:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e00f      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	425a      	negs	r2, r3
 8006086:	4153      	adcs	r3, r2
 8006088:	b2db      	uxtb	r3, r3
 800608a:	001a      	movs	r2, r3
 800608c:	1dfb      	adds	r3, r7, #7
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d09e      	beq.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b004      	add	sp, #16
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08e      	sub	sp, #56	; 0x38
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a8:	f3ef 8310 	mrs	r3, PRIMASK
 80060ac:	617b      	str	r3, [r7, #20]
  return(result);
 80060ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060b0:	637b      	str	r3, [r7, #52]	; 0x34
 80060b2:	2301      	movs	r3, #1
 80060b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	f383 8810 	msr	PRIMASK, r3
}
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4926      	ldr	r1, [pc, #152]	; (8006164 <UART_EndRxTransfer+0xc4>)
 80060ca:	400a      	ands	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f383 8810 	msr	PRIMASK, r3
}
 80060d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060da:	f3ef 8310 	mrs	r3, PRIMASK
 80060de:	623b      	str	r3, [r7, #32]
  return(result);
 80060e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060e2:	633b      	str	r3, [r7, #48]	; 0x30
 80060e4:	2301      	movs	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	f383 8810 	msr	PRIMASK, r3
}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	491b      	ldr	r1, [pc, #108]	; (8006168 <UART_EndRxTransfer+0xc8>)
 80060fc:	400a      	ands	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	f383 8810 	msr	PRIMASK, r3
}
 800610a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d118      	bne.n	8006146 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006114:	f3ef 8310 	mrs	r3, PRIMASK
 8006118:	60bb      	str	r3, [r7, #8]
  return(result);
 800611a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800611e:	2301      	movs	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f383 8810 	msr	PRIMASK, r3
}
 8006128:	46c0      	nop			; (mov r8, r8)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2110      	movs	r1, #16
 8006136:	438a      	bics	r2, r1
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f383 8810 	msr	PRIMASK, r3
}
 8006144:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	228c      	movs	r2, #140	; 0x8c
 800614a:	2120      	movs	r1, #32
 800614c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	675a      	str	r2, [r3, #116]	; 0x74
}
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	46bd      	mov	sp, r7
 800615e:	b00e      	add	sp, #56	; 0x38
 8006160:	bd80      	pop	{r7, pc}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	fffffedf 	.word	0xfffffedf
 8006168:	effffffe 	.word	0xeffffffe

0800616c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2284      	movs	r2, #132	; 0x84
 8006178:	5c9b      	ldrb	r3, [r3, r2]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_UARTEx_DisableFifoMode+0x16>
 800617e:	2302      	movs	r3, #2
 8006180:	e027      	b.n	80061d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2284      	movs	r2, #132	; 0x84
 8006186:	2101      	movs	r1, #1
 8006188:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2288      	movs	r2, #136	; 0x88
 800618e:	2124      	movs	r1, #36	; 0x24
 8006190:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2101      	movs	r1, #1
 80061a6:	438a      	bics	r2, r1
 80061a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a0b      	ldr	r2, [pc, #44]	; (80061dc <HAL_UARTEx_DisableFifoMode+0x70>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2288      	movs	r2, #136	; 0x88
 80061c4:	2120      	movs	r1, #32
 80061c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2284      	movs	r2, #132	; 0x84
 80061cc:	2100      	movs	r1, #0
 80061ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	0018      	movs	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	b004      	add	sp, #16
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	dfffffff 	.word	0xdfffffff

080061e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2284      	movs	r2, #132	; 0x84
 80061ee:	5c9b      	ldrb	r3, [r3, r2]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e02e      	b.n	8006256 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2284      	movs	r2, #132	; 0x84
 80061fc:	2101      	movs	r1, #1
 80061fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2288      	movs	r2, #136	; 0x88
 8006204:	2124      	movs	r1, #36	; 0x24
 8006206:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2101      	movs	r1, #1
 800621c:	438a      	bics	r2, r1
 800621e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	08d9      	lsrs	r1, r3, #3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	0018      	movs	r0, r3
 8006238:	f000 f854 	bl	80062e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2288      	movs	r2, #136	; 0x88
 8006248:	2120      	movs	r1, #32
 800624a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2284      	movs	r2, #132	; 0x84
 8006250:	2100      	movs	r1, #0
 8006252:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	0018      	movs	r0, r3
 8006258:	46bd      	mov	sp, r7
 800625a:	b004      	add	sp, #16
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2284      	movs	r2, #132	; 0x84
 800626e:	5c9b      	ldrb	r3, [r3, r2]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006274:	2302      	movs	r3, #2
 8006276:	e02f      	b.n	80062d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2284      	movs	r2, #132	; 0x84
 800627c:	2101      	movs	r1, #1
 800627e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2288      	movs	r2, #136	; 0x88
 8006284:	2124      	movs	r1, #36	; 0x24
 8006286:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2101      	movs	r1, #1
 800629c:	438a      	bics	r2, r1
 800629e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	4a0e      	ldr	r2, [pc, #56]	; (80062e0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	0019      	movs	r1, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	0018      	movs	r0, r3
 80062ba:	f000 f813 	bl	80062e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2288      	movs	r2, #136	; 0x88
 80062ca:	2120      	movs	r1, #32
 80062cc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2284      	movs	r2, #132	; 0x84
 80062d2:	2100      	movs	r1, #0
 80062d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	0018      	movs	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	b004      	add	sp, #16
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	f1ffffff 	.word	0xf1ffffff

080062e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d108      	bne.n	8006306 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	226a      	movs	r2, #106	; 0x6a
 80062f8:	2101      	movs	r1, #1
 80062fa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2268      	movs	r2, #104	; 0x68
 8006300:	2101      	movs	r1, #1
 8006302:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006304:	e043      	b.n	800638e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006306:	260f      	movs	r6, #15
 8006308:	19bb      	adds	r3, r7, r6
 800630a:	2208      	movs	r2, #8
 800630c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800630e:	200e      	movs	r0, #14
 8006310:	183b      	adds	r3, r7, r0
 8006312:	2208      	movs	r2, #8
 8006314:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	0e5b      	lsrs	r3, r3, #25
 800631e:	b2da      	uxtb	r2, r3
 8006320:	240d      	movs	r4, #13
 8006322:	193b      	adds	r3, r7, r4
 8006324:	2107      	movs	r1, #7
 8006326:	400a      	ands	r2, r1
 8006328:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	0f5b      	lsrs	r3, r3, #29
 8006332:	b2da      	uxtb	r2, r3
 8006334:	250c      	movs	r5, #12
 8006336:	197b      	adds	r3, r7, r5
 8006338:	2107      	movs	r1, #7
 800633a:	400a      	ands	r2, r1
 800633c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800633e:	183b      	adds	r3, r7, r0
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	197a      	adds	r2, r7, r5
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	4914      	ldr	r1, [pc, #80]	; (8006398 <UARTEx_SetNbDataToProcess+0xb4>)
 8006348:	5c8a      	ldrb	r2, [r1, r2]
 800634a:	435a      	muls	r2, r3
 800634c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800634e:	197b      	adds	r3, r7, r5
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	4a12      	ldr	r2, [pc, #72]	; (800639c <UARTEx_SetNbDataToProcess+0xb8>)
 8006354:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006356:	0019      	movs	r1, r3
 8006358:	f7f9 ff5e 	bl	8000218 <__divsi3>
 800635c:	0003      	movs	r3, r0
 800635e:	b299      	uxth	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	226a      	movs	r2, #106	; 0x6a
 8006364:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006366:	19bb      	adds	r3, r7, r6
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	193a      	adds	r2, r7, r4
 800636c:	7812      	ldrb	r2, [r2, #0]
 800636e:	490a      	ldr	r1, [pc, #40]	; (8006398 <UARTEx_SetNbDataToProcess+0xb4>)
 8006370:	5c8a      	ldrb	r2, [r1, r2]
 8006372:	435a      	muls	r2, r3
 8006374:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006376:	193b      	adds	r3, r7, r4
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	4a08      	ldr	r2, [pc, #32]	; (800639c <UARTEx_SetNbDataToProcess+0xb8>)
 800637c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800637e:	0019      	movs	r1, r3
 8006380:	f7f9 ff4a 	bl	8000218 <__divsi3>
 8006384:	0003      	movs	r3, r0
 8006386:	b299      	uxth	r1, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2268      	movs	r2, #104	; 0x68
 800638c:	5299      	strh	r1, [r3, r2]
}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	46bd      	mov	sp, r7
 8006392:	b005      	add	sp, #20
 8006394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	08007374 	.word	0x08007374
 800639c:	0800737c 	.word	0x0800737c

080063a0 <memset>:
 80063a0:	0003      	movs	r3, r0
 80063a2:	1882      	adds	r2, r0, r2
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d100      	bne.n	80063aa <memset+0xa>
 80063a8:	4770      	bx	lr
 80063aa:	7019      	strb	r1, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	e7f9      	b.n	80063a4 <memset+0x4>

080063b0 <__errno>:
 80063b0:	4b01      	ldr	r3, [pc, #4]	; (80063b8 <__errno+0x8>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	4770      	bx	lr
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	20000058 	.word	0x20000058

080063bc <__libc_init_array>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	2600      	movs	r6, #0
 80063c0:	4c0c      	ldr	r4, [pc, #48]	; (80063f4 <__libc_init_array+0x38>)
 80063c2:	4d0d      	ldr	r5, [pc, #52]	; (80063f8 <__libc_init_array+0x3c>)
 80063c4:	1b64      	subs	r4, r4, r5
 80063c6:	10a4      	asrs	r4, r4, #2
 80063c8:	42a6      	cmp	r6, r4
 80063ca:	d109      	bne.n	80063e0 <__libc_init_array+0x24>
 80063cc:	2600      	movs	r6, #0
 80063ce:	f000 ff25 	bl	800721c <_init>
 80063d2:	4c0a      	ldr	r4, [pc, #40]	; (80063fc <__libc_init_array+0x40>)
 80063d4:	4d0a      	ldr	r5, [pc, #40]	; (8006400 <__libc_init_array+0x44>)
 80063d6:	1b64      	subs	r4, r4, r5
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	42a6      	cmp	r6, r4
 80063dc:	d105      	bne.n	80063ea <__libc_init_array+0x2e>
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	00b3      	lsls	r3, r6, #2
 80063e2:	58eb      	ldr	r3, [r5, r3]
 80063e4:	4798      	blx	r3
 80063e6:	3601      	adds	r6, #1
 80063e8:	e7ee      	b.n	80063c8 <__libc_init_array+0xc>
 80063ea:	00b3      	lsls	r3, r6, #2
 80063ec:	58eb      	ldr	r3, [r5, r3]
 80063ee:	4798      	blx	r3
 80063f0:	3601      	adds	r6, #1
 80063f2:	e7f2      	b.n	80063da <__libc_init_array+0x1e>
 80063f4:	080073c0 	.word	0x080073c0
 80063f8:	080073c0 	.word	0x080073c0
 80063fc:	080073c4 	.word	0x080073c4
 8006400:	080073c0 	.word	0x080073c0

08006404 <pow>:
 8006404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006406:	0014      	movs	r4, r2
 8006408:	001d      	movs	r5, r3
 800640a:	9000      	str	r0, [sp, #0]
 800640c:	9101      	str	r1, [sp, #4]
 800640e:	f000 f86f 	bl	80064f0 <__ieee754_pow>
 8006412:	0022      	movs	r2, r4
 8006414:	0006      	movs	r6, r0
 8006416:	000f      	movs	r7, r1
 8006418:	002b      	movs	r3, r5
 800641a:	0020      	movs	r0, r4
 800641c:	0029      	movs	r1, r5
 800641e:	f7fc f839 	bl	8002494 <__aeabi_dcmpun>
 8006422:	2800      	cmp	r0, #0
 8006424:	d13f      	bne.n	80064a6 <pow+0xa2>
 8006426:	9800      	ldr	r0, [sp, #0]
 8006428:	9901      	ldr	r1, [sp, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	2300      	movs	r3, #0
 800642e:	f7f9 ffef 	bl	8000410 <__aeabi_dcmpeq>
 8006432:	2800      	cmp	r0, #0
 8006434:	d019      	beq.n	800646a <pow+0x66>
 8006436:	2200      	movs	r2, #0
 8006438:	2300      	movs	r3, #0
 800643a:	0020      	movs	r0, r4
 800643c:	0029      	movs	r1, r5
 800643e:	f7f9 ffe7 	bl	8000410 <__aeabi_dcmpeq>
 8006442:	2800      	cmp	r0, #0
 8006444:	d146      	bne.n	80064d4 <pow+0xd0>
 8006446:	0020      	movs	r0, r4
 8006448:	0029      	movs	r1, r5
 800644a:	f000 f849 	bl	80064e0 <finite>
 800644e:	2800      	cmp	r0, #0
 8006450:	d029      	beq.n	80064a6 <pow+0xa2>
 8006452:	2200      	movs	r2, #0
 8006454:	2300      	movs	r3, #0
 8006456:	0020      	movs	r0, r4
 8006458:	0029      	movs	r1, r5
 800645a:	f7f9 ffdf 	bl	800041c <__aeabi_dcmplt>
 800645e:	2800      	cmp	r0, #0
 8006460:	d021      	beq.n	80064a6 <pow+0xa2>
 8006462:	f7ff ffa5 	bl	80063b0 <__errno>
 8006466:	2322      	movs	r3, #34	; 0x22
 8006468:	e01c      	b.n	80064a4 <pow+0xa0>
 800646a:	0030      	movs	r0, r6
 800646c:	0039      	movs	r1, r7
 800646e:	f000 f837 	bl	80064e0 <finite>
 8006472:	2800      	cmp	r0, #0
 8006474:	d11b      	bne.n	80064ae <pow+0xaa>
 8006476:	9800      	ldr	r0, [sp, #0]
 8006478:	9901      	ldr	r1, [sp, #4]
 800647a:	f000 f831 	bl	80064e0 <finite>
 800647e:	2800      	cmp	r0, #0
 8006480:	d015      	beq.n	80064ae <pow+0xaa>
 8006482:	0020      	movs	r0, r4
 8006484:	0029      	movs	r1, r5
 8006486:	f000 f82b 	bl	80064e0 <finite>
 800648a:	2800      	cmp	r0, #0
 800648c:	d00f      	beq.n	80064ae <pow+0xaa>
 800648e:	0032      	movs	r2, r6
 8006490:	003b      	movs	r3, r7
 8006492:	0030      	movs	r0, r6
 8006494:	0039      	movs	r1, r7
 8006496:	f7fb fffd 	bl	8002494 <__aeabi_dcmpun>
 800649a:	2800      	cmp	r0, #0
 800649c:	d0e1      	beq.n	8006462 <pow+0x5e>
 800649e:	f7ff ff87 	bl	80063b0 <__errno>
 80064a2:	2321      	movs	r3, #33	; 0x21
 80064a4:	6003      	str	r3, [r0, #0]
 80064a6:	0030      	movs	r0, r6
 80064a8:	0039      	movs	r1, r7
 80064aa:	b003      	add	sp, #12
 80064ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	0030      	movs	r0, r6
 80064b4:	0039      	movs	r1, r7
 80064b6:	f7f9 ffab 	bl	8000410 <__aeabi_dcmpeq>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d0f3      	beq.n	80064a6 <pow+0xa2>
 80064be:	9800      	ldr	r0, [sp, #0]
 80064c0:	9901      	ldr	r1, [sp, #4]
 80064c2:	f000 f80d 	bl	80064e0 <finite>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d0ed      	beq.n	80064a6 <pow+0xa2>
 80064ca:	0020      	movs	r0, r4
 80064cc:	0029      	movs	r1, r5
 80064ce:	f000 f807 	bl	80064e0 <finite>
 80064d2:	e7c4      	b.n	800645e <pow+0x5a>
 80064d4:	2600      	movs	r6, #0
 80064d6:	4f01      	ldr	r7, [pc, #4]	; (80064dc <pow+0xd8>)
 80064d8:	e7e5      	b.n	80064a6 <pow+0xa2>
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	3ff00000 	.word	0x3ff00000

080064e0 <finite>:
 80064e0:	4b02      	ldr	r3, [pc, #8]	; (80064ec <finite+0xc>)
 80064e2:	0048      	lsls	r0, r1, #1
 80064e4:	0840      	lsrs	r0, r0, #1
 80064e6:	18c0      	adds	r0, r0, r3
 80064e8:	0fc0      	lsrs	r0, r0, #31
 80064ea:	4770      	bx	lr
 80064ec:	80100000 	.word	0x80100000

080064f0 <__ieee754_pow>:
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	b095      	sub	sp, #84	; 0x54
 80064f4:	9202      	str	r2, [sp, #8]
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	9a03      	ldr	r2, [sp, #12]
 80064fc:	9304      	str	r3, [sp, #16]
 80064fe:	9b02      	ldr	r3, [sp, #8]
 8006500:	0056      	lsls	r6, r2, #1
 8006502:	001a      	movs	r2, r3
 8006504:	0876      	lsrs	r6, r6, #1
 8006506:	0007      	movs	r7, r0
 8006508:	000d      	movs	r5, r1
 800650a:	4332      	orrs	r2, r6
 800650c:	d119      	bne.n	8006542 <__ieee754_pow+0x52>
 800650e:	2180      	movs	r1, #128	; 0x80
 8006510:	0309      	lsls	r1, r1, #12
 8006512:	4069      	eors	r1, r5
 8006514:	0002      	movs	r2, r0
 8006516:	000b      	movs	r3, r1
 8006518:	1892      	adds	r2, r2, r2
 800651a:	415b      	adcs	r3, r3
 800651c:	4989      	ldr	r1, [pc, #548]	; (8006744 <__ieee754_pow+0x254>)
 800651e:	428b      	cmp	r3, r1
 8006520:	d806      	bhi.n	8006530 <__ieee754_pow+0x40>
 8006522:	d001      	beq.n	8006528 <__ieee754_pow+0x38>
 8006524:	f000 fcb6 	bl	8006e94 <__ieee754_pow+0x9a4>
 8006528:	2a00      	cmp	r2, #0
 800652a:	d101      	bne.n	8006530 <__ieee754_pow+0x40>
 800652c:	f000 fcb2 	bl	8006e94 <__ieee754_pow+0x9a4>
 8006530:	9a02      	ldr	r2, [sp, #8]
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	0038      	movs	r0, r7
 8006536:	0029      	movs	r1, r5
 8006538:	f7fa fa0e 	bl	8000958 <__aeabi_dadd>
 800653c:	9000      	str	r0, [sp, #0]
 800653e:	9101      	str	r1, [sp, #4]
 8006540:	e0ad      	b.n	800669e <__ieee754_pow+0x1ae>
 8006542:	4a81      	ldr	r2, [pc, #516]	; (8006748 <__ieee754_pow+0x258>)
 8006544:	004c      	lsls	r4, r1, #1
 8006546:	9108      	str	r1, [sp, #32]
 8006548:	9000      	str	r0, [sp, #0]
 800654a:	0864      	lsrs	r4, r4, #1
 800654c:	4294      	cmp	r4, r2
 800654e:	dc08      	bgt.n	8006562 <__ieee754_pow+0x72>
 8006550:	d101      	bne.n	8006556 <__ieee754_pow+0x66>
 8006552:	2800      	cmp	r0, #0
 8006554:	d1ec      	bne.n	8006530 <__ieee754_pow+0x40>
 8006556:	4a7c      	ldr	r2, [pc, #496]	; (8006748 <__ieee754_pow+0x258>)
 8006558:	4296      	cmp	r6, r2
 800655a:	dc02      	bgt.n	8006562 <__ieee754_pow+0x72>
 800655c:	d10c      	bne.n	8006578 <__ieee754_pow+0x88>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <__ieee754_pow+0x88>
 8006562:	4b7a      	ldr	r3, [pc, #488]	; (800674c <__ieee754_pow+0x25c>)
 8006564:	18eb      	adds	r3, r5, r3
 8006566:	433b      	orrs	r3, r7
 8006568:	d1e2      	bne.n	8006530 <__ieee754_pow+0x40>
 800656a:	2180      	movs	r1, #128	; 0x80
 800656c:	9803      	ldr	r0, [sp, #12]
 800656e:	0309      	lsls	r1, r1, #12
 8006570:	4048      	eors	r0, r1
 8006572:	0003      	movs	r3, r0
 8006574:	9a02      	ldr	r2, [sp, #8]
 8006576:	e7cf      	b.n	8006518 <__ieee754_pow+0x28>
 8006578:	2200      	movs	r2, #0
 800657a:	9206      	str	r2, [sp, #24]
 800657c:	2d00      	cmp	r5, #0
 800657e:	da69      	bge.n	8006654 <__ieee754_pow+0x164>
 8006580:	4a73      	ldr	r2, [pc, #460]	; (8006750 <__ieee754_pow+0x260>)
 8006582:	4296      	cmp	r6, r2
 8006584:	dc64      	bgt.n	8006650 <__ieee754_pow+0x160>
 8006586:	4a73      	ldr	r2, [pc, #460]	; (8006754 <__ieee754_pow+0x264>)
 8006588:	4296      	cmp	r6, r2
 800658a:	dd11      	ble.n	80065b0 <__ieee754_pow+0xc0>
 800658c:	4972      	ldr	r1, [pc, #456]	; (8006758 <__ieee754_pow+0x268>)
 800658e:	1532      	asrs	r2, r6, #20
 8006590:	1852      	adds	r2, r2, r1
 8006592:	2a14      	cmp	r2, #20
 8006594:	dd3c      	ble.n	8006610 <__ieee754_pow+0x120>
 8006596:	2134      	movs	r1, #52	; 0x34
 8006598:	1a89      	subs	r1, r1, r2
 800659a:	9a02      	ldr	r2, [sp, #8]
 800659c:	40ca      	lsrs	r2, r1
 800659e:	0010      	movs	r0, r2
 80065a0:	4088      	lsls	r0, r1
 80065a2:	4298      	cmp	r0, r3
 80065a4:	d104      	bne.n	80065b0 <__ieee754_pow+0xc0>
 80065a6:	2101      	movs	r1, #1
 80065a8:	400a      	ands	r2, r1
 80065aa:	1849      	adds	r1, r1, r1
 80065ac:	1a8a      	subs	r2, r1, r2
 80065ae:	9206      	str	r2, [sp, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d03c      	beq.n	800662e <__ieee754_pow+0x13e>
 80065b4:	0038      	movs	r0, r7
 80065b6:	0029      	movs	r1, r5
 80065b8:	f000 fca4 	bl	8006f04 <fabs>
 80065bc:	9000      	str	r0, [sp, #0]
 80065be:	9101      	str	r1, [sp, #4]
 80065c0:	2f00      	cmp	r7, #0
 80065c2:	d000      	beq.n	80065c6 <__ieee754_pow+0xd6>
 80065c4:	e094      	b.n	80066f0 <__ieee754_pow+0x200>
 80065c6:	2c00      	cmp	r4, #0
 80065c8:	d005      	beq.n	80065d6 <__ieee754_pow+0xe6>
 80065ca:	4a64      	ldr	r2, [pc, #400]	; (800675c <__ieee754_pow+0x26c>)
 80065cc:	00ab      	lsls	r3, r5, #2
 80065ce:	089b      	lsrs	r3, r3, #2
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d000      	beq.n	80065d6 <__ieee754_pow+0xe6>
 80065d4:	e08c      	b.n	80066f0 <__ieee754_pow+0x200>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	da07      	bge.n	80065ec <__ieee754_pow+0xfc>
 80065dc:	9a00      	ldr	r2, [sp, #0]
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	2000      	movs	r0, #0
 80065e2:	495e      	ldr	r1, [pc, #376]	; (800675c <__ieee754_pow+0x26c>)
 80065e4:	f7fa fd18 	bl	8001018 <__aeabi_ddiv>
 80065e8:	9000      	str	r0, [sp, #0]
 80065ea:	9101      	str	r1, [sp, #4]
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	da55      	bge.n	800669e <__ieee754_pow+0x1ae>
 80065f2:	4b56      	ldr	r3, [pc, #344]	; (800674c <__ieee754_pow+0x25c>)
 80065f4:	18e4      	adds	r4, r4, r3
 80065f6:	9b06      	ldr	r3, [sp, #24]
 80065f8:	431c      	orrs	r4, r3
 80065fa:	d000      	beq.n	80065fe <__ieee754_pow+0x10e>
 80065fc:	e06c      	b.n	80066d8 <__ieee754_pow+0x1e8>
 80065fe:	9a00      	ldr	r2, [sp, #0]
 8006600:	9b01      	ldr	r3, [sp, #4]
 8006602:	0010      	movs	r0, r2
 8006604:	0019      	movs	r1, r3
 8006606:	f7fb fbc3 	bl	8001d90 <__aeabi_dsub>
 800660a:	0002      	movs	r2, r0
 800660c:	000b      	movs	r3, r1
 800660e:	e01c      	b.n	800664a <__ieee754_pow+0x15a>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1cf      	bne.n	80065b4 <__ieee754_pow+0xc4>
 8006614:	3314      	adds	r3, #20
 8006616:	1a9a      	subs	r2, r3, r2
 8006618:	0033      	movs	r3, r6
 800661a:	4113      	asrs	r3, r2
 800661c:	0019      	movs	r1, r3
 800661e:	4091      	lsls	r1, r2
 8006620:	42b1      	cmp	r1, r6
 8006622:	d104      	bne.n	800662e <__ieee754_pow+0x13e>
 8006624:	2201      	movs	r2, #1
 8006626:	4013      	ands	r3, r2
 8006628:	1892      	adds	r2, r2, r2
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	9306      	str	r3, [sp, #24]
 800662e:	4b4b      	ldr	r3, [pc, #300]	; (800675c <__ieee754_pow+0x26c>)
 8006630:	429e      	cmp	r6, r3
 8006632:	d138      	bne.n	80066a6 <__ieee754_pow+0x1b6>
 8006634:	0038      	movs	r0, r7
 8006636:	0029      	movs	r1, r5
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	9000      	str	r0, [sp, #0]
 800663c:	9101      	str	r1, [sp, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	da2d      	bge.n	800669e <__ieee754_pow+0x1ae>
 8006642:	003a      	movs	r2, r7
 8006644:	002b      	movs	r3, r5
 8006646:	2000      	movs	r0, #0
 8006648:	4944      	ldr	r1, [pc, #272]	; (800675c <__ieee754_pow+0x26c>)
 800664a:	f7fa fce5 	bl	8001018 <__aeabi_ddiv>
 800664e:	e775      	b.n	800653c <__ieee754_pow+0x4c>
 8006650:	2202      	movs	r2, #2
 8006652:	9206      	str	r2, [sp, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ad      	bne.n	80065b4 <__ieee754_pow+0xc4>
 8006658:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <__ieee754_pow+0x258>)
 800665a:	429e      	cmp	r6, r3
 800665c:	d1e7      	bne.n	800662e <__ieee754_pow+0x13e>
 800665e:	4b3b      	ldr	r3, [pc, #236]	; (800674c <__ieee754_pow+0x25c>)
 8006660:	18e3      	adds	r3, r4, r3
 8006662:	433b      	orrs	r3, r7
 8006664:	d101      	bne.n	800666a <__ieee754_pow+0x17a>
 8006666:	f000 fc15 	bl	8006e94 <__ieee754_pow+0x9a4>
 800666a:	4b3a      	ldr	r3, [pc, #232]	; (8006754 <__ieee754_pow+0x264>)
 800666c:	429c      	cmp	r4, r3
 800666e:	dd09      	ble.n	8006684 <__ieee754_pow+0x194>
 8006670:	9b04      	ldr	r3, [sp, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	da01      	bge.n	800667a <__ieee754_pow+0x18a>
 8006676:	f000 fc11 	bl	8006e9c <__ieee754_pow+0x9ac>
 800667a:	9b02      	ldr	r3, [sp, #8]
 800667c:	9c03      	ldr	r4, [sp, #12]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	9401      	str	r4, [sp, #4]
 8006682:	e00c      	b.n	800669e <__ieee754_pow+0x1ae>
 8006684:	9b04      	ldr	r3, [sp, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	db01      	blt.n	800668e <__ieee754_pow+0x19e>
 800668a:	f000 fc07 	bl	8006e9c <__ieee754_pow+0x9ac>
 800668e:	2280      	movs	r2, #128	; 0x80
 8006690:	0612      	lsls	r2, r2, #24
 8006692:	4694      	mov	ip, r2
 8006694:	9b02      	ldr	r3, [sp, #8]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	4463      	add	r3, ip
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	9800      	ldr	r0, [sp, #0]
 80066a0:	9901      	ldr	r1, [sp, #4]
 80066a2:	b015      	add	sp, #84	; 0x54
 80066a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a6:	2380      	movs	r3, #128	; 0x80
 80066a8:	9a04      	ldr	r2, [sp, #16]
 80066aa:	05db      	lsls	r3, r3, #23
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d106      	bne.n	80066be <__ieee754_pow+0x1ce>
 80066b0:	003a      	movs	r2, r7
 80066b2:	002b      	movs	r3, r5
 80066b4:	0038      	movs	r0, r7
 80066b6:	0029      	movs	r1, r5
 80066b8:	f7fb f8a8 	bl	800180c <__aeabi_dmul>
 80066bc:	e73e      	b.n	800653c <__ieee754_pow+0x4c>
 80066be:	4b28      	ldr	r3, [pc, #160]	; (8006760 <__ieee754_pow+0x270>)
 80066c0:	9a04      	ldr	r2, [sp, #16]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d000      	beq.n	80066c8 <__ieee754_pow+0x1d8>
 80066c6:	e775      	b.n	80065b4 <__ieee754_pow+0xc4>
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	da00      	bge.n	80066ce <__ieee754_pow+0x1de>
 80066cc:	e772      	b.n	80065b4 <__ieee754_pow+0xc4>
 80066ce:	0038      	movs	r0, r7
 80066d0:	0029      	movs	r1, r5
 80066d2:	f000 fcb7 	bl	8007044 <__ieee754_sqrt>
 80066d6:	e731      	b.n	800653c <__ieee754_pow+0x4c>
 80066d8:	9b06      	ldr	r3, [sp, #24]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d1df      	bne.n	800669e <__ieee754_pow+0x1ae>
 80066de:	9800      	ldr	r0, [sp, #0]
 80066e0:	2180      	movs	r1, #128	; 0x80
 80066e2:	0002      	movs	r2, r0
 80066e4:	9801      	ldr	r0, [sp, #4]
 80066e6:	0609      	lsls	r1, r1, #24
 80066e8:	1843      	adds	r3, r0, r1
 80066ea:	9200      	str	r2, [sp, #0]
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	e7d6      	b.n	800669e <__ieee754_pow+0x1ae>
 80066f0:	0feb      	lsrs	r3, r5, #31
 80066f2:	3b01      	subs	r3, #1
 80066f4:	930e      	str	r3, [sp, #56]	; 0x38
 80066f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066f8:	9b06      	ldr	r3, [sp, #24]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	d104      	bne.n	8006708 <__ieee754_pow+0x218>
 80066fe:	003a      	movs	r2, r7
 8006700:	002b      	movs	r3, r5
 8006702:	0038      	movs	r0, r7
 8006704:	0029      	movs	r1, r5
 8006706:	e77e      	b.n	8006606 <__ieee754_pow+0x116>
 8006708:	4b16      	ldr	r3, [pc, #88]	; (8006764 <__ieee754_pow+0x274>)
 800670a:	429e      	cmp	r6, r3
 800670c:	dc00      	bgt.n	8006710 <__ieee754_pow+0x220>
 800670e:	e0f1      	b.n	80068f4 <__ieee754_pow+0x404>
 8006710:	4b15      	ldr	r3, [pc, #84]	; (8006768 <__ieee754_pow+0x278>)
 8006712:	429e      	cmp	r6, r3
 8006714:	dd09      	ble.n	800672a <__ieee754_pow+0x23a>
 8006716:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <__ieee754_pow+0x264>)
 8006718:	429c      	cmp	r4, r3
 800671a:	dc0c      	bgt.n	8006736 <__ieee754_pow+0x246>
 800671c:	9b04      	ldr	r3, [sp, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	da0c      	bge.n	800673c <__ieee754_pow+0x24c>
 8006722:	2000      	movs	r0, #0
 8006724:	f000 fc86 	bl	8007034 <__math_oflow>
 8006728:	e708      	b.n	800653c <__ieee754_pow+0x4c>
 800672a:	4b10      	ldr	r3, [pc, #64]	; (800676c <__ieee754_pow+0x27c>)
 800672c:	429c      	cmp	r4, r3
 800672e:	ddf5      	ble.n	800671c <__ieee754_pow+0x22c>
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <__ieee754_pow+0x26c>)
 8006732:	429c      	cmp	r4, r3
 8006734:	dd1c      	ble.n	8006770 <__ieee754_pow+0x280>
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	dcf2      	bgt.n	8006722 <__ieee754_pow+0x232>
 800673c:	2000      	movs	r0, #0
 800673e:	f000 fc72 	bl	8007026 <__math_uflow>
 8006742:	e6fb      	b.n	800653c <__ieee754_pow+0x4c>
 8006744:	fff00000 	.word	0xfff00000
 8006748:	7ff00000 	.word	0x7ff00000
 800674c:	c0100000 	.word	0xc0100000
 8006750:	433fffff 	.word	0x433fffff
 8006754:	3fefffff 	.word	0x3fefffff
 8006758:	fffffc01 	.word	0xfffffc01
 800675c:	3ff00000 	.word	0x3ff00000
 8006760:	3fe00000 	.word	0x3fe00000
 8006764:	41e00000 	.word	0x41e00000
 8006768:	43f00000 	.word	0x43f00000
 800676c:	3feffffe 	.word	0x3feffffe
 8006770:	2200      	movs	r2, #0
 8006772:	9800      	ldr	r0, [sp, #0]
 8006774:	9901      	ldr	r1, [sp, #4]
 8006776:	4b53      	ldr	r3, [pc, #332]	; (80068c4 <__ieee754_pow+0x3d4>)
 8006778:	f7fb fb0a 	bl	8001d90 <__aeabi_dsub>
 800677c:	22c0      	movs	r2, #192	; 0xc0
 800677e:	4b52      	ldr	r3, [pc, #328]	; (80068c8 <__ieee754_pow+0x3d8>)
 8006780:	05d2      	lsls	r2, r2, #23
 8006782:	0004      	movs	r4, r0
 8006784:	000d      	movs	r5, r1
 8006786:	f7fb f841 	bl	800180c <__aeabi_dmul>
 800678a:	4a50      	ldr	r2, [pc, #320]	; (80068cc <__ieee754_pow+0x3dc>)
 800678c:	0006      	movs	r6, r0
 800678e:	000f      	movs	r7, r1
 8006790:	0020      	movs	r0, r4
 8006792:	0029      	movs	r1, r5
 8006794:	4b4e      	ldr	r3, [pc, #312]	; (80068d0 <__ieee754_pow+0x3e0>)
 8006796:	f7fb f839 	bl	800180c <__aeabi_dmul>
 800679a:	2200      	movs	r2, #0
 800679c:	9000      	str	r0, [sp, #0]
 800679e:	9101      	str	r1, [sp, #4]
 80067a0:	4b4c      	ldr	r3, [pc, #304]	; (80068d4 <__ieee754_pow+0x3e4>)
 80067a2:	0020      	movs	r0, r4
 80067a4:	0029      	movs	r1, r5
 80067a6:	f7fb f831 	bl	800180c <__aeabi_dmul>
 80067aa:	0002      	movs	r2, r0
 80067ac:	000b      	movs	r3, r1
 80067ae:	484a      	ldr	r0, [pc, #296]	; (80068d8 <__ieee754_pow+0x3e8>)
 80067b0:	494a      	ldr	r1, [pc, #296]	; (80068dc <__ieee754_pow+0x3ec>)
 80067b2:	f7fb faed 	bl	8001d90 <__aeabi_dsub>
 80067b6:	0022      	movs	r2, r4
 80067b8:	002b      	movs	r3, r5
 80067ba:	f7fb f827 	bl	800180c <__aeabi_dmul>
 80067be:	0002      	movs	r2, r0
 80067c0:	000b      	movs	r3, r1
 80067c2:	2000      	movs	r0, #0
 80067c4:	4946      	ldr	r1, [pc, #280]	; (80068e0 <__ieee754_pow+0x3f0>)
 80067c6:	f7fb fae3 	bl	8001d90 <__aeabi_dsub>
 80067ca:	0022      	movs	r2, r4
 80067cc:	002b      	movs	r3, r5
 80067ce:	9004      	str	r0, [sp, #16]
 80067d0:	9105      	str	r1, [sp, #20]
 80067d2:	0020      	movs	r0, r4
 80067d4:	0029      	movs	r1, r5
 80067d6:	f7fb f819 	bl	800180c <__aeabi_dmul>
 80067da:	0002      	movs	r2, r0
 80067dc:	000b      	movs	r3, r1
 80067de:	9804      	ldr	r0, [sp, #16]
 80067e0:	9905      	ldr	r1, [sp, #20]
 80067e2:	f7fb f813 	bl	800180c <__aeabi_dmul>
 80067e6:	4a3f      	ldr	r2, [pc, #252]	; (80068e4 <__ieee754_pow+0x3f4>)
 80067e8:	4b37      	ldr	r3, [pc, #220]	; (80068c8 <__ieee754_pow+0x3d8>)
 80067ea:	f7fb f80f 	bl	800180c <__aeabi_dmul>
 80067ee:	0002      	movs	r2, r0
 80067f0:	000b      	movs	r3, r1
 80067f2:	9800      	ldr	r0, [sp, #0]
 80067f4:	9901      	ldr	r1, [sp, #4]
 80067f6:	f7fb facb 	bl	8001d90 <__aeabi_dsub>
 80067fa:	0002      	movs	r2, r0
 80067fc:	000b      	movs	r3, r1
 80067fe:	0004      	movs	r4, r0
 8006800:	000d      	movs	r5, r1
 8006802:	0030      	movs	r0, r6
 8006804:	0039      	movs	r1, r7
 8006806:	f7fa f8a7 	bl	8000958 <__aeabi_dadd>
 800680a:	2000      	movs	r0, #0
 800680c:	0032      	movs	r2, r6
 800680e:	003b      	movs	r3, r7
 8006810:	9004      	str	r0, [sp, #16]
 8006812:	9105      	str	r1, [sp, #20]
 8006814:	f7fb fabc 	bl	8001d90 <__aeabi_dsub>
 8006818:	0002      	movs	r2, r0
 800681a:	000b      	movs	r3, r1
 800681c:	0020      	movs	r0, r4
 800681e:	0029      	movs	r1, r5
 8006820:	f7fb fab6 	bl	8001d90 <__aeabi_dsub>
 8006824:	9b06      	ldr	r3, [sp, #24]
 8006826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006828:	3b01      	subs	r3, #1
 800682a:	0006      	movs	r6, r0
 800682c:	000f      	movs	r7, r1
 800682e:	4313      	orrs	r3, r2
 8006830:	d000      	beq.n	8006834 <__ieee754_pow+0x344>
 8006832:	e1dc      	b.n	8006bee <__ieee754_pow+0x6fe>
 8006834:	2300      	movs	r3, #0
 8006836:	4c2c      	ldr	r4, [pc, #176]	; (80068e8 <__ieee754_pow+0x3f8>)
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	9401      	str	r4, [sp, #4]
 800683c:	9c02      	ldr	r4, [sp, #8]
 800683e:	9d03      	ldr	r5, [sp, #12]
 8006840:	9802      	ldr	r0, [sp, #8]
 8006842:	9903      	ldr	r1, [sp, #12]
 8006844:	2400      	movs	r4, #0
 8006846:	002b      	movs	r3, r5
 8006848:	0022      	movs	r2, r4
 800684a:	f7fb faa1 	bl	8001d90 <__aeabi_dsub>
 800684e:	9a04      	ldr	r2, [sp, #16]
 8006850:	9b05      	ldr	r3, [sp, #20]
 8006852:	f7fa ffdb 	bl	800180c <__aeabi_dmul>
 8006856:	9a02      	ldr	r2, [sp, #8]
 8006858:	9b03      	ldr	r3, [sp, #12]
 800685a:	9006      	str	r0, [sp, #24]
 800685c:	9107      	str	r1, [sp, #28]
 800685e:	0030      	movs	r0, r6
 8006860:	0039      	movs	r1, r7
 8006862:	f7fa ffd3 	bl	800180c <__aeabi_dmul>
 8006866:	0002      	movs	r2, r0
 8006868:	000b      	movs	r3, r1
 800686a:	9806      	ldr	r0, [sp, #24]
 800686c:	9907      	ldr	r1, [sp, #28]
 800686e:	f7fa f873 	bl	8000958 <__aeabi_dadd>
 8006872:	0022      	movs	r2, r4
 8006874:	002b      	movs	r3, r5
 8006876:	0006      	movs	r6, r0
 8006878:	000f      	movs	r7, r1
 800687a:	9804      	ldr	r0, [sp, #16]
 800687c:	9905      	ldr	r1, [sp, #20]
 800687e:	f7fa ffc5 	bl	800180c <__aeabi_dmul>
 8006882:	0003      	movs	r3, r0
 8006884:	000c      	movs	r4, r1
 8006886:	9004      	str	r0, [sp, #16]
 8006888:	9105      	str	r1, [sp, #20]
 800688a:	9306      	str	r3, [sp, #24]
 800688c:	9407      	str	r4, [sp, #28]
 800688e:	0002      	movs	r2, r0
 8006890:	000b      	movs	r3, r1
 8006892:	0030      	movs	r0, r6
 8006894:	0039      	movs	r1, r7
 8006896:	f7fa f85f 	bl	8000958 <__aeabi_dadd>
 800689a:	4b14      	ldr	r3, [pc, #80]	; (80068ec <__ieee754_pow+0x3fc>)
 800689c:	0005      	movs	r5, r0
 800689e:	000c      	movs	r4, r1
 80068a0:	9108      	str	r1, [sp, #32]
 80068a2:	4299      	cmp	r1, r3
 80068a4:	dc00      	bgt.n	80068a8 <__ieee754_pow+0x3b8>
 80068a6:	e2d4      	b.n	8006e52 <__ieee754_pow+0x962>
 80068a8:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <__ieee754_pow+0x400>)
 80068aa:	18cb      	adds	r3, r1, r3
 80068ac:	4303      	orrs	r3, r0
 80068ae:	d100      	bne.n	80068b2 <__ieee754_pow+0x3c2>
 80068b0:	e1d6      	b.n	8006c60 <__ieee754_pow+0x770>
 80068b2:	9800      	ldr	r0, [sp, #0]
 80068b4:	9901      	ldr	r1, [sp, #4]
 80068b6:	2300      	movs	r3, #0
 80068b8:	2200      	movs	r2, #0
 80068ba:	f7f9 fdaf 	bl	800041c <__aeabi_dcmplt>
 80068be:	1e43      	subs	r3, r0, #1
 80068c0:	4198      	sbcs	r0, r3
 80068c2:	e72f      	b.n	8006724 <__ieee754_pow+0x234>
 80068c4:	3ff00000 	.word	0x3ff00000
 80068c8:	3ff71547 	.word	0x3ff71547
 80068cc:	f85ddf44 	.word	0xf85ddf44
 80068d0:	3e54ae0b 	.word	0x3e54ae0b
 80068d4:	3fd00000 	.word	0x3fd00000
 80068d8:	55555555 	.word	0x55555555
 80068dc:	3fd55555 	.word	0x3fd55555
 80068e0:	3fe00000 	.word	0x3fe00000
 80068e4:	652b82fe 	.word	0x652b82fe
 80068e8:	bff00000 	.word	0xbff00000
 80068ec:	408fffff 	.word	0x408fffff
 80068f0:	bf700000 	.word	0xbf700000
 80068f4:	4bbf      	ldr	r3, [pc, #764]	; (8006bf4 <__ieee754_pow+0x704>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	422b      	tst	r3, r5
 80068fa:	d10a      	bne.n	8006912 <__ieee754_pow+0x422>
 80068fc:	9800      	ldr	r0, [sp, #0]
 80068fe:	9901      	ldr	r1, [sp, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	4bbd      	ldr	r3, [pc, #756]	; (8006bf8 <__ieee754_pow+0x708>)
 8006904:	f7fa ff82 	bl	800180c <__aeabi_dmul>
 8006908:	2235      	movs	r2, #53	; 0x35
 800690a:	9000      	str	r0, [sp, #0]
 800690c:	9101      	str	r1, [sp, #4]
 800690e:	9c01      	ldr	r4, [sp, #4]
 8006910:	4252      	negs	r2, r2
 8006912:	49ba      	ldr	r1, [pc, #744]	; (8006bfc <__ieee754_pow+0x70c>)
 8006914:	1523      	asrs	r3, r4, #20
 8006916:	185b      	adds	r3, r3, r1
 8006918:	189b      	adds	r3, r3, r2
 800691a:	0324      	lsls	r4, r4, #12
 800691c:	4db8      	ldr	r5, [pc, #736]	; (8006c00 <__ieee754_pow+0x710>)
 800691e:	930d      	str	r3, [sp, #52]	; 0x34
 8006920:	4bb8      	ldr	r3, [pc, #736]	; (8006c04 <__ieee754_pow+0x714>)
 8006922:	0b22      	lsrs	r2, r4, #12
 8006924:	4315      	orrs	r5, r2
 8006926:	2400      	movs	r4, #0
 8006928:	429a      	cmp	r2, r3
 800692a:	dd09      	ble.n	8006940 <__ieee754_pow+0x450>
 800692c:	4bb6      	ldr	r3, [pc, #728]	; (8006c08 <__ieee754_pow+0x718>)
 800692e:	3401      	adds	r4, #1
 8006930:	429a      	cmp	r2, r3
 8006932:	dd05      	ble.n	8006940 <__ieee754_pow+0x450>
 8006934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006936:	191b      	adds	r3, r3, r4
 8006938:	2400      	movs	r4, #0
 800693a:	930d      	str	r3, [sp, #52]	; 0x34
 800693c:	4bb3      	ldr	r3, [pc, #716]	; (8006c0c <__ieee754_pow+0x71c>)
 800693e:	18ed      	adds	r5, r5, r3
 8006940:	4bb3      	ldr	r3, [pc, #716]	; (8006c10 <__ieee754_pow+0x720>)
 8006942:	00e2      	lsls	r2, r4, #3
 8006944:	189b      	adds	r3, r3, r2
 8006946:	9800      	ldr	r0, [sp, #0]
 8006948:	9901      	ldr	r1, [sp, #4]
 800694a:	920f      	str	r2, [sp, #60]	; 0x3c
 800694c:	0029      	movs	r1, r5
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	0006      	movs	r6, r0
 8006954:	920a      	str	r2, [sp, #40]	; 0x28
 8006956:	930b      	str	r3, [sp, #44]	; 0x2c
 8006958:	f7fb fa1a 	bl	8001d90 <__aeabi_dsub>
 800695c:	0032      	movs	r2, r6
 800695e:	002b      	movs	r3, r5
 8006960:	9010      	str	r0, [sp, #64]	; 0x40
 8006962:	9111      	str	r1, [sp, #68]	; 0x44
 8006964:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006968:	f7f9 fff6 	bl	8000958 <__aeabi_dadd>
 800696c:	0002      	movs	r2, r0
 800696e:	000b      	movs	r3, r1
 8006970:	2000      	movs	r0, #0
 8006972:	49a3      	ldr	r1, [pc, #652]	; (8006c00 <__ieee754_pow+0x710>)
 8006974:	f7fa fb50 	bl	8001018 <__aeabi_ddiv>
 8006978:	0002      	movs	r2, r0
 800697a:	000b      	movs	r3, r1
 800697c:	9012      	str	r0, [sp, #72]	; 0x48
 800697e:	9113      	str	r1, [sp, #76]	; 0x4c
 8006980:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006982:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006984:	f7fa ff42 	bl	800180c <__aeabi_dmul>
 8006988:	9008      	str	r0, [sp, #32]
 800698a:	9109      	str	r1, [sp, #36]	; 0x24
 800698c:	9a08      	ldr	r2, [sp, #32]
 800698e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006990:	9204      	str	r2, [sp, #16]
 8006992:	9305      	str	r3, [sp, #20]
 8006994:	2300      	movs	r3, #0
 8006996:	2180      	movs	r1, #128	; 0x80
 8006998:	2080      	movs	r0, #128	; 0x80
 800699a:	9304      	str	r3, [sp, #16]
 800699c:	9a04      	ldr	r2, [sp, #16]
 800699e:	9b05      	ldr	r3, [sp, #20]
 80069a0:	9200      	str	r2, [sp, #0]
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	002f      	movs	r7, r5
 80069a8:	0589      	lsls	r1, r1, #22
 80069aa:	106d      	asrs	r5, r5, #1
 80069ac:	4329      	orrs	r1, r5
 80069ae:	0300      	lsls	r0, r0, #12
 80069b0:	1809      	adds	r1, r1, r0
 80069b2:	04a0      	lsls	r0, r4, #18
 80069b4:	180b      	adds	r3, r1, r0
 80069b6:	9800      	ldr	r0, [sp, #0]
 80069b8:	9901      	ldr	r1, [sp, #4]
 80069ba:	0014      	movs	r4, r2
 80069bc:	001d      	movs	r5, r3
 80069be:	f7fa ff25 	bl	800180c <__aeabi_dmul>
 80069c2:	0002      	movs	r2, r0
 80069c4:	000b      	movs	r3, r1
 80069c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80069c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069ca:	f7fb f9e1 	bl	8001d90 <__aeabi_dsub>
 80069ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d2:	9010      	str	r0, [sp, #64]	; 0x40
 80069d4:	9111      	str	r1, [sp, #68]	; 0x44
 80069d6:	0020      	movs	r0, r4
 80069d8:	0029      	movs	r1, r5
 80069da:	f7fb f9d9 	bl	8001d90 <__aeabi_dsub>
 80069de:	0002      	movs	r2, r0
 80069e0:	000b      	movs	r3, r1
 80069e2:	0030      	movs	r0, r6
 80069e4:	0039      	movs	r1, r7
 80069e6:	f7fb f9d3 	bl	8001d90 <__aeabi_dsub>
 80069ea:	9a00      	ldr	r2, [sp, #0]
 80069ec:	9b01      	ldr	r3, [sp, #4]
 80069ee:	f7fa ff0d 	bl	800180c <__aeabi_dmul>
 80069f2:	0002      	movs	r2, r0
 80069f4:	000b      	movs	r3, r1
 80069f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80069f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069fa:	f7fb f9c9 	bl	8001d90 <__aeabi_dsub>
 80069fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a02:	f7fa ff03 	bl	800180c <__aeabi_dmul>
 8006a06:	9a08      	ldr	r2, [sp, #32]
 8006a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0a:	900a      	str	r0, [sp, #40]	; 0x28
 8006a0c:	910b      	str	r1, [sp, #44]	; 0x2c
 8006a0e:	0010      	movs	r0, r2
 8006a10:	0019      	movs	r1, r3
 8006a12:	f7fa fefb 	bl	800180c <__aeabi_dmul>
 8006a16:	0006      	movs	r6, r0
 8006a18:	000f      	movs	r7, r1
 8006a1a:	4a7e      	ldr	r2, [pc, #504]	; (8006c14 <__ieee754_pow+0x724>)
 8006a1c:	4b7e      	ldr	r3, [pc, #504]	; (8006c18 <__ieee754_pow+0x728>)
 8006a1e:	f7fa fef5 	bl	800180c <__aeabi_dmul>
 8006a22:	4a7e      	ldr	r2, [pc, #504]	; (8006c1c <__ieee754_pow+0x72c>)
 8006a24:	4b7e      	ldr	r3, [pc, #504]	; (8006c20 <__ieee754_pow+0x730>)
 8006a26:	f7f9 ff97 	bl	8000958 <__aeabi_dadd>
 8006a2a:	0032      	movs	r2, r6
 8006a2c:	003b      	movs	r3, r7
 8006a2e:	f7fa feed 	bl	800180c <__aeabi_dmul>
 8006a32:	4a7c      	ldr	r2, [pc, #496]	; (8006c24 <__ieee754_pow+0x734>)
 8006a34:	4b7c      	ldr	r3, [pc, #496]	; (8006c28 <__ieee754_pow+0x738>)
 8006a36:	f7f9 ff8f 	bl	8000958 <__aeabi_dadd>
 8006a3a:	0032      	movs	r2, r6
 8006a3c:	003b      	movs	r3, r7
 8006a3e:	f7fa fee5 	bl	800180c <__aeabi_dmul>
 8006a42:	4a7a      	ldr	r2, [pc, #488]	; (8006c2c <__ieee754_pow+0x73c>)
 8006a44:	4b7a      	ldr	r3, [pc, #488]	; (8006c30 <__ieee754_pow+0x740>)
 8006a46:	f7f9 ff87 	bl	8000958 <__aeabi_dadd>
 8006a4a:	0032      	movs	r2, r6
 8006a4c:	003b      	movs	r3, r7
 8006a4e:	f7fa fedd 	bl	800180c <__aeabi_dmul>
 8006a52:	4a78      	ldr	r2, [pc, #480]	; (8006c34 <__ieee754_pow+0x744>)
 8006a54:	4b78      	ldr	r3, [pc, #480]	; (8006c38 <__ieee754_pow+0x748>)
 8006a56:	f7f9 ff7f 	bl	8000958 <__aeabi_dadd>
 8006a5a:	0032      	movs	r2, r6
 8006a5c:	003b      	movs	r3, r7
 8006a5e:	f7fa fed5 	bl	800180c <__aeabi_dmul>
 8006a62:	4a76      	ldr	r2, [pc, #472]	; (8006c3c <__ieee754_pow+0x74c>)
 8006a64:	4b76      	ldr	r3, [pc, #472]	; (8006c40 <__ieee754_pow+0x750>)
 8006a66:	f7f9 ff77 	bl	8000958 <__aeabi_dadd>
 8006a6a:	0032      	movs	r2, r6
 8006a6c:	0004      	movs	r4, r0
 8006a6e:	000d      	movs	r5, r1
 8006a70:	003b      	movs	r3, r7
 8006a72:	0030      	movs	r0, r6
 8006a74:	0039      	movs	r1, r7
 8006a76:	f7fa fec9 	bl	800180c <__aeabi_dmul>
 8006a7a:	0002      	movs	r2, r0
 8006a7c:	000b      	movs	r3, r1
 8006a7e:	0020      	movs	r0, r4
 8006a80:	0029      	movs	r1, r5
 8006a82:	f7fa fec3 	bl	800180c <__aeabi_dmul>
 8006a86:	9a00      	ldr	r2, [sp, #0]
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	0004      	movs	r4, r0
 8006a8c:	000d      	movs	r5, r1
 8006a8e:	9808      	ldr	r0, [sp, #32]
 8006a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a92:	f7f9 ff61 	bl	8000958 <__aeabi_dadd>
 8006a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a9a:	f7fa feb7 	bl	800180c <__aeabi_dmul>
 8006a9e:	0022      	movs	r2, r4
 8006aa0:	002b      	movs	r3, r5
 8006aa2:	f7f9 ff59 	bl	8000958 <__aeabi_dadd>
 8006aa6:	9a00      	ldr	r2, [sp, #0]
 8006aa8:	9b01      	ldr	r3, [sp, #4]
 8006aaa:	9010      	str	r0, [sp, #64]	; 0x40
 8006aac:	9111      	str	r1, [sp, #68]	; 0x44
 8006aae:	0010      	movs	r0, r2
 8006ab0:	0019      	movs	r1, r3
 8006ab2:	f7fa feab 	bl	800180c <__aeabi_dmul>
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4b62      	ldr	r3, [pc, #392]	; (8006c44 <__ieee754_pow+0x754>)
 8006aba:	0004      	movs	r4, r0
 8006abc:	000d      	movs	r5, r1
 8006abe:	f7f9 ff4b 	bl	8000958 <__aeabi_dadd>
 8006ac2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ac6:	f7f9 ff47 	bl	8000958 <__aeabi_dadd>
 8006aca:	2000      	movs	r0, #0
 8006acc:	000f      	movs	r7, r1
 8006ace:	0006      	movs	r6, r0
 8006ad0:	0002      	movs	r2, r0
 8006ad2:	000b      	movs	r3, r1
 8006ad4:	9800      	ldr	r0, [sp, #0]
 8006ad6:	9901      	ldr	r1, [sp, #4]
 8006ad8:	f7fa fe98 	bl	800180c <__aeabi_dmul>
 8006adc:	2200      	movs	r2, #0
 8006ade:	9000      	str	r0, [sp, #0]
 8006ae0:	9101      	str	r1, [sp, #4]
 8006ae2:	4b58      	ldr	r3, [pc, #352]	; (8006c44 <__ieee754_pow+0x754>)
 8006ae4:	0030      	movs	r0, r6
 8006ae6:	0039      	movs	r1, r7
 8006ae8:	f7fb f952 	bl	8001d90 <__aeabi_dsub>
 8006aec:	0022      	movs	r2, r4
 8006aee:	002b      	movs	r3, r5
 8006af0:	f7fb f94e 	bl	8001d90 <__aeabi_dsub>
 8006af4:	0002      	movs	r2, r0
 8006af6:	000b      	movs	r3, r1
 8006af8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006afa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006afc:	f7fb f948 	bl	8001d90 <__aeabi_dsub>
 8006b00:	9a08      	ldr	r2, [sp, #32]
 8006b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b04:	f7fa fe82 	bl	800180c <__aeabi_dmul>
 8006b08:	0032      	movs	r2, r6
 8006b0a:	0004      	movs	r4, r0
 8006b0c:	000d      	movs	r5, r1
 8006b0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b12:	003b      	movs	r3, r7
 8006b14:	f7fa fe7a 	bl	800180c <__aeabi_dmul>
 8006b18:	0002      	movs	r2, r0
 8006b1a:	000b      	movs	r3, r1
 8006b1c:	0020      	movs	r0, r4
 8006b1e:	0029      	movs	r1, r5
 8006b20:	f7f9 ff1a 	bl	8000958 <__aeabi_dadd>
 8006b24:	0004      	movs	r4, r0
 8006b26:	000d      	movs	r5, r1
 8006b28:	0002      	movs	r2, r0
 8006b2a:	000b      	movs	r3, r1
 8006b2c:	9800      	ldr	r0, [sp, #0]
 8006b2e:	9901      	ldr	r1, [sp, #4]
 8006b30:	f7f9 ff12 	bl	8000958 <__aeabi_dadd>
 8006b34:	22e0      	movs	r2, #224	; 0xe0
 8006b36:	2000      	movs	r0, #0
 8006b38:	4b43      	ldr	r3, [pc, #268]	; (8006c48 <__ieee754_pow+0x758>)
 8006b3a:	0612      	lsls	r2, r2, #24
 8006b3c:	0006      	movs	r6, r0
 8006b3e:	000f      	movs	r7, r1
 8006b40:	f7fa fe64 	bl	800180c <__aeabi_dmul>
 8006b44:	9008      	str	r0, [sp, #32]
 8006b46:	9109      	str	r1, [sp, #36]	; 0x24
 8006b48:	9a00      	ldr	r2, [sp, #0]
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	0030      	movs	r0, r6
 8006b4e:	0039      	movs	r1, r7
 8006b50:	f7fb f91e 	bl	8001d90 <__aeabi_dsub>
 8006b54:	0002      	movs	r2, r0
 8006b56:	000b      	movs	r3, r1
 8006b58:	0020      	movs	r0, r4
 8006b5a:	0029      	movs	r1, r5
 8006b5c:	f7fb f918 	bl	8001d90 <__aeabi_dsub>
 8006b60:	4a3a      	ldr	r2, [pc, #232]	; (8006c4c <__ieee754_pow+0x75c>)
 8006b62:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <__ieee754_pow+0x758>)
 8006b64:	f7fa fe52 	bl	800180c <__aeabi_dmul>
 8006b68:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <__ieee754_pow+0x760>)
 8006b6a:	0004      	movs	r4, r0
 8006b6c:	000d      	movs	r5, r1
 8006b6e:	0030      	movs	r0, r6
 8006b70:	0039      	movs	r1, r7
 8006b72:	4b38      	ldr	r3, [pc, #224]	; (8006c54 <__ieee754_pow+0x764>)
 8006b74:	f7fa fe4a 	bl	800180c <__aeabi_dmul>
 8006b78:	0002      	movs	r2, r0
 8006b7a:	000b      	movs	r3, r1
 8006b7c:	0020      	movs	r0, r4
 8006b7e:	0029      	movs	r1, r5
 8006b80:	f7f9 feea 	bl	8000958 <__aeabi_dadd>
 8006b84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b86:	4b34      	ldr	r3, [pc, #208]	; (8006c58 <__ieee754_pow+0x768>)
 8006b88:	189b      	adds	r3, r3, r2
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f7f9 fee3 	bl	8000958 <__aeabi_dadd>
 8006b92:	9000      	str	r0, [sp, #0]
 8006b94:	9101      	str	r1, [sp, #4]
 8006b96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006b98:	f7fb fcd0 	bl	800253c <__aeabi_i2d>
 8006b9c:	0004      	movs	r4, r0
 8006b9e:	000d      	movs	r5, r1
 8006ba0:	9808      	ldr	r0, [sp, #32]
 8006ba2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ba6:	4b2d      	ldr	r3, [pc, #180]	; (8006c5c <__ieee754_pow+0x76c>)
 8006ba8:	189b      	adds	r3, r3, r2
 8006baa:	681e      	ldr	r6, [r3, #0]
 8006bac:	685f      	ldr	r7, [r3, #4]
 8006bae:	9a00      	ldr	r2, [sp, #0]
 8006bb0:	9b01      	ldr	r3, [sp, #4]
 8006bb2:	f7f9 fed1 	bl	8000958 <__aeabi_dadd>
 8006bb6:	0032      	movs	r2, r6
 8006bb8:	003b      	movs	r3, r7
 8006bba:	f7f9 fecd 	bl	8000958 <__aeabi_dadd>
 8006bbe:	0022      	movs	r2, r4
 8006bc0:	002b      	movs	r3, r5
 8006bc2:	f7f9 fec9 	bl	8000958 <__aeabi_dadd>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	0022      	movs	r2, r4
 8006bca:	002b      	movs	r3, r5
 8006bcc:	9004      	str	r0, [sp, #16]
 8006bce:	9105      	str	r1, [sp, #20]
 8006bd0:	f7fb f8de 	bl	8001d90 <__aeabi_dsub>
 8006bd4:	0032      	movs	r2, r6
 8006bd6:	003b      	movs	r3, r7
 8006bd8:	f7fb f8da 	bl	8001d90 <__aeabi_dsub>
 8006bdc:	9a08      	ldr	r2, [sp, #32]
 8006bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be0:	f7fb f8d6 	bl	8001d90 <__aeabi_dsub>
 8006be4:	0002      	movs	r2, r0
 8006be6:	000b      	movs	r3, r1
 8006be8:	9800      	ldr	r0, [sp, #0]
 8006bea:	9901      	ldr	r1, [sp, #4]
 8006bec:	e618      	b.n	8006820 <__ieee754_pow+0x330>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	4c03      	ldr	r4, [pc, #12]	; (8006c00 <__ieee754_pow+0x710>)
 8006bf2:	e621      	b.n	8006838 <__ieee754_pow+0x348>
 8006bf4:	7ff00000 	.word	0x7ff00000
 8006bf8:	43400000 	.word	0x43400000
 8006bfc:	fffffc01 	.word	0xfffffc01
 8006c00:	3ff00000 	.word	0x3ff00000
 8006c04:	0003988e 	.word	0x0003988e
 8006c08:	000bb679 	.word	0x000bb679
 8006c0c:	fff00000 	.word	0xfff00000
 8006c10:	08007388 	.word	0x08007388
 8006c14:	4a454eef 	.word	0x4a454eef
 8006c18:	3fca7e28 	.word	0x3fca7e28
 8006c1c:	93c9db65 	.word	0x93c9db65
 8006c20:	3fcd864a 	.word	0x3fcd864a
 8006c24:	a91d4101 	.word	0xa91d4101
 8006c28:	3fd17460 	.word	0x3fd17460
 8006c2c:	518f264d 	.word	0x518f264d
 8006c30:	3fd55555 	.word	0x3fd55555
 8006c34:	db6fabff 	.word	0xdb6fabff
 8006c38:	3fdb6db6 	.word	0x3fdb6db6
 8006c3c:	33333303 	.word	0x33333303
 8006c40:	3fe33333 	.word	0x3fe33333
 8006c44:	40080000 	.word	0x40080000
 8006c48:	3feec709 	.word	0x3feec709
 8006c4c:	dc3a03fd 	.word	0xdc3a03fd
 8006c50:	145b01f5 	.word	0x145b01f5
 8006c54:	be3e2fe0 	.word	0xbe3e2fe0
 8006c58:	080073a8 	.word	0x080073a8
 8006c5c:	08007398 	.word	0x08007398
 8006c60:	4a90      	ldr	r2, [pc, #576]	; (8006ea4 <__ieee754_pow+0x9b4>)
 8006c62:	4b91      	ldr	r3, [pc, #580]	; (8006ea8 <__ieee754_pow+0x9b8>)
 8006c64:	0030      	movs	r0, r6
 8006c66:	0039      	movs	r1, r7
 8006c68:	f7f9 fe76 	bl	8000958 <__aeabi_dadd>
 8006c6c:	9a04      	ldr	r2, [sp, #16]
 8006c6e:	9b05      	ldr	r3, [sp, #20]
 8006c70:	9002      	str	r0, [sp, #8]
 8006c72:	9103      	str	r1, [sp, #12]
 8006c74:	0028      	movs	r0, r5
 8006c76:	0021      	movs	r1, r4
 8006c78:	f7fb f88a 	bl	8001d90 <__aeabi_dsub>
 8006c7c:	0002      	movs	r2, r0
 8006c7e:	000b      	movs	r3, r1
 8006c80:	9802      	ldr	r0, [sp, #8]
 8006c82:	9903      	ldr	r1, [sp, #12]
 8006c84:	f7f9 fbde 	bl	8000444 <__aeabi_dcmpgt>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d000      	beq.n	8006c8e <__ieee754_pow+0x79e>
 8006c8c:	e611      	b.n	80068b2 <__ieee754_pow+0x3c2>
 8006c8e:	2100      	movs	r1, #0
 8006c90:	4a86      	ldr	r2, [pc, #536]	; (8006eac <__ieee754_pow+0x9bc>)
 8006c92:	0063      	lsls	r3, r4, #1
 8006c94:	085b      	lsrs	r3, r3, #1
 8006c96:	9102      	str	r1, [sp, #8]
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	dd25      	ble.n	8006ce8 <__ieee754_pow+0x7f8>
 8006c9c:	4a84      	ldr	r2, [pc, #528]	; (8006eb0 <__ieee754_pow+0x9c0>)
 8006c9e:	151b      	asrs	r3, r3, #20
 8006ca0:	189b      	adds	r3, r3, r2
 8006ca2:	2280      	movs	r2, #128	; 0x80
 8006ca4:	0352      	lsls	r2, r2, #13
 8006ca6:	0011      	movs	r1, r2
 8006ca8:	4119      	asrs	r1, r3
 8006caa:	190b      	adds	r3, r1, r4
 8006cac:	005c      	lsls	r4, r3, #1
 8006cae:	4981      	ldr	r1, [pc, #516]	; (8006eb4 <__ieee754_pow+0x9c4>)
 8006cb0:	4d81      	ldr	r5, [pc, #516]	; (8006eb8 <__ieee754_pow+0x9c8>)
 8006cb2:	0d64      	lsrs	r4, r4, #21
 8006cb4:	1864      	adds	r4, r4, r1
 8006cb6:	4125      	asrs	r5, r4
 8006cb8:	401d      	ands	r5, r3
 8006cba:	031b      	lsls	r3, r3, #12
 8006cbc:	0b1b      	lsrs	r3, r3, #12
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	2214      	movs	r2, #20
 8006cc2:	1b12      	subs	r2, r2, r4
 8006cc4:	4113      	asrs	r3, r2
 8006cc6:	9302      	str	r3, [sp, #8]
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	2000      	movs	r0, #0
 8006ccc:	0029      	movs	r1, r5
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	da02      	bge.n	8006cd8 <__ieee754_pow+0x7e8>
 8006cd2:	9b02      	ldr	r3, [sp, #8]
 8006cd4:	425b      	negs	r3, r3
 8006cd6:	9302      	str	r3, [sp, #8]
 8006cd8:	0002      	movs	r2, r0
 8006cda:	000b      	movs	r3, r1
 8006cdc:	9804      	ldr	r0, [sp, #16]
 8006cde:	9905      	ldr	r1, [sp, #20]
 8006ce0:	f7fb f856 	bl	8001d90 <__aeabi_dsub>
 8006ce4:	9006      	str	r0, [sp, #24]
 8006ce6:	9107      	str	r1, [sp, #28]
 8006ce8:	9806      	ldr	r0, [sp, #24]
 8006cea:	9907      	ldr	r1, [sp, #28]
 8006cec:	0032      	movs	r2, r6
 8006cee:	003b      	movs	r3, r7
 8006cf0:	f7f9 fe32 	bl	8000958 <__aeabi_dadd>
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4b70      	ldr	r3, [pc, #448]	; (8006ebc <__ieee754_pow+0x9cc>)
 8006cfa:	9004      	str	r0, [sp, #16]
 8006cfc:	9105      	str	r1, [sp, #20]
 8006cfe:	f7fa fd85 	bl	800180c <__aeabi_dmul>
 8006d02:	9a06      	ldr	r2, [sp, #24]
 8006d04:	9b07      	ldr	r3, [sp, #28]
 8006d06:	9008      	str	r0, [sp, #32]
 8006d08:	9109      	str	r1, [sp, #36]	; 0x24
 8006d0a:	9804      	ldr	r0, [sp, #16]
 8006d0c:	9905      	ldr	r1, [sp, #20]
 8006d0e:	f7fb f83f 	bl	8001d90 <__aeabi_dsub>
 8006d12:	0002      	movs	r2, r0
 8006d14:	000b      	movs	r3, r1
 8006d16:	0030      	movs	r0, r6
 8006d18:	0039      	movs	r1, r7
 8006d1a:	f7fb f839 	bl	8001d90 <__aeabi_dsub>
 8006d1e:	4a68      	ldr	r2, [pc, #416]	; (8006ec0 <__ieee754_pow+0x9d0>)
 8006d20:	4b68      	ldr	r3, [pc, #416]	; (8006ec4 <__ieee754_pow+0x9d4>)
 8006d22:	f7fa fd73 	bl	800180c <__aeabi_dmul>
 8006d26:	4a68      	ldr	r2, [pc, #416]	; (8006ec8 <__ieee754_pow+0x9d8>)
 8006d28:	0004      	movs	r4, r0
 8006d2a:	000d      	movs	r5, r1
 8006d2c:	9804      	ldr	r0, [sp, #16]
 8006d2e:	9905      	ldr	r1, [sp, #20]
 8006d30:	4b66      	ldr	r3, [pc, #408]	; (8006ecc <__ieee754_pow+0x9dc>)
 8006d32:	f7fa fd6b 	bl	800180c <__aeabi_dmul>
 8006d36:	0002      	movs	r2, r0
 8006d38:	000b      	movs	r3, r1
 8006d3a:	0020      	movs	r0, r4
 8006d3c:	0029      	movs	r1, r5
 8006d3e:	f7f9 fe0b 	bl	8000958 <__aeabi_dadd>
 8006d42:	0004      	movs	r4, r0
 8006d44:	000d      	movs	r5, r1
 8006d46:	0002      	movs	r2, r0
 8006d48:	000b      	movs	r3, r1
 8006d4a:	9808      	ldr	r0, [sp, #32]
 8006d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d4e:	f7f9 fe03 	bl	8000958 <__aeabi_dadd>
 8006d52:	9a08      	ldr	r2, [sp, #32]
 8006d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d56:	0006      	movs	r6, r0
 8006d58:	000f      	movs	r7, r1
 8006d5a:	f7fb f819 	bl	8001d90 <__aeabi_dsub>
 8006d5e:	0002      	movs	r2, r0
 8006d60:	000b      	movs	r3, r1
 8006d62:	0020      	movs	r0, r4
 8006d64:	0029      	movs	r1, r5
 8006d66:	f7fb f813 	bl	8001d90 <__aeabi_dsub>
 8006d6a:	0032      	movs	r2, r6
 8006d6c:	9004      	str	r0, [sp, #16]
 8006d6e:	9105      	str	r1, [sp, #20]
 8006d70:	003b      	movs	r3, r7
 8006d72:	0030      	movs	r0, r6
 8006d74:	0039      	movs	r1, r7
 8006d76:	f7fa fd49 	bl	800180c <__aeabi_dmul>
 8006d7a:	0004      	movs	r4, r0
 8006d7c:	000d      	movs	r5, r1
 8006d7e:	4a54      	ldr	r2, [pc, #336]	; (8006ed0 <__ieee754_pow+0x9e0>)
 8006d80:	4b54      	ldr	r3, [pc, #336]	; (8006ed4 <__ieee754_pow+0x9e4>)
 8006d82:	f7fa fd43 	bl	800180c <__aeabi_dmul>
 8006d86:	4a54      	ldr	r2, [pc, #336]	; (8006ed8 <__ieee754_pow+0x9e8>)
 8006d88:	4b54      	ldr	r3, [pc, #336]	; (8006edc <__ieee754_pow+0x9ec>)
 8006d8a:	f7fb f801 	bl	8001d90 <__aeabi_dsub>
 8006d8e:	0022      	movs	r2, r4
 8006d90:	002b      	movs	r3, r5
 8006d92:	f7fa fd3b 	bl	800180c <__aeabi_dmul>
 8006d96:	4a52      	ldr	r2, [pc, #328]	; (8006ee0 <__ieee754_pow+0x9f0>)
 8006d98:	4b52      	ldr	r3, [pc, #328]	; (8006ee4 <__ieee754_pow+0x9f4>)
 8006d9a:	f7f9 fddd 	bl	8000958 <__aeabi_dadd>
 8006d9e:	0022      	movs	r2, r4
 8006da0:	002b      	movs	r3, r5
 8006da2:	f7fa fd33 	bl	800180c <__aeabi_dmul>
 8006da6:	4a50      	ldr	r2, [pc, #320]	; (8006ee8 <__ieee754_pow+0x9f8>)
 8006da8:	4b50      	ldr	r3, [pc, #320]	; (8006eec <__ieee754_pow+0x9fc>)
 8006daa:	f7fa fff1 	bl	8001d90 <__aeabi_dsub>
 8006dae:	0022      	movs	r2, r4
 8006db0:	002b      	movs	r3, r5
 8006db2:	f7fa fd2b 	bl	800180c <__aeabi_dmul>
 8006db6:	4a4e      	ldr	r2, [pc, #312]	; (8006ef0 <__ieee754_pow+0xa00>)
 8006db8:	4b4e      	ldr	r3, [pc, #312]	; (8006ef4 <__ieee754_pow+0xa04>)
 8006dba:	f7f9 fdcd 	bl	8000958 <__aeabi_dadd>
 8006dbe:	0022      	movs	r2, r4
 8006dc0:	002b      	movs	r3, r5
 8006dc2:	f7fa fd23 	bl	800180c <__aeabi_dmul>
 8006dc6:	0002      	movs	r2, r0
 8006dc8:	000b      	movs	r3, r1
 8006dca:	0030      	movs	r0, r6
 8006dcc:	0039      	movs	r1, r7
 8006dce:	f7fa ffdf 	bl	8001d90 <__aeabi_dsub>
 8006dd2:	0004      	movs	r4, r0
 8006dd4:	000d      	movs	r5, r1
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	000b      	movs	r3, r1
 8006dda:	0030      	movs	r0, r6
 8006ddc:	0039      	movs	r1, r7
 8006dde:	f7fa fd15 	bl	800180c <__aeabi_dmul>
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	9006      	str	r0, [sp, #24]
 8006de6:	9107      	str	r1, [sp, #28]
 8006de8:	2200      	movs	r2, #0
 8006dea:	0020      	movs	r0, r4
 8006dec:	0029      	movs	r1, r5
 8006dee:	05db      	lsls	r3, r3, #23
 8006df0:	f7fa ffce 	bl	8001d90 <__aeabi_dsub>
 8006df4:	0002      	movs	r2, r0
 8006df6:	000b      	movs	r3, r1
 8006df8:	9806      	ldr	r0, [sp, #24]
 8006dfa:	9907      	ldr	r1, [sp, #28]
 8006dfc:	f7fa f90c 	bl	8001018 <__aeabi_ddiv>
 8006e00:	9a04      	ldr	r2, [sp, #16]
 8006e02:	9b05      	ldr	r3, [sp, #20]
 8006e04:	0004      	movs	r4, r0
 8006e06:	000d      	movs	r5, r1
 8006e08:	0030      	movs	r0, r6
 8006e0a:	0039      	movs	r1, r7
 8006e0c:	f7fa fcfe 	bl	800180c <__aeabi_dmul>
 8006e10:	9a04      	ldr	r2, [sp, #16]
 8006e12:	9b05      	ldr	r3, [sp, #20]
 8006e14:	f7f9 fda0 	bl	8000958 <__aeabi_dadd>
 8006e18:	0002      	movs	r2, r0
 8006e1a:	000b      	movs	r3, r1
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	0029      	movs	r1, r5
 8006e20:	f7fa ffb6 	bl	8001d90 <__aeabi_dsub>
 8006e24:	0032      	movs	r2, r6
 8006e26:	003b      	movs	r3, r7
 8006e28:	f7fa ffb2 	bl	8001d90 <__aeabi_dsub>
 8006e2c:	0002      	movs	r2, r0
 8006e2e:	000b      	movs	r3, r1
 8006e30:	2000      	movs	r0, #0
 8006e32:	4931      	ldr	r1, [pc, #196]	; (8006ef8 <__ieee754_pow+0xa08>)
 8006e34:	f7fa ffac 	bl	8001d90 <__aeabi_dsub>
 8006e38:	9b02      	ldr	r3, [sp, #8]
 8006e3a:	051b      	lsls	r3, r3, #20
 8006e3c:	185b      	adds	r3, r3, r1
 8006e3e:	151a      	asrs	r2, r3, #20
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	dc25      	bgt.n	8006e90 <__ieee754_pow+0x9a0>
 8006e44:	9a02      	ldr	r2, [sp, #8]
 8006e46:	f000 f861 	bl	8006f0c <scalbn>
 8006e4a:	9a00      	ldr	r2, [sp, #0]
 8006e4c:	9b01      	ldr	r3, [sp, #4]
 8006e4e:	f7ff fc33 	bl	80066b8 <__ieee754_pow+0x1c8>
 8006e52:	4a2a      	ldr	r2, [pc, #168]	; (8006efc <__ieee754_pow+0xa0c>)
 8006e54:	004b      	lsls	r3, r1, #1
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	dc00      	bgt.n	8006e5e <__ieee754_pow+0x96e>
 8006e5c:	e717      	b.n	8006c8e <__ieee754_pow+0x79e>
 8006e5e:	4b28      	ldr	r3, [pc, #160]	; (8006f00 <__ieee754_pow+0xa10>)
 8006e60:	18cb      	adds	r3, r1, r3
 8006e62:	4303      	orrs	r3, r0
 8006e64:	d008      	beq.n	8006e78 <__ieee754_pow+0x988>
 8006e66:	9800      	ldr	r0, [sp, #0]
 8006e68:	9901      	ldr	r1, [sp, #4]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f7f9 fad5 	bl	800041c <__aeabi_dcmplt>
 8006e72:	1e43      	subs	r3, r0, #1
 8006e74:	4198      	sbcs	r0, r3
 8006e76:	e462      	b.n	800673e <__ieee754_pow+0x24e>
 8006e78:	9a04      	ldr	r2, [sp, #16]
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	f7fa ff88 	bl	8001d90 <__aeabi_dsub>
 8006e80:	0032      	movs	r2, r6
 8006e82:	003b      	movs	r3, r7
 8006e84:	f7f9 fae8 	bl	8000458 <__aeabi_dcmpge>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d100      	bne.n	8006e8e <__ieee754_pow+0x99e>
 8006e8c:	e6ff      	b.n	8006c8e <__ieee754_pow+0x79e>
 8006e8e:	e7ea      	b.n	8006e66 <__ieee754_pow+0x976>
 8006e90:	0019      	movs	r1, r3
 8006e92:	e7da      	b.n	8006e4a <__ieee754_pow+0x95a>
 8006e94:	2300      	movs	r3, #0
 8006e96:	4c18      	ldr	r4, [pc, #96]	; (8006ef8 <__ieee754_pow+0xa08>)
 8006e98:	f7ff fbf1 	bl	800667e <__ieee754_pow+0x18e>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	2400      	movs	r4, #0
 8006ea0:	f7ff fbed 	bl	800667e <__ieee754_pow+0x18e>
 8006ea4:	652b82fe 	.word	0x652b82fe
 8006ea8:	3c971547 	.word	0x3c971547
 8006eac:	3fe00000 	.word	0x3fe00000
 8006eb0:	fffffc02 	.word	0xfffffc02
 8006eb4:	fffffc01 	.word	0xfffffc01
 8006eb8:	fff00000 	.word	0xfff00000
 8006ebc:	3fe62e43 	.word	0x3fe62e43
 8006ec0:	fefa39ef 	.word	0xfefa39ef
 8006ec4:	3fe62e42 	.word	0x3fe62e42
 8006ec8:	0ca86c39 	.word	0x0ca86c39
 8006ecc:	be205c61 	.word	0xbe205c61
 8006ed0:	72bea4d0 	.word	0x72bea4d0
 8006ed4:	3e663769 	.word	0x3e663769
 8006ed8:	c5d26bf1 	.word	0xc5d26bf1
 8006edc:	3ebbbd41 	.word	0x3ebbbd41
 8006ee0:	af25de2c 	.word	0xaf25de2c
 8006ee4:	3f11566a 	.word	0x3f11566a
 8006ee8:	16bebd93 	.word	0x16bebd93
 8006eec:	3f66c16c 	.word	0x3f66c16c
 8006ef0:	5555553e 	.word	0x5555553e
 8006ef4:	3fc55555 	.word	0x3fc55555
 8006ef8:	3ff00000 	.word	0x3ff00000
 8006efc:	4090cbff 	.word	0x4090cbff
 8006f00:	3f6f3400 	.word	0x3f6f3400

08006f04 <fabs>:
 8006f04:	0049      	lsls	r1, r1, #1
 8006f06:	084b      	lsrs	r3, r1, #1
 8006f08:	0019      	movs	r1, r3
 8006f0a:	4770      	bx	lr

08006f0c <scalbn>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	0014      	movs	r4, r2
 8006f10:	004a      	lsls	r2, r1, #1
 8006f12:	000b      	movs	r3, r1
 8006f14:	0d52      	lsrs	r2, r2, #21
 8006f16:	d10f      	bne.n	8006f38 <scalbn+0x2c>
 8006f18:	004b      	lsls	r3, r1, #1
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	4303      	orrs	r3, r0
 8006f1e:	d011      	beq.n	8006f44 <scalbn+0x38>
 8006f20:	4b22      	ldr	r3, [pc, #136]	; (8006fac <scalbn+0xa0>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	f7fa fc72 	bl	800180c <__aeabi_dmul>
 8006f28:	4b21      	ldr	r3, [pc, #132]	; (8006fb0 <scalbn+0xa4>)
 8006f2a:	429c      	cmp	r4, r3
 8006f2c:	da0b      	bge.n	8006f46 <scalbn+0x3a>
 8006f2e:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <scalbn+0xa8>)
 8006f30:	4b21      	ldr	r3, [pc, #132]	; (8006fb8 <scalbn+0xac>)
 8006f32:	f7fa fc6b 	bl	800180c <__aeabi_dmul>
 8006f36:	e005      	b.n	8006f44 <scalbn+0x38>
 8006f38:	4d20      	ldr	r5, [pc, #128]	; (8006fbc <scalbn+0xb0>)
 8006f3a:	42aa      	cmp	r2, r5
 8006f3c:	d107      	bne.n	8006f4e <scalbn+0x42>
 8006f3e:	0002      	movs	r2, r0
 8006f40:	f7f9 fd0a 	bl	8000958 <__aeabi_dadd>
 8006f44:	bd70      	pop	{r4, r5, r6, pc}
 8006f46:	000b      	movs	r3, r1
 8006f48:	004a      	lsls	r2, r1, #1
 8006f4a:	0d52      	lsrs	r2, r2, #21
 8006f4c:	3a36      	subs	r2, #54	; 0x36
 8006f4e:	4d1c      	ldr	r5, [pc, #112]	; (8006fc0 <scalbn+0xb4>)
 8006f50:	42ac      	cmp	r4, r5
 8006f52:	dd0a      	ble.n	8006f6a <scalbn+0x5e>
 8006f54:	4c1b      	ldr	r4, [pc, #108]	; (8006fc4 <scalbn+0xb8>)
 8006f56:	4d1c      	ldr	r5, [pc, #112]	; (8006fc8 <scalbn+0xbc>)
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	da01      	bge.n	8006f60 <scalbn+0x54>
 8006f5c:	4c19      	ldr	r4, [pc, #100]	; (8006fc4 <scalbn+0xb8>)
 8006f5e:	4d1b      	ldr	r5, [pc, #108]	; (8006fcc <scalbn+0xc0>)
 8006f60:	4a18      	ldr	r2, [pc, #96]	; (8006fc4 <scalbn+0xb8>)
 8006f62:	4b19      	ldr	r3, [pc, #100]	; (8006fc8 <scalbn+0xbc>)
 8006f64:	0020      	movs	r0, r4
 8006f66:	0029      	movs	r1, r5
 8006f68:	e7e3      	b.n	8006f32 <scalbn+0x26>
 8006f6a:	18a2      	adds	r2, r4, r2
 8006f6c:	4c18      	ldr	r4, [pc, #96]	; (8006fd0 <scalbn+0xc4>)
 8006f6e:	42a2      	cmp	r2, r4
 8006f70:	dcf0      	bgt.n	8006f54 <scalbn+0x48>
 8006f72:	2a00      	cmp	r2, #0
 8006f74:	dd05      	ble.n	8006f82 <scalbn+0x76>
 8006f76:	4c17      	ldr	r4, [pc, #92]	; (8006fd4 <scalbn+0xc8>)
 8006f78:	0512      	lsls	r2, r2, #20
 8006f7a:	4023      	ands	r3, r4
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	0019      	movs	r1, r3
 8006f80:	e7e0      	b.n	8006f44 <scalbn+0x38>
 8006f82:	0014      	movs	r4, r2
 8006f84:	3435      	adds	r4, #53	; 0x35
 8006f86:	da08      	bge.n	8006f9a <scalbn+0x8e>
 8006f88:	4c0a      	ldr	r4, [pc, #40]	; (8006fb4 <scalbn+0xa8>)
 8006f8a:	4d0b      	ldr	r5, [pc, #44]	; (8006fb8 <scalbn+0xac>)
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	da01      	bge.n	8006f94 <scalbn+0x88>
 8006f90:	4c08      	ldr	r4, [pc, #32]	; (8006fb4 <scalbn+0xa8>)
 8006f92:	4d11      	ldr	r5, [pc, #68]	; (8006fd8 <scalbn+0xcc>)
 8006f94:	4a07      	ldr	r2, [pc, #28]	; (8006fb4 <scalbn+0xa8>)
 8006f96:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <scalbn+0xac>)
 8006f98:	e7e4      	b.n	8006f64 <scalbn+0x58>
 8006f9a:	4c0e      	ldr	r4, [pc, #56]	; (8006fd4 <scalbn+0xc8>)
 8006f9c:	3236      	adds	r2, #54	; 0x36
 8006f9e:	4023      	ands	r3, r4
 8006fa0:	0512      	lsls	r2, r2, #20
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	0011      	movs	r1, r2
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <scalbn+0xd0>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	e7c2      	b.n	8006f32 <scalbn+0x26>
 8006fac:	43500000 	.word	0x43500000
 8006fb0:	ffff3cb0 	.word	0xffff3cb0
 8006fb4:	c2f8f359 	.word	0xc2f8f359
 8006fb8:	01a56e1f 	.word	0x01a56e1f
 8006fbc:	000007ff 	.word	0x000007ff
 8006fc0:	0000c350 	.word	0x0000c350
 8006fc4:	8800759c 	.word	0x8800759c
 8006fc8:	7e37e43c 	.word	0x7e37e43c
 8006fcc:	fe37e43c 	.word	0xfe37e43c
 8006fd0:	000007fe 	.word	0x000007fe
 8006fd4:	800fffff 	.word	0x800fffff
 8006fd8:	81a56e1f 	.word	0x81a56e1f
 8006fdc:	3c900000 	.word	0x3c900000

08006fe0 <with_errno>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	000d      	movs	r5, r1
 8006fe4:	0016      	movs	r6, r2
 8006fe6:	0004      	movs	r4, r0
 8006fe8:	f7ff f9e2 	bl	80063b0 <__errno>
 8006fec:	0029      	movs	r1, r5
 8006fee:	6006      	str	r6, [r0, #0]
 8006ff0:	0020      	movs	r0, r4
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}

08006ff4 <xflow>:
 8006ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ff6:	0015      	movs	r5, r2
 8006ff8:	001c      	movs	r4, r3
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d010      	beq.n	8007020 <xflow+0x2c>
 8006ffe:	2380      	movs	r3, #128	; 0x80
 8007000:	0010      	movs	r0, r2
 8007002:	061b      	lsls	r3, r3, #24
 8007004:	18e1      	adds	r1, r4, r3
 8007006:	9000      	str	r0, [sp, #0]
 8007008:	9101      	str	r1, [sp, #4]
 800700a:	9a00      	ldr	r2, [sp, #0]
 800700c:	9b01      	ldr	r3, [sp, #4]
 800700e:	0028      	movs	r0, r5
 8007010:	0021      	movs	r1, r4
 8007012:	f7fa fbfb 	bl	800180c <__aeabi_dmul>
 8007016:	2222      	movs	r2, #34	; 0x22
 8007018:	f7ff ffe2 	bl	8006fe0 <with_errno>
 800701c:	b003      	add	sp, #12
 800701e:	bd30      	pop	{r4, r5, pc}
 8007020:	0010      	movs	r0, r2
 8007022:	0019      	movs	r1, r3
 8007024:	e7ef      	b.n	8007006 <xflow+0x12>

08007026 <__math_uflow>:
 8007026:	2380      	movs	r3, #128	; 0x80
 8007028:	b510      	push	{r4, lr}
 800702a:	2200      	movs	r2, #0
 800702c:	055b      	lsls	r3, r3, #21
 800702e:	f7ff ffe1 	bl	8006ff4 <xflow>
 8007032:	bd10      	pop	{r4, pc}

08007034 <__math_oflow>:
 8007034:	23e0      	movs	r3, #224	; 0xe0
 8007036:	b510      	push	{r4, lr}
 8007038:	2200      	movs	r2, #0
 800703a:	05db      	lsls	r3, r3, #23
 800703c:	f7ff ffda 	bl	8006ff4 <xflow>
 8007040:	bd10      	pop	{r4, pc}
	...

08007044 <__ieee754_sqrt>:
 8007044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007046:	000a      	movs	r2, r1
 8007048:	000c      	movs	r4, r1
 800704a:	496f      	ldr	r1, [pc, #444]	; (8007208 <__ieee754_sqrt+0x1c4>)
 800704c:	0005      	movs	r5, r0
 800704e:	0003      	movs	r3, r0
 8007050:	0008      	movs	r0, r1
 8007052:	b087      	sub	sp, #28
 8007054:	4020      	ands	r0, r4
 8007056:	4288      	cmp	r0, r1
 8007058:	d111      	bne.n	800707e <__ieee754_sqrt+0x3a>
 800705a:	002a      	movs	r2, r5
 800705c:	0023      	movs	r3, r4
 800705e:	0028      	movs	r0, r5
 8007060:	0021      	movs	r1, r4
 8007062:	f7fa fbd3 	bl	800180c <__aeabi_dmul>
 8007066:	0002      	movs	r2, r0
 8007068:	000b      	movs	r3, r1
 800706a:	0028      	movs	r0, r5
 800706c:	0021      	movs	r1, r4
 800706e:	f7f9 fc73 	bl	8000958 <__aeabi_dadd>
 8007072:	0005      	movs	r5, r0
 8007074:	000c      	movs	r4, r1
 8007076:	0028      	movs	r0, r5
 8007078:	0021      	movs	r1, r4
 800707a:	b007      	add	sp, #28
 800707c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707e:	2c00      	cmp	r4, #0
 8007080:	dc12      	bgt.n	80070a8 <__ieee754_sqrt+0x64>
 8007082:	0061      	lsls	r1, r4, #1
 8007084:	0849      	lsrs	r1, r1, #1
 8007086:	4329      	orrs	r1, r5
 8007088:	d0f5      	beq.n	8007076 <__ieee754_sqrt+0x32>
 800708a:	2100      	movs	r1, #0
 800708c:	428c      	cmp	r4, r1
 800708e:	d100      	bne.n	8007092 <__ieee754_sqrt+0x4e>
 8007090:	e09f      	b.n	80071d2 <__ieee754_sqrt+0x18e>
 8007092:	002a      	movs	r2, r5
 8007094:	0023      	movs	r3, r4
 8007096:	0028      	movs	r0, r5
 8007098:	0021      	movs	r1, r4
 800709a:	f7fa fe79 	bl	8001d90 <__aeabi_dsub>
 800709e:	0002      	movs	r2, r0
 80070a0:	000b      	movs	r3, r1
 80070a2:	f7f9 ffb9 	bl	8001018 <__aeabi_ddiv>
 80070a6:	e7e4      	b.n	8007072 <__ieee754_sqrt+0x2e>
 80070a8:	1521      	asrs	r1, r4, #20
 80070aa:	d100      	bne.n	80070ae <__ieee754_sqrt+0x6a>
 80070ac:	e091      	b.n	80071d2 <__ieee754_sqrt+0x18e>
 80070ae:	4857      	ldr	r0, [pc, #348]	; (800720c <__ieee754_sqrt+0x1c8>)
 80070b0:	0312      	lsls	r2, r2, #12
 80070b2:	180c      	adds	r4, r1, r0
 80070b4:	2080      	movs	r0, #128	; 0x80
 80070b6:	0b12      	lsrs	r2, r2, #12
 80070b8:	0340      	lsls	r0, r0, #13
 80070ba:	4310      	orrs	r0, r2
 80070bc:	07c9      	lsls	r1, r1, #31
 80070be:	d403      	bmi.n	80070c8 <__ieee754_sqrt+0x84>
 80070c0:	0fda      	lsrs	r2, r3, #31
 80070c2:	0040      	lsls	r0, r0, #1
 80070c4:	1810      	adds	r0, r2, r0
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	2500      	movs	r5, #0
 80070ca:	1062      	asrs	r2, r4, #1
 80070cc:	0040      	lsls	r0, r0, #1
 80070ce:	2480      	movs	r4, #128	; 0x80
 80070d0:	9205      	str	r2, [sp, #20]
 80070d2:	0fda      	lsrs	r2, r3, #31
 80070d4:	1812      	adds	r2, r2, r0
 80070d6:	0029      	movs	r1, r5
 80070d8:	2016      	movs	r0, #22
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	03a4      	lsls	r4, r4, #14
 80070de:	190e      	adds	r6, r1, r4
 80070e0:	4296      	cmp	r6, r2
 80070e2:	dc02      	bgt.n	80070ea <__ieee754_sqrt+0xa6>
 80070e4:	1931      	adds	r1, r6, r4
 80070e6:	1b92      	subs	r2, r2, r6
 80070e8:	192d      	adds	r5, r5, r4
 80070ea:	0fde      	lsrs	r6, r3, #31
 80070ec:	0052      	lsls	r2, r2, #1
 80070ee:	3801      	subs	r0, #1
 80070f0:	18b2      	adds	r2, r6, r2
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	0864      	lsrs	r4, r4, #1
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d1f1      	bne.n	80070de <__ieee754_sqrt+0x9a>
 80070fa:	2620      	movs	r6, #32
 80070fc:	2780      	movs	r7, #128	; 0x80
 80070fe:	0004      	movs	r4, r0
 8007100:	9604      	str	r6, [sp, #16]
 8007102:	063f      	lsls	r7, r7, #24
 8007104:	183e      	adds	r6, r7, r0
 8007106:	46b4      	mov	ip, r6
 8007108:	428a      	cmp	r2, r1
 800710a:	dc02      	bgt.n	8007112 <__ieee754_sqrt+0xce>
 800710c:	d114      	bne.n	8007138 <__ieee754_sqrt+0xf4>
 800710e:	429e      	cmp	r6, r3
 8007110:	d812      	bhi.n	8007138 <__ieee754_sqrt+0xf4>
 8007112:	4660      	mov	r0, ip
 8007114:	4666      	mov	r6, ip
 8007116:	19c0      	adds	r0, r0, r7
 8007118:	9100      	str	r1, [sp, #0]
 800711a:	2e00      	cmp	r6, #0
 800711c:	da03      	bge.n	8007126 <__ieee754_sqrt+0xe2>
 800711e:	43c6      	mvns	r6, r0
 8007120:	0ff6      	lsrs	r6, r6, #31
 8007122:	198e      	adds	r6, r1, r6
 8007124:	9600      	str	r6, [sp, #0]
 8007126:	1a52      	subs	r2, r2, r1
 8007128:	4563      	cmp	r3, ip
 800712a:	4189      	sbcs	r1, r1
 800712c:	4249      	negs	r1, r1
 800712e:	1a52      	subs	r2, r2, r1
 8007130:	4661      	mov	r1, ip
 8007132:	1a5b      	subs	r3, r3, r1
 8007134:	9900      	ldr	r1, [sp, #0]
 8007136:	19e4      	adds	r4, r4, r7
 8007138:	0fde      	lsrs	r6, r3, #31
 800713a:	0052      	lsls	r2, r2, #1
 800713c:	18b2      	adds	r2, r6, r2
 800713e:	9e04      	ldr	r6, [sp, #16]
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	3e01      	subs	r6, #1
 8007144:	087f      	lsrs	r7, r7, #1
 8007146:	9604      	str	r6, [sp, #16]
 8007148:	2e00      	cmp	r6, #0
 800714a:	d1db      	bne.n	8007104 <__ieee754_sqrt+0xc0>
 800714c:	431a      	orrs	r2, r3
 800714e:	d01f      	beq.n	8007190 <__ieee754_sqrt+0x14c>
 8007150:	4e2f      	ldr	r6, [pc, #188]	; (8007210 <__ieee754_sqrt+0x1cc>)
 8007152:	4f30      	ldr	r7, [pc, #192]	; (8007214 <__ieee754_sqrt+0x1d0>)
 8007154:	6830      	ldr	r0, [r6, #0]
 8007156:	6871      	ldr	r1, [r6, #4]
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	9200      	str	r2, [sp, #0]
 800715e:	9301      	str	r3, [sp, #4]
 8007160:	6832      	ldr	r2, [r6, #0]
 8007162:	6873      	ldr	r3, [r6, #4]
 8007164:	9202      	str	r2, [sp, #8]
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	9a00      	ldr	r2, [sp, #0]
 800716a:	9b01      	ldr	r3, [sp, #4]
 800716c:	f7fa fe10 	bl	8001d90 <__aeabi_dsub>
 8007170:	0002      	movs	r2, r0
 8007172:	000b      	movs	r3, r1
 8007174:	9802      	ldr	r0, [sp, #8]
 8007176:	9903      	ldr	r1, [sp, #12]
 8007178:	f7f9 f95a 	bl	8000430 <__aeabi_dcmple>
 800717c:	2800      	cmp	r0, #0
 800717e:	d007      	beq.n	8007190 <__ieee754_sqrt+0x14c>
 8007180:	6830      	ldr	r0, [r6, #0]
 8007182:	6871      	ldr	r1, [r6, #4]
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	1c67      	adds	r7, r4, #1
 800718a:	d127      	bne.n	80071dc <__ieee754_sqrt+0x198>
 800718c:	9c04      	ldr	r4, [sp, #16]
 800718e:	3501      	adds	r5, #1
 8007190:	4b21      	ldr	r3, [pc, #132]	; (8007218 <__ieee754_sqrt+0x1d4>)
 8007192:	1069      	asrs	r1, r5, #1
 8007194:	18c9      	adds	r1, r1, r3
 8007196:	0864      	lsrs	r4, r4, #1
 8007198:	07ed      	lsls	r5, r5, #31
 800719a:	d502      	bpl.n	80071a2 <__ieee754_sqrt+0x15e>
 800719c:	2380      	movs	r3, #128	; 0x80
 800719e:	061b      	lsls	r3, r3, #24
 80071a0:	431c      	orrs	r4, r3
 80071a2:	9b05      	ldr	r3, [sp, #20]
 80071a4:	0025      	movs	r5, r4
 80071a6:	0518      	lsls	r0, r3, #20
 80071a8:	1843      	adds	r3, r0, r1
 80071aa:	001c      	movs	r4, r3
 80071ac:	e763      	b.n	8007076 <__ieee754_sqrt+0x32>
 80071ae:	0ada      	lsrs	r2, r3, #11
 80071b0:	3815      	subs	r0, #21
 80071b2:	055b      	lsls	r3, r3, #21
 80071b4:	2a00      	cmp	r2, #0
 80071b6:	d0fa      	beq.n	80071ae <__ieee754_sqrt+0x16a>
 80071b8:	2480      	movs	r4, #128	; 0x80
 80071ba:	0364      	lsls	r4, r4, #13
 80071bc:	4222      	tst	r2, r4
 80071be:	d00a      	beq.n	80071d6 <__ieee754_sqrt+0x192>
 80071c0:	2420      	movs	r4, #32
 80071c2:	001e      	movs	r6, r3
 80071c4:	1a64      	subs	r4, r4, r1
 80071c6:	40e6      	lsrs	r6, r4
 80071c8:	1e4d      	subs	r5, r1, #1
 80071ca:	408b      	lsls	r3, r1
 80071cc:	4332      	orrs	r2, r6
 80071ce:	1b41      	subs	r1, r0, r5
 80071d0:	e76d      	b.n	80070ae <__ieee754_sqrt+0x6a>
 80071d2:	2000      	movs	r0, #0
 80071d4:	e7ee      	b.n	80071b4 <__ieee754_sqrt+0x170>
 80071d6:	0052      	lsls	r2, r2, #1
 80071d8:	3101      	adds	r1, #1
 80071da:	e7ef      	b.n	80071bc <__ieee754_sqrt+0x178>
 80071dc:	f7f9 fbbc 	bl	8000958 <__aeabi_dadd>
 80071e0:	6877      	ldr	r7, [r6, #4]
 80071e2:	6836      	ldr	r6, [r6, #0]
 80071e4:	0002      	movs	r2, r0
 80071e6:	000b      	movs	r3, r1
 80071e8:	0030      	movs	r0, r6
 80071ea:	0039      	movs	r1, r7
 80071ec:	f7f9 f916 	bl	800041c <__aeabi_dcmplt>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d004      	beq.n	80071fe <__ieee754_sqrt+0x1ba>
 80071f4:	3402      	adds	r4, #2
 80071f6:	4263      	negs	r3, r4
 80071f8:	4163      	adcs	r3, r4
 80071fa:	18ed      	adds	r5, r5, r3
 80071fc:	e7c8      	b.n	8007190 <__ieee754_sqrt+0x14c>
 80071fe:	2301      	movs	r3, #1
 8007200:	3401      	adds	r4, #1
 8007202:	439c      	bics	r4, r3
 8007204:	e7c4      	b.n	8007190 <__ieee754_sqrt+0x14c>
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	7ff00000 	.word	0x7ff00000
 800720c:	fffffc01 	.word	0xfffffc01
 8007210:	20000060 	.word	0x20000060
 8007214:	20000068 	.word	0x20000068
 8007218:	3fe00000 	.word	0x3fe00000

0800721c <_init>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr

08007228 <_fini>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722e:	bc08      	pop	{r3}
 8007230:	469e      	mov	lr, r3
 8007232:	4770      	bx	lr
